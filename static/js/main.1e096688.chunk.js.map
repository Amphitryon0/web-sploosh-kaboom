{"version":3,"sources":["wasm/sploosh_wasm.js","App.js","serviceWorker.js","index.js"],"names":["wasm","cachegetUint8Memory0","WASM_VECTOR_LEN","passArray8ToWasm0","arg","malloc","ptr","length","buffer","memory","Uint8Array","set","cachegetUint32Memory0","passArray32ToWasm0","Uint32Array","cachegetFloat64Memory0","getFloat64Memory0","Float64Array","passArrayF64ToWasm0","cachegetInt32Memory0","getInt32Memory0","Int32Array","getArrayF64FromWasm0","len","subarray","calculate_probabilities_without_sequence","hits","misses","squids_gotten","ptr0","__wbindgen_malloc","len0","ptr1","len1","v2","r0","r1","slice","__wbindgen_free","calculate_probabilities_from_game_history","observed_boards","prior_steps_from_previous_means","prior_steps_from_previous_stddevs","ptr2","len2","ptr3","len3","ptr4","len4","v5","disambiguate_board","undefined","set_board_table","board_table","load","module","imports","a","Response","WebAssembly","instantiateStreaming","headers","get","console","warn","arrayBuffer","bytes","instantiate","instance","Instance","init","input","Request","URL","fetch","exports","__wbindgen_wasm_module","interpolate","require","globalDB","indexedDBreq","window","indexedDB","open","dbWrite","key","value","transaction","onerror","event","alert","objectStore","put","dbRead","Promise","resolve","reject","request","onsuccess","target","result","toPercent","precision","toFixed","errorCode","setLargestLocalTableSize","onupgradeneeded","createObjectStore","colormap","naturalsUpTo","n","Array","keys","Tile","isBest","this","props","best","x","y","backgroundColor","text","prob","className","style","border","valid","outline","zIndex","opacity","onClick","React","Component","process","globalMap","dbCachedFetch","url","callback","cacheMiss","req","XMLHttpRequest","responseType","onload","evt","response","send","catch","state","doneInitializing","then","name","setState","largestLocalTableSize","tableSize","makeBoardIndicesTable","actuallyMakeBoardIndicesTable","descs","direction","push","allBoards","boardIndices","placeSquid","board","desc","i","fill","squid2","squid3","squid4","count","from","index","map","join","LayoutDrawingBoard","grid","makeEmptyGrid","selectedCell","changeMade","dx","dy","countsBySquid","2","3","4","layoutString","getLayoutString","boardIndex","parent","isSelectedCell","globalBoardTimer","setInterval","forceUpdate","BoardTimer","previouslyAccumulatedSeconds","timerStartMS","timerRunning","includesLoadingTheRoom","includedRewardsGotten","invalidated","now","performance","elapsed","delta","Math","max","min","timerStepEstimates","total","timeDeltaSeconds","prediction","Number","timedTickIntercept","timedTickRate","roomEnteredOffset","round","getSecondsElapsed","guessStepsElapsedFromTime","color","defaultConfigurationParams","firstBoardStepsThousands","firstBoardStepsThousandsStdDev","nextBoardStepsThousands","nextBoardStepsThousandsStdDev","timedBoardStepsThousandsStdDev","usingTimer","autoRecomputeMatches","showAdvancedSettings","MainMap","layoutDrawingBoardRefs","createRef","timerRef","makeEmptyState","doComputation","squidsGotten","probs","undoBuffer","cursorBelief","observationProb","lastComputationTime","sequenceAware","showKeyShortcuts","potentialMatches","savedSettings","localStorage","getItem","JSON","parse","Object","configParams","settings","getConfigParams","log","setItem","stringify","boardIndexToLayoutString","buf","boardTable","clearField","observedBoards","startIndex","scanRange","soughtBoard","remainingBoards","indexMax","findMatchingLocations","subResult","all_matches","scanStart","nearlyCertainRadius","makeGameHistoryArguments","matches","match","rawObservedBoards","ref","current","ob","means","stds","estimates","lastEstimate","timedStd","gridValue","numericSquidsGotten","t0","getGridStatistics","gameHistoryArguments","probabilities","maxY","maxX","highestProb","p1","p2","l1Distance","abs","distancePenaltyMultiplier","distanceAdjustedProb","t1","setAsHit","copyToUndoBuffer","templateState","newState","undoEntry","pop","incrementKills","boardTimer","newEstimates","toggleRunning","copyToHistory","recomputePotentialMatches","numericValue","finalBoard","fillIndex","shiftHistory","setStateFromLayoutString","drawingBoards","clearBoard","usedShots","openingOptimizer","timerStepEstimateText","v","largestLocalTable","replace","wrongTableWarning","placeSelf","id","renderActualMap","marginTop","onChange","reportMiss","reportHit","splitTimer","clearHistory","resetTimer","htmlFor","type","checked","disabled","saveConfigParams","factoryResetConfigParams","margin","borderRadius","width","minHeight","display","diffs","confirm","loadSequenceTable","document","addEventListener","code","ctrlKey","tagName","preventDefault","undoLastMarking","shiftKey","adjustRewards","toggleInvalidated","App","marginLeft","marginRight","maxWidth","href","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.1e096688.chunk.js","sourcesContent":["\nlet wasm;\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\n\nfunction passArray32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4);\n    getUint32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetFloat64Memory0 = null;\nfunction getFloat64Memory0() {\n    if (cachegetFloat64Memory0 === null || cachegetFloat64Memory0.buffer !== wasm.memory.buffer) {\n        cachegetFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachegetFloat64Memory0;\n}\n\nfunction passArrayF64ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 8);\n    getFloat64Memory0().set(arg, ptr / 8);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction getArrayF64FromWasm0(ptr, len) {\n    return getFloat64Memory0().subarray(ptr / 8, ptr / 8 + len);\n}\n/**\n* @param {Uint8Array} hits\n* @param {Uint8Array} misses\n* @param {number} squids_gotten\n* @returns {Float64Array | undefined}\n*/\nexport function calculate_probabilities_without_sequence(hits, misses, squids_gotten) {\n    var ptr0 = passArray8ToWasm0(hits, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(misses, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    wasm.calculate_probabilities_without_sequence(8, ptr0, len0, ptr1, len1, squids_gotten);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    let v2;\n    if (r0 !== 0) {\n        v2 = getArrayF64FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 8);\n    }\n    return v2;\n}\n\n/**\n* @param {Uint8Array} hits\n* @param {Uint8Array} misses\n* @param {number} squids_gotten\n* @param {Uint32Array} observed_boards\n* @param {Uint32Array} prior_steps_from_previous_means\n* @param {Float64Array} prior_steps_from_previous_stddevs\n* @returns {Float64Array | undefined}\n*/\nexport function calculate_probabilities_from_game_history(hits, misses, squids_gotten, observed_boards, prior_steps_from_previous_means, prior_steps_from_previous_stddevs) {\n    var ptr0 = passArray8ToWasm0(hits, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(misses, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passArray32ToWasm0(observed_boards, wasm.__wbindgen_malloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passArray32ToWasm0(prior_steps_from_previous_means, wasm.__wbindgen_malloc);\n    var len3 = WASM_VECTOR_LEN;\n    var ptr4 = passArrayF64ToWasm0(prior_steps_from_previous_stddevs, wasm.__wbindgen_malloc);\n    var len4 = WASM_VECTOR_LEN;\n    wasm.calculate_probabilities_from_game_history(8, ptr0, len0, ptr1, len1, squids_gotten, ptr2, len2, ptr3, len3, ptr4, len4);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    let v5;\n    if (r0 !== 0) {\n        v5 = getArrayF64FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 8);\n    }\n    return v5;\n}\n\n/**\n* @param {Uint8Array} hits\n* @param {Uint8Array} misses\n* @param {number} squids_gotten\n* @param {Uint32Array} observed_boards\n* @param {Uint32Array} prior_steps_from_previous_means\n* @param {Float64Array} prior_steps_from_previous_stddevs\n* @returns {number | undefined}\n*/\nexport function disambiguate_board(hits, misses, squids_gotten, observed_boards, prior_steps_from_previous_means, prior_steps_from_previous_stddevs) {\n    var ptr0 = passArray8ToWasm0(hits, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(misses, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passArray32ToWasm0(observed_boards, wasm.__wbindgen_malloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passArray32ToWasm0(prior_steps_from_previous_means, wasm.__wbindgen_malloc);\n    var len3 = WASM_VECTOR_LEN;\n    var ptr4 = passArrayF64ToWasm0(prior_steps_from_previous_stddevs, wasm.__wbindgen_malloc);\n    var len4 = WASM_VECTOR_LEN;\n    wasm.disambiguate_board(8, ptr0, len0, ptr1, len1, squids_gotten, ptr2, len2, ptr3, len3, ptr4, len4);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    return r0 === 0 ? undefined : r1 >>> 0;\n}\n\n/**\n* @param {Uint32Array} board_table\n*/\nexport function set_board_table(board_table) {\n    var ptr0 = passArray32ToWasm0(board_table, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.set_board_table(ptr0, len0);\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') !== 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nasync function init(input) {\n    //if (typeof input === 'undefined') {\n    //    input = import.meta.url.replace(/\\.js$/, '_bg.wasm');\n    //}\n    const imports = {};\n\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    const { instance, module } = await load(await input, imports);\n\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n\n    return wasm;\n}\n\nexport default init;\n\n","import React from 'react';\nimport './App.css';\nimport init, {\n    set_board_table,\n    calculate_probabilities_without_sequence,\n    calculate_probabilities_from_game_history,\n    disambiguate_board,\n} from './wasm/sploosh_wasm.js';\nconst interpolate = require('color-interpolate');\n\nconst VERSION_STRING = 'v0.1.0-beta.14';\n\nvar globalDB = null;\nconst indexedDBreq = window.indexedDB.open('splooshkaboom', 1);\nindexedDBreq.onerror = function(event) {\n    alert('Failed to access IndexedDB.');\n};\n// Known issue: There's basically a race condition here in that I don't\n// wait for this onsuccess to potentially start calling dbRead.\nindexedDBreq.onsuccess = function(event) {\n    globalDB = event.target.result;\n    globalDB.onerror = function(event) {\n        alert('IndexedDB error: ' + event.target.errorCode);\n    };\n    // Trying this here and after globalMap's component has mounted guarantees\n    // that it is set somewhere.\n    setLargestLocalTableSize();\n};\nindexedDBreq.onupgradeneeded = function(event) {\n    const db = event.target.result;\n    db.createObjectStore('sk');\n}\n\n// TODO: Am I using IndexedDB even remotely correctly!? This looks so weird...\n// Do I not have to somehow end or commit the transactions!?\n\nfunction dbWrite(key, value) {\n    if (globalDB === null)\n        return;\n\n    const transaction = globalDB.transaction(['sk'], 'readwrite');\n\n    transaction.onerror = function(event) {\n        alert('Transaction error!');\n    }\n    transaction.objectStore('sk').put(value, key);\n}\n\nfunction dbRead(key) {\n    return new Promise((resolve, reject) => {\n        const transaction = globalDB.transaction(['sk']);\n\n        transaction.onerror = function(event) {\n            alert('Transaction error!');\n        }\n        const objectStore = transaction.objectStore('sk');\n        const request = objectStore.get(key);\n        request.onsuccess = function(event) {\n            resolve(event.target.result);\n        };\n        request.onerror = function(event) {\n            reject();\n        };\n    });\n}\n\nfunction toPercent(value, precision) {\n    return (value * 100).toFixed(precision) + '%';\n}\n\n// .        . . . .\n// 0123456789abcdef\nconst colormap = interpolate(['#004', '#070', '#090', '#0b0', '#0d0', '#0f0', '#6f6']);\nconst naturalsUpTo = (n) => [...Array(n).keys()];\n\nclass Tile extends React.Component {\n    render() {\n        const isBest = this.props.best !== null && this.props.best[0] === this.props.x && this.props.best[1] === this.props.y;\n\n        let backgroundColor = this.props.backgroundColor;\n        if (backgroundColor === undefined) {\n            backgroundColor = this.props.text === null ? colormap(this.props.prob) : (\n                this.props.text === 'HIT' ? '#a2a' : '#44a'\n            );\n        }\n\n        return <div className=\"boardTile\"\n            key={this.props.x + ',' + this.props.y}\n            style={{\n                border: this.props.valid ? '1px solid grey' : '1px solid red',\n                outline: isBest ? '2px solid yellow' : '',\n                zIndex: isBest ? 1 : 0,\n                opacity: this.props.opacity,\n                backgroundColor,\n            }}\n            onClick={this.props.onClick}\n        >\n            {this.props.text === '.' ? ''\n                : this.props.text ?? toPercent(this.props.prob, this.props.precision)}\n        </div>;\n    }\n}\n\nlet wasm = init(process.env.PUBLIC_URL + \"/sploosh_wasm_bg.wasm\");\n\n// Super ugly, please forgive me. :(\nvar globalMap = null;\n\nasync function dbCachedFetch(url, callback) {\n    function cacheMiss() {\n        const req = new XMLHttpRequest();\n        req.open('GET', process.env.PUBLIC_URL + url, true);\n        req.responseType = 'arraybuffer';\n        req.onload = (evt) => {\n            dbWrite(url, req.response);\n            callback(req.response);\n        };\n        req.send();\n        return null;\n    }\n    const result = await dbRead(url).catch(cacheMiss);\n    if (result === undefined) {\n        cacheMiss();\n        return;\n    }\n    // This is sort of an ugly protocol, but if we hit the catch path above\n    // we signal that the callback was already called by returning null.\n    if (result === null)\n        return;\n    callback(result);\n}\n\nfunction setLargestLocalTableSize() {\n    // If globalDB isn't initialized, it may or may not be later, so we need to\n    // treat it like it never will be and update our belief later if it is.\n    if (globalDB === null || !globalMap.state.doneInitializing)\n        return null;\n    dbRead('largestLocalTableSize').then((name) => {\n        if (name)\n            globalMap.setState({ largestLocalTableSize: name, tableSize: name });\n    });\n}\n\nasync function makeBoardIndicesTable() {\n    function cacheMiss() {\n        const result = actuallyMakeBoardIndicesTable();\n        dbWrite('boardIndicesTable', result);\n        return result;\n    }\n    const result = await dbRead('boardIndicesTable').catch(cacheMiss);\n    if (result === undefined)\n        return cacheMiss();\n    return result;\n}\n\nfunction actuallyMakeBoardIndicesTable() {\n    // This convention here has to match that in the Rust component and table building C++ exactly!\n    const descs = [];\n    for (let y = 0; y < 8; y++)\n        for (let x = 0; x < 8; x++)\n            for (const direction of [false, true])\n                descs.push({x, y, direction});\n    const allBoards = [];\n    const boardIndices = {};\n    function placeSquid(board, desc, length) {\n        for (let i = 0; i < length; i++) {\n            let {x, y} = desc;\n            if (desc.direction)\n                x += i;\n            else\n                y += i;\n            const index = x + 8 * y;\n            if (x >= 8 || y >= 8)\n                return;\n            board[index] = length;\n        }\n    }\n    const board = new Array(64).fill(0);\n\n    for (const squid2 of descs) {\n        for (const squid3 of descs) {\n            for (const squid4 of descs) {\n                board.fill(0);\n                placeSquid(board, squid2, 2);\n                placeSquid(board, squid3, 3);\n                placeSquid(board, squid4, 4);\n                let count = 0;\n                for (const entry of board)\n                    count += entry\n                if (count !== 2*2 + 3*3 + 4*4)\n                    continue;\n                allBoards.push(Array.from(board));\n            }\n        }\n    }\n    let index = 0;\n    for (const board of allBoards) {\n        boardIndices[board.map((i) => i === 0 ? '.' : i).join('')] = index;\n        index++;\n    }\n    return boardIndices;\n}\n\nclass LayoutDrawingBoard extends React.Component {\n    constructor() {\n        super();\n        this.state = { grid: this.makeEmptyGrid(), selectedCell: null };\n    }\n\n    makeEmptyGrid() {\n        const grid = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                grid[[x, y]] = '.';\n        return grid;\n    }\n\n    clearBoard() {\n        this.setState({ grid: this.makeEmptyGrid(), selectedCell: null });\n    }\n\n    onClick(x, y) {\n        if (this.state.selectedCell === null) {\n            this.setState({ selectedCell: [x, y] });\n            return;\n        }\n        const grid = {...this.state.grid};\n        let changeMade = false;\n        for (const length of [2, 3, 4]) {\n            for (const [dx, dy] of [[+1, 0], [0, +1], [-1, 0], [0, -1]]) {\n                if (this.state.selectedCell[0] === x + dx * (length - 1) && this.state.selectedCell[1] === y + dy * (length - 1)) {\n                    // If this squid appears anywhere else, obliterate it.\n                    for (let y = 0; y < 8; y++)\n                        for (let x = 0; x < 8; x++)\n                            if (grid[[x, y]] === '' + length)\n                                grid[[x, y]] = '.';\n                    // Fill in the squid here.\n                    for (let i = 0; i < length; i++)\n                        grid[[x + i * dx, y + i * dy]] = '' + length;\n                    changeMade = true;\n                }\n            }\n        }\n        // If any squid has the wrong count, then totally eliminate it.\n        const countsBySquid = {2: 0, 3: 0, 4: 0, '.': 0};\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                countsBySquid[grid[[x, y]]]++;\n        for (const length of [2, 3, 4])\n            if (countsBySquid[length] !== length)\n                for (let y = 0; y < 8; y++)\n                    for (let x = 0; x < 8; x++)\n                        if (grid[[x, y]] === '' + length)\n                            grid[[x, y]] = '.';\n        if (changeMade)\n            this.setState({ grid });\n        this.setState({ selectedCell: null });\n    }\n\n    getLayoutString() {\n        // Quadratic time, but who cares?\n        let layoutString = '';\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                layoutString += this.state.grid[[x, y]];\n        return layoutString;\n    }\n\n    setStateFromLayoutString(layoutString) {\n        const grid = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                grid[[x, y]] = layoutString[x + 8 * y];\n        this.setState({grid});\n    }\n\n    render() {\n        const layoutString = this.getLayoutString();\n        let boardIndex = this.props.parent.boardIndices[layoutString];\n        if (boardIndex === undefined) {\n            boardIndex = \"waiting...\";\n        }\n        const isSelectedCell = (x, y) => this.state.selectedCell !== null && x === this.state.selectedCell[0] && y === this.state.selectedCell[1];\n\n        return <div className=\"board historyBoard\">\n            {naturalsUpTo(8).map(\n                (y) =>\n                    naturalsUpTo(8).map(\n                        (x) => <Tile\n                            key={x + ',' + y}\n                            x={x} y={y}\n                            onClick={() => this.onClick(x, y)}\n                            text={this.state.grid[[x, y]]}\n                            valid={true}\n                            best={this.state.selectedCell}\n                            opacity={isSelectedCell(x, y) || this.state.grid[[x, y]] !== '.' ? 0.6 : 0.2}\n                            backgroundColor={this.state.grid[[x, y]] === '.' ? undefined : 'green'}\n                        />\n                    )\n            )}\n        </div>;\n    }\n}\n\nvar globalBoardTimer = null;\n\nsetInterval(\n    () => {\n        if (globalBoardTimer !== null)\n            globalBoardTimer.forceUpdate();\n    },\n    69,\n);\n\nfunction renderYesNo(bool) {\n    return bool ?\n        <span className=\"boolText\" style={{ color: 'green' }}>Yes</span> :\n        <span className=\"boolText\" style={{ color: 'red' }}>No</span>;\n}\n\nclass BoardTimer extends React.Component {\n    constructor() {\n        super();\n        globalBoardTimer = this;\n        this.state = {\n            previouslyAccumulatedSeconds: 0.0,\n            timerStartMS: 0.0,\n            timerRunning: false,\n            includesLoadingTheRoom: true,\n            includedRewardsGotten: 0,\n            invalidated: false,\n        };\n    }\n\n    toggleRunning() {\n        const now = performance.now();\n        const elapsed = 1e-3 * (now - this.state.timerStartMS);\n        if (this.state.timerRunning)\n            this.setState({previouslyAccumulatedSeconds: this.state.previouslyAccumulatedSeconds + elapsed});\n        this.setState({timerRunning: !this.state.timerRunning, timerStartMS: now});\n    }\n\n    adjustRewards(delta) {\n        this.setState({includedRewardsGotten: Math.max(0, Math.min(2, this.state.includedRewardsGotten + delta))});\n    }\n\n    toggleInvalidated() {\n        this.setState({invalidated: !this.state.invalidated});\n    }\n\n    resetTimer() {\n        this.setState({\n            previouslyAccumulatedSeconds: 0.0,\n            timerStartMS: performance.now(),\n            timerRunning: false,\n            includesLoadingTheRoom: true,\n            includedRewardsGotten: 0,\n            invalidated: false,\n        });\n        globalMap.setState({\n            timerStepEstimates: [],\n        });\n    }\n\n    getSecondsElapsed() {\n        let total = this.state.previouslyAccumulatedSeconds;\n        if (this.state.timerRunning) {\n            const now = performance.now();\n            total += 1e-3 * (now - this.state.timerStartMS);\n        }\n        return total;\n    }\n\n    guessStepsElapsedFromTime(timeDeltaSeconds) {\n        // I did some linear regressions from real HD Italian runs. I'll put some data up at some point.\n        let prediction = Number(this.props.timedTickIntercept) + Number(this.props.timedTickRate) * timeDeltaSeconds;\n        if (this.state.includesLoadingTheRoom)\n            prediction += -940 + Number(this.props.roomEnteredOffset);\n        prediction += this.state.includedRewardsGotten * 760;\n        return Math.round(prediction);\n    }\n\n    render() {\n        const elapsed = this.getSecondsElapsed();\n        if (this.state.invalidated)\n            return <tr>\n                <td><b>Timer</b></td>\n                <td><b>Invalidated</b></td>\n            </tr>;\n        return <>\n            <tr>\n                <td>Seconds elapsed:</td>\n                <td>{elapsed.toFixed(2)}</td>\n            </tr>\n            <tr>\n                <td>Steps:</td>\n                <td>{this.guessStepsElapsedFromTime(elapsed)}</td>\n            </tr>\n            <tr>\n                <td>Entered room:</td>\n                <td>{renderYesNo(this.state.includesLoadingTheRoom)}</td>\n            </tr>\n            <tr>\n                <td>Rewards gotten:</td>\n                <td>{this.state.includedRewardsGotten}</td>\n            </tr>\n        </>;\n    }\n}\n\nfunction computeL1Distance(p1, p2) {\n    return Math.abs(p1[0] - p2[0]) + Math.abs(p1[1] - p2[1]);\n}\n\nconst defaultConfigurationParams = {\n    firstBoardStepsThousands: 100,\n    firstBoardStepsThousandsStdDev: 150,\n    nextBoardStepsThousands: 9,\n    nextBoardStepsThousandsStdDev: 4,\n    timedBoardStepsThousandsStdDev: 0.5,\n    timedTickIntercept: 550,\n    timedTickRate: 243.3,\n    roomEnteredOffset: -550,\n    usingTimer: true,\n    autoRecomputeMatches: false,\n    showAdvancedSettings: false,\n};\n\nclass MainMap extends React.Component {\n    layoutDrawingBoardRefs = [React.createRef(), React.createRef()];\n    timerRef = React.createRef();\n\n    constructor() {\n        super();\n        this.state = this.makeEmptyState();\n        globalMap = this;\n    }\n\n    componentDidMount() {\n        // As unlikely as it may be, indexedDB could be ready by now.\n        // Therefore, check it in addition to marking it ready.\n        this.setState({ doneInitializing: true }, setLargestLocalTableSize);\n        this.doComputation(this.state.grid, this.state.squidsGotten);\n    }\n\n    makeEmptyGrid() {\n        const grid = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                grid[[x, y]] = null;\n        return grid;\n    }\n\n    makeEmptyState() {\n        const probs = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                probs[[x, y]] = 0.0;\n        const state = {\n            grid: this.makeEmptyGrid(),\n            squidsGotten: 'unknown',\n            undoBuffer: [],\n            probs,\n            best: [3, 4],\n            cursorBelief: [0, 7],\n            valid: true,\n            observationProb: 1.0,\n            lastComputationTime: -1,\n\n            sequenceAware: false,\n            tableSize: '500k',\n            largestLocalTableSize: null,\n            usingTimer: false,\n            showKeyShortcuts: false,\n\n            timerStepEstimates: [],\n\n            potentialMatches: null,\n        };\n        // Load relevant configuration from localStorage.\n        let savedSettings = localStorage.getItem('SKSettings');\n        if (savedSettings === null) {\n            savedSettings = defaultConfigurationParams;\n        } else {\n            // if saved configuration from previous version, use defaults for \n            // any new parameters\n            savedSettings = JSON.parse(savedSettings);\n            for (const name of Object.keys(defaultConfigurationParams)) {\n                if (!(name in savedSettings)){\n                    savedSettings[name] = defaultConfigurationParams[name];\n                }\n            }\n        }\n        const configParams = savedSettings;\n        return {...state, ...configParams};\n    }\n\n    getConfigParams() {\n        const settings = {};\n        for (const name of Object.keys(defaultConfigurationParams))\n            settings[name] = this.state[name];\n        return settings;\n    }\n\n    saveConfigParams() {\n        const configParams = this.getConfigParams();\n        console.log('Saving config params:', configParams);\n        localStorage.setItem('SKSettings', JSON.stringify(configParams));\n    }\n\n    factoryResetConfigParams() {\n        this.setState(defaultConfigurationParams);\n    }\n\n    async loadSequenceTable() {\n        if (this.state.sequenceAware !== false)\n            return;\n        this.setState({sequenceAware: 'initializing'});\n        this.boardIndices = await makeBoardIndicesTable();\n        this.boardIndexToLayoutString = new Array(Object.keys(this.boardIndices).length);\n        for (const key of Object.keys(this.boardIndices))\n            this.boardIndexToLayoutString[this.boardIndices[key]] = key;\n\n        const tableName =  '/board_table_' + this.state.tableSize + '.bin';\n        dbCachedFetch(tableName, (buf) => {\n            // Store the table size in indexedDB so we easily know we have it.\n            dbWrite('largestLocalTableSize', this.state.tableSize);\n            this.boardTable = new Uint32Array(buf);\n            // Warning: Do I need to await wasm here first?\n            console.log('Board table length:', this.boardTable.length);\n            set_board_table(this.boardTable);\n            this.setState({ sequenceAware: true }, () => {\n                this.clearField();\n            });\n        });\n    }\n\n    *findMatchingLocations(observedBoards, startIndex, scanRange) {\n        // Try to find matches for the next board.\n        const soughtBoard = observedBoards[0];\n        const remainingBoards = observedBoards.slice(1);\n        const boardTable = this.boardTable;\n        const indexMax = Math.min(boardTable.length, startIndex + scanRange);\n        for (let i = startIndex; i < indexMax; i++)\n            if (boardTable[i] === soughtBoard)\n                if (remainingBoards.length > 0)\n                    for (const subResult of this.findMatchingLocations(remainingBoards, i, 50000))\n                        yield [i, ...subResult];\n                else\n                    yield [i];\n    }\n\n    recomputePotentialMatches(all_matches) {\n        let scanStart = 0;\n        let scanRange = 1000000000;\n        if (!all_matches) {\n            const nearlyCertainRadius = 5000 * this.state.firstBoardStepsThousandsStdDev;\n            scanStart = 1000 * this.state.firstBoardStepsThousands - nearlyCertainRadius;\n            scanRange = 2 * nearlyCertainRadius;\n            // Due to how indexing arrays works, this check technically isn't\n            // necessary. However, it is a simple optimization for speed.\n            if (scanStart < 0) {\n                scanRange += scanStart;\n                scanStart = 0;\n            }\n        }\n        const observedBoards = this.makeGameHistoryArguments()[0];\n        const matches = [];\n        if (observedBoards.length > 0)\n            for (const match of this.findMatchingLocations(observedBoards, scanStart, scanRange))\n                matches.push(match);\n        this.setState({potentialMatches: matches});\n    }\n\n    makeGameHistoryArguments() {\n        // Figure out how many history boards we have.\n        const rawObservedBoards = this.layoutDrawingBoardRefs\n            .map((ref) => this.boardIndices?.[ref.current?.getLayoutString()]);\n        const observedBoards = [];\n        for (const ob of rawObservedBoards) {\n            if (ob === undefined)\n                break;\n            observedBoards.push(ob);\n        }\n\n        // The optimal thing to do here is to save the sequence of step delta estimates, but to make\n        // the tool less fragile we only use our timer-based estimates for the very final mean.\n\n        const means = [1000.0 * Number(this.state.firstBoardStepsThousands)];\n        const stds = [1000.0 * Number(this.state.firstBoardStepsThousandsStdDev)];\n        for (let i = 0; i < observedBoards.length; i++) {\n            means.push(1000.0 * Number(this.state.nextBoardStepsThousands));\n            stds.push(1000.0 * Number(this.state.nextBoardStepsThousandsStdDev));\n        }\n        const estimates = this.state.timerStepEstimates;\n        const lastEstimate = estimates[estimates.length - 1];\n        if (observedBoards.length > 0 && estimates.length > 0 && lastEstimate !== null) {\n            means[means.length - 1] = Math.max(0, lastEstimate);\n            const timedStd = 1000.0 * Number(this.state.timedBoardStepsThousandsStdDev);\n            // There is more uncertainty in the second board than ones after.\n            stds[stds.length - 1] = observedBoards.length === 1 ? 2.0 * timedStd\n                : 0.5 * timedStd;\n        }\n\n        return [\n            Uint32Array.from(observedBoards),\n            Uint32Array.from(means),\n            Float64Array.from(stds),\n        ];\n    }\n\n    getGridStatistics(grid, squidsGotten) {\n        const hits = [];\n        const misses = [];\n        for (let y = 0; y < 8; y++) {\n            for (let x = 0; x < 8; x++) {\n                const gridValue = grid[[x, y]];\n                if (gridValue === 'HIT')\n                    hits.push(8 * y + x);\n                if (gridValue === 'MISS')\n                    misses.push(8 * y + x);\n            }\n        }\n        let numericSquidsGotten = -1;\n        for (const n of ['0', '1', '2', '3'])\n            if (squidsGotten === n || squidsGotten === Number(n))\n                numericSquidsGotten = Number(n);\n        return {hits, misses, numericSquidsGotten};\n    }\n\n    async doComputation(grid, squidsGotten) {\n        console.log('Doing computation:', squidsGotten, grid);\n        const t0 = performance.now();\n        const {hits, misses, numericSquidsGotten} = this.getGridStatistics(grid, squidsGotten);\n\n        await wasm;\n        let probabilities;\n        let gameHistoryArguments = null;\n        if (this.state.sequenceAware) {\n            gameHistoryArguments = this.makeGameHistoryArguments();\n            console.log('gameHistoryArguments:', gameHistoryArguments);\n\n            probabilities = calculate_probabilities_from_game_history(\n                Uint8Array.from(hits),\n                Uint8Array.from(misses),\n                numericSquidsGotten,\n                ...gameHistoryArguments,\n            );\n        } else {\n            probabilities = calculate_probabilities_without_sequence(\n                Uint8Array.from(hits),\n                Uint8Array.from(misses),\n                numericSquidsGotten,\n            );\n        }\n\n        if (probabilities !== undefined) {\n            let maxY = 0;\n            let maxX = 0;\n            let highestProb = -1;\n            let probs = [];\n\n            // Here we implement our L1 distance bonus heuristic.\n            // The idea is that we want to highlight a square that isn't too far from where\n            // the player last adjusted the board. (i.e. where we believe their cursor is.)\n            for (let y = 0; y < 8; y++) {\n                for (let x = 0; x < 8; x++) {\n                    probs[[x, y]] = probabilities[8 * y + x];\n                    const l1Distance = computeL1Distance(this.state.cursorBelief, [x, y]);\n                    const distancePenaltyMultiplier = 1 - 0.04 * l1Distance;\n                    const distanceAdjustedProb = probabilities[8 * y + x] * distancePenaltyMultiplier;\n                    if (grid[[x, y]] === null && distanceAdjustedProb > highestProb) {\n                        highestProb = distanceAdjustedProb;\n                        maxX = x;\n                        maxY = y;\n                    }\n                }\n            }\n            const observationProb = probabilities[64];\n            this.setState({ probs, best: highestProb > 0 ? [maxX, maxY] : null,\n                valid: true, observationProb });\n        } else {\n            this.setState({ valid: false, best: null });\n        }\n        const t1 = performance.now();\n        this.setState({lastComputationTime: t1 - t0});\n    }\n\n    copyToUndoBuffer() {\n        this.setState({undoBuffer: [\n            ...this.state.undoBuffer,\n            {grid: this.state.grid, squidsGotten: this.state.squidsGotten, cursorBelief: this.state.cursorBelief},\n        ]});\n    }\n\n    onClick(x, y, setAsHit) {\n        const grid = { ...this.state.grid };\n        this.copyToUndoBuffer();\n\n        switch (grid[[x, y]]) {\n            case 'MISS':\n                grid[[x, y]] = 'HIT';\n                break;\n            case 'HIT':\n                grid[[x, y]] = null;\n                break;\n            default:\n                grid[[x, y]] = setAsHit ? 'HIT' : 'MISS';\n                break;\n        }\n        this.setState({grid, cursorBelief: [x, y]});\n        this.doComputation(grid, this.state.squidsGotten);\n    }\n\n    clearField() {\n        const templateState = this.makeEmptyState();\n        const newState = {};\n        for (const name of ['grid', 'squidsGotten', 'undoBuffer', 'cursorBelief'])\n            newState[name] = templateState[name];\n        // The squidsGotten value of 'unknown' is banned in sequence-aware mode.\n        if (this.state.sequenceAware)\n            newState.squidsGotten = '0';\n        this.setState(newState);\n        this.doComputation(newState.grid, newState.squidsGotten);\n    }\n\n    undoLastMarking() {\n        const undoBuffer = [...this.state.undoBuffer];\n        if (undoBuffer.length === 0)\n            return;\n        const undoEntry = undoBuffer.pop();\n        this.setState({grid: undoEntry.grid, squidsGotten: undoEntry.squidsGotten, cursorBelief: undoEntry.cursorBelief, undoBuffer});\n        this.doComputation(undoEntry.grid, undoEntry.squidsGotten);\n    }\n\n    reportMiss() {\n        if (this.state.best !== null && this.state.grid[this.state.best] === null) {\n            this.onClick(...this.state.best);\n        }\n    }\n\n    reportHit() {\n        if (this.state.best !== null && this.state.grid[this.state.best] === null) {\n            this.onClick(...this.state.best, true);\n            const {hits} = this.getGridStatistics(this.state.grid, this.state.squidsGotten);\n            if (hits.length === 9 && this.state.squidsGotten !== 'unknown') {\n                this.incrementKills();\n            }\n        }\n    }\n\n    splitTimer() {\n        const boardTimer = this.timerRef.current;\n        let newEstimates = [...this.state.timerStepEstimates];\n        if (boardTimer !== null) {\n            const elapsed = boardTimer.getSecondsElapsed();\n            if (!elapsed && !boardTimer.state.invalidated) {\n                boardTimer.toggleRunning();\n                return;\n            }\n            const timerStartMS = performance.now();\n            newEstimates.push(boardTimer.state.invalidated ? null\n            : boardTimer.guessStepsElapsedFromTime(elapsed));\n\n            console.log('Timer step estimates:', newEstimates);\n            boardTimer.setState({\n                previouslyAccumulatedSeconds: 0.0,\n                timerStartMS,\n                // After the first split we're no longer loading the room.\n                includesLoadingTheRoom: false,\n                includedRewardsGotten: 0,\n                timerRunning: true,\n                invalidated: false,\n            });\n        }\n        // Automatically copy board to history if it is unambiguous.\n        if (this.copyToHistory()) {\n            const squidsGotten = '0';\n            const grid = this.makeEmptyGrid();\n            // TODO: Allow undoing across completions.\n            this.setState({\n                    timerStepEstimates: newEstimates,\n                    undoBuffer: [],\n                    cursorBelief: [0, 7],\n                    grid,\n                    squidsGotten,\n                }, () => {\n                    // The copy to history should be done by now, even if it\n                    // got batched together with this setState.\n                    this.doComputation(grid, squidsGotten);\n                    if (this.state.autoRecomputeMatches)\n                        this.recomputePotentialMatches(false);\n            });\n        } else {\n            // There are still things to update, even if not finishing a board.\n            this.setState({timerStepEstimates: newEstimates}, () => {\n                this.doComputation(this.state.grid, this.state.squidsGotten);\n                // The tradeoff here is that we can find the matches after the\n                // thrown board, but they are also found when the prediction\n                // board is ambiguous.\n                if (this.state.usingTimer && this.state.autoRecomputeMatches)\n                        this.recomputePotentialMatches(false);\n\n            });\n        }\n    }\n\n    incrementKills() {\n        let numericValue = this.state.squidsGotten === 'unknown' ? 0 : Number(this.state.squidsGotten);\n        if (!this.state.sequenceAware && numericValue === 3)\n            return;\n        this.copyToUndoBuffer();\n        let grid = this.state.grid;\n        if (numericValue < 3)\n            numericValue++;\n        this.setState({grid, squidsGotten: '' + numericValue});\n        this.doComputation(grid, '' + numericValue);\n    }\n\n    copyToHistory(gameHistoryArguments) {\n        if (!this.state.sequenceAware)\n            return;\n        const {hits, misses, numericSquidsGotten} = this.getGridStatistics(this.state.grid, this.state.squidsGotten);\n        if (gameHistoryArguments === undefined)\n            gameHistoryArguments = this.makeGameHistoryArguments();\n        const finalBoard = disambiguate_board(\n            Uint8Array.from(hits),\n            Uint8Array.from(misses),\n            numericSquidsGotten,\n            ...gameHistoryArguments,\n        );\n        if (finalBoard === undefined) {\n            // TODO: Show a proper error message in this case!\n            return false;\n        }\n        console.log('Final board:', finalBoard);\n        const layoutString = this.boardIndexToLayoutString[finalBoard];\n        const observedBoards = gameHistoryArguments[0];\n        let fillIndex = observedBoards.length;\n        // If we're already at capacity then we have to shift the boards over.\n        if (fillIndex === this.layoutDrawingBoardRefs.length) {\n            this.shiftHistory();\n            fillIndex--;\n        }\n        this.layoutDrawingBoardRefs[fillIndex].current.setStateFromLayoutString(layoutString);\n        return true;\n    }\n\n    shiftHistory() {\n        const drawingBoards = this.layoutDrawingBoardRefs.map((ref) => ref.current);\n        for (let i = 0; i < drawingBoards.length -1; i++) {\n            drawingBoards[i].setState(drawingBoards[i + 1].state);\n        }\n        drawingBoards[drawingBoards.length - 1].clearBoard();\n    }\n\n    clearHistory() {\n        for (const ref of this.layoutDrawingBoardRefs) {\n            ref.current.clearBoard();\n        }\n    }\n\n    renderActualMap() {\n        return <div className=\"board\">\n            {naturalsUpTo(8).map(\n                (y) =>\n                    naturalsUpTo(8).map(\n                        (x) => <Tile\n                            key={x + ',' + y}\n                            x={x} y={y}\n                            onClick={() => this.onClick(x, y)}\n                            text={this.state.grid[[x, y]]}\n                            prob={this.state.probs[[x, y]]}\n                            valid={this.state.valid}\n                            best={this.state.best}\n                            precision={2}\n                        />\n                    )\n            )}\n        </div>;\n    }\n\n    render() {\n        let usedShots = 0;\n        let openingOptimizer = true;\n        for (let y = 0; y < 8; y++) {\n            for (let x = 0; x < 8; x++) {\n                if (this.state.grid[[x, y]] !== null) {\n                    usedShots++;\n                    if (this.state.grid[[x, y]] === 'HIT')\n                        openingOptimizer = false;\n                }\n            }\n        }\n\n        let timerStepEstimateText = !this.state.timerStepEstimates.length ? '-'\n            : this.state.timerStepEstimates.map((v) => {\n                return v ?? '(' + this.state.nextBoardStepsThousands * 1000 + ')';\n            }).join(', ');\n\n        const largestLocalTable = Number(this.state.largestLocalTableSize\n            ?.replace(/k/i, '000')?.replace(/M/i, '000000') ?? 0);\n        const wrongTableWarning = \"You have a larger table available locally. \" +\n                                  \"Are you sure you want to switch tables?\";\n\n        return <>\n            <div className=\"container\">\n                <div style={{ placeSelf: \"start end\" }}>\n                    <div id=\"infoArea\">\n                        <table>\n                            <thead><tr><th>Item</th><th>Value</th></tr></thead>\n                            <tbody>\n                                <tr><td>Shots used:</td><td>{usedShots}</td></tr>\n                                {this.state.sequenceAware === true && this.state.usingTimer && <>\n                                    <BoardTimer ref={this.timerRef} roomEnteredOffset={this.state.roomEnteredOffset} timedTickIntercept={this.state.timedTickIntercept} timedTickRate={this.state.timedTickRate}/>\n                                    <tr>\n                                        <td>Previous steps:</td>\n                                        <td>{timerStepEstimateText}</td>\n                                    </tr>\n                                </>}\n                            </tbody>\n                        </table>\n                        {this.state.sequenceAware === true && this.state.usingTimer && this.state.showKeyShortcuts && <table>\n                            <thead><tr><th>Control</th><th>Shortcut</th></tr></thead>\n                            <tbody>\n                                <tr><td>Add Reward</td><td>,</td></tr>\n                                <tr><td>Remove Reward</td><td>Shift+,</td></tr>\n                                <tr><td>Invalidate Timer</td><td>;</td></tr>\n                                <tr><td>Reset Timer</td><td>Shift+;</td></tr>\n                                <tr><td>Pause/Resume Timer</td><td>w</td></tr>\n                                <tr><td>Undo</td><td>Ctrl+z or Shift+z</td></tr>\n                            </tbody>\n                        </table>}\n                    </div>\n                    {this.state.sequenceAware === true &&\n                        this.state.usingTimer &&\n                        <div className=\"controls\">\n                            <button onClick={() => {\n                                this.setState({\n                                    showKeyShortcuts: !this.state.showKeyShortcuts\n                            })}}>\n                                Toggle Show Shortcuts\n                            </button>\n                        </div>}\n                </div>\n                {this.renderActualMap()}\n            </div>\n            {!this.state.valid && !this.state.sequenceAware &&\n                <div>Invalid configuration! This is not possible.</div>}\n            <div className=\"controls\" style={{ marginTop: '5px' }}>\n                Number of squids killed:\n                <select\n                    value={this.state.squidsGotten}\n                    onChange={(event) => {\n                        this.setState({ squidsGotten: event.target.value });\n                        this.doComputation(this.state.grid, event.target.value);\n                    }}\n                >\n                    {/* In sequence-aware mode, don't allow unknown because it's just an accident waiting to happen for a runner. */}\n                    {\n                        !this.state.sequenceAware &&\n                        <option value=\"unknown\">Unknown</option>\n                    }\n                    <option value=\"0\">0</option>\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                </select>\n            </div>\n            <div className=\"controls\">\n                <button onClick={() => { this.reportMiss(); }}>\n                    Miss (z)\n                </button>\n                <button onClick={() => { this.reportHit(); }}>\n                    Hit (x)\n                </button>\n                <button onClick={() => { this.incrementKills(); }}>\n                    Increment Kills (v)\n                </button>\n                {\n                    this.state.sequenceAware === true &&\n                    <>\n                        <button onClick={() => { this.splitTimer(); }}>\n                            {this.state.usingTimer ? <>Start/Split Timer </>\n                                : <>Move to History </>}\n                            (Space)\n                        </button>\n                        <button onClick={() => { this.clearHistory(); }}>\n                            Reset History\n                        </button>\n                    </>\n                }\n                <button onClick={() => { this.clearField(); }}>\n                    Reset Board\n                </button>\n                {\n                    this.state.sequenceAware === true && <button onClick={() => {\n                        this.clearHistory();\n                        // ESLint gives a false positive if this is done with ?.\n                        if (this.timerRef.current !== null) {\n                            this.timerRef.current.resetTimer();\n                        }\n                        this.clearField();\n                        this.setState({ potentialMatches: null });\n                    }}>\n                        Reset Everything\n                    </button>\n                }\n            </div>\n            {openingOptimizer && !this.state.sequenceAware && <p>\n                Opening optimizer: Probability that this<br />pattern would get at least one hit: {\n                    this.state.valid ? toPercent(Math.max(0, 1 - this.state.observationProb), 2)\n                        : \"Invalid\"\n                }\n            </p>}\n            {this.state.sequenceAware === 'initializing' &&\n                <p>Loading table...</p>}\n            {this.state.sequenceAware === true && <>\n                <div>\n                    {this.layoutDrawingBoardRefs.map((ref, i) =>\n                        <LayoutDrawingBoard parent={this} ref={ref} key={i}/>\n                    )}\n                </div>\n                <hr/>\n                <fieldset id=\"settings\"\n                    className={\n                        this.state.showAdvancedSettings || !this.state.usingTimer ? \"\"\n                        : \"simple\"\n                    }\n                >\n                    <legend>\n                        Gaussian RNG step count beliefs (all counts in <i>\n                        thousands</i> of steps{\n                            this.state.usingTimer && this.state.showAdvancedSettings &&\n                            <>, except \"Timed board intercept\", \"Timed board rate\",\n                                and \"Room entered offset\"</>\n                        })\n                    </legend>\n                    <div>\n                        <label htmlFor=\"firstBoardMean\">First board mean:</label>\n                        <input id=\"firstBoardMean\"\n                            value={this.state.firstBoardStepsThousands}\n                            onChange={event => this.setState({\n                                firstBoardStepsThousands: event.target.value\n                        })}/>\n                        <label htmlFor=\"firstBoardStddev\">First board stddev:</label>\n                        <input id=\"firstBoardStddev\"\n                            value={this.state.firstBoardStepsThousandsStdDev}\n                            onChange={event => this.setState({\n                                firstBoardStepsThousandsStdDev: event.target.value\n                        })}/>\n                        {(!this.state.usingTimer || this.state.showAdvancedSettings) && <>\n                            <label htmlFor=\"nextBoardMean\">\n                                {this.state.usingTimer ? <>Fallback mean:</>\n                                    : <>Next board mean:</>}\n                            </label>\n                            <input id=\"nextBoardMean\"\n                                value={this.state.nextBoardStepsThousands}\n                                onChange={event => this.setState({\n                                    nextBoardStepsThousands: event.target.value\n                            })}/>\n                            <label htmlFor=\"nextBoardStddev\">\n                                {this.state.usingTimer ? <>Fallback stddev:</>\n                                    : <>Next board stddev:</>}\n                            </label>\n                            <input id=\"nextBoardStddev\"\n                                value={this.state.nextBoardStepsThousandsStdDev}\n                                onChange={event => this.setState({\n                                    nextBoardStepsThousandsStdDev: event.target.value\n                            })}/>\n                        </>}\n                        {this.state.usingTimer && <>\n                            <label htmlFor=\"timedBoardStddev\">Timed board stddev:</label>\n                            <input id=\"timedBoardStddev\"\n                                value={this.state.timedBoardStepsThousandsStdDev}\n                                onChange={event => this.setState({\n                                    timedBoardStepsThousandsStdDev: event.target.value\n                            })}/>\n                            {this.state.showAdvancedSettings && <>\n                                <label htmlFor=\"timedBoardIntercept\">Timed board intercept:</label>\n                                <input id=\"timedBoardIntercept\"\n                                    value={this.state.timedTickIntercept}\n                                    onChange={event => this.setState({\n                                        timedTickIntercept: event.target.value\n                                })}/>\n                                <label htmlFor=\"timedBoardRate\">Timed board rate:</label>\n                                <input id=\"timedBoardRate\"\n                                    value={this.state.timedTickRate}\n                                    onChange={event => this.setState({\n                                        timedTickRate: event.target.value\n                                })}/>\n                                <label htmlFor=\"roomEnteredOffset\">Room entered offset:</label>\n                                <input id=\"roomEnteredOffset\"\n                                    value={this.state.roomEnteredOffset}\n                                    onChange={event => this.setState({\n                                        roomEnteredOffset: event.target.value\n                                })}/>\n                            </>}\n                        </>}\n                    </div>\n                </fieldset>\n\n                <div className=\"controls\">\n                    <label>\n                        <input type=\"checkbox\"\n                            checked={this.state.usingTimer}\n                            onChange={(event) => this.setState({\n                                usingTimer: !this.state.usingTimer\n                        })} />\n                        Use timer\n                    </label>\n                    <label>\n                        <input type=\"checkbox\"\n                            checked={this.state.autoRecomputeMatches}\n                            onChange={(event) => this.setState({\n                                autoRecomputeMatches: !this.state.autoRecomputeMatches\n                        })} />\n                        Automatically find nearby matches\n                    </label>\n                    <label>\n                        <input type=\"checkbox\"\n                            disabled={!this.state.usingTimer}\n                            checked={this.state.showAdvancedSettings}\n                            onChange={(event) => this.setState({\n                                showAdvancedSettings: !this.state.showAdvancedSettings\n                        })} />\n                        Show advanced settings\n                    </label>\n                </div>\n\n                <div className=\"controls\">\n                    <button onClick={() => { this.saveConfigParams(); }}>\n                        Save Settings\n                    </button>\n                    <button onClick={() => { this.factoryResetConfigParams(); }}>\n                        Reset to Defaults\n                    </button>\n                </div>\n\n                <div style={{\n                    margin: '5px',\n                    border: '2px solid white',\n                    borderRadius: '8px',\n                    width: '400px',\n                    minHeight: '20px',\n                    display: 'inline-block'\n                }}>\n                    {this.state.potentialMatches?.length === 0 ? <div>No Matches Found!</div>\n                        : this.state.potentialMatches?.map((match, i) => {\n                            const diffs = match.slice(1);\n                            return <div key={i}>\n                                Potential match: {match[0]}{diffs.map((x, i) => <> +{x - match[i]}</>)}\n                            </div>;\n                    })}\n                </div>\n                <div className=\"controls\">\n                    <button onClick={() => {\n                        this.recomputePotentialMatches(true);\n                    }}>Find Match Indices</button>\n                </div>\n            </>}\n            {!this.state.sequenceAware && <fieldset id=\"sequenceConfig\" >\n                <legend>Sequence-Aware Mode</legend>\n                <div>\n                    <label>\n                        <input type=\"radio\" name=\"tableSize\" value=\"500k\"\n                            onChange={() => {\n                                if (largestLocalTable <= 500000 ||\n                                    window.confirm(wrongTableWarning))\n                                    this.setState({ tableSize: \"500k\" });\n                            }}\n                            checked={ this.state.tableSize === \"500k\" }\n                        />\n                        Small table (500 thousand values,\n                        {largestLocalTable >= 500000 ? <> local</> : <> 2 MB</>})\n                    </label>\n                </div>\n                <div>\n                    <label>\n                        <input type=\"radio\" name=\"tableSize\" value=\"5M\"\n                            onChange={() => {\n                                if (largestLocalTable <= 5000000 ||\n                                    window.confirm(wrongTableWarning))\n                                    this.setState({ tableSize: \"5M\" });\n                            }}\n                            checked={ this.state.tableSize === \"5M\" }\n                        />\n                        Medium table (5 million values,\n                        {largestLocalTable >= 5000000 ? <> local</> : <> 20 MB</>})\n                    </label>\n                </div>\n                <div>\n                    <label>\n                        <input type=\"radio\" name=\"tableSize\" value=\"25M\"\n                            onChange={() => {\n                                if (largestLocalTable <= 25000000 ||\n                                    window.confirm(wrongTableWarning))\n                                    this.setState({ tableSize: \"25M\" });\n                            }}\n                            checked={ this.state.tableSize === \"25M\" }\n                        />\n                        Large table (25 million values,\n                        {largestLocalTable >= 25000000 ? <> local</> : <> 100 MB</>})\n                    </label>\n                </div>\n                <button onClick={() => { this.loadSequenceTable(); }}>\n                    Initialize\n                </button>\n            </fieldset>}\n\n            <p>\n                Last recompute time:&nbsp;\n                {this.state.lastComputationTime.toFixed(2)}ms\n            </p>\n        </>;\n    }\n}\n\nfunction globalShortcutsHandler(evt) {\n    // OBS doesn't give a code value, but their key value almost works as one.\n    const code = evt.code !== '' ? evt.code : evt.key;\n    if (globalMap !== null) {\n        if (code === 'KeyZ' || code === 'z')\n            if (evt.ctrlKey) {\n                // Prevent modifying an input when undoing.\n                if (evt.target?.tagName !== \"INPUT\") {\n                    evt.preventDefault();\n                    globalMap.undoLastMarking();\n                }\n            }\n            else if (evt.shiftKey)\n                globalMap.undoLastMarking();\n            else\n                globalMap.reportMiss();\n        if (code === 'KeyX' || code === 'x')\n            globalMap.reportHit();\n        if (code === 'KeyV' || code === 'v')\n            globalMap.incrementKills();\n        if (code === 'Space' || code === ' ') {\n            globalMap.splitTimer();\n            evt.preventDefault();\n        }\n    }\n    if (globalBoardTimer !== null) {\n        if (code === 'KeyW' || code === 'w')\n            globalBoardTimer.toggleRunning();\n        if (code === 'Comma' || code === ',')\n            if (!evt.shiftKey)\n                globalBoardTimer.adjustRewards(+1);\n            else\n                globalBoardTimer.adjustRewards(-1);\n        if (code === 'Semicolon' || code === ';')\n            if (!evt.shiftKey)\n                globalBoardTimer.toggleInvalidated();\n            else\n                globalBoardTimer.resetTimer();\n    }\n}\n\ndocument.addEventListener('keydown', globalShortcutsHandler);\n\nclass App extends React.Component {\n    render() {\n        return <>\n            <h1>Sploosh Kaboom Probability Calculator</h1>\n            <p style={{ marginLeft: 'auto', marginRight: 'auto', maxWidth: '600px' }}>\n                This is a tool for computing the likely locations of squids in the sploosh kaboom minigame of The Legend of Zelda: The Wind Waker (both SD and HD versions).\n                Tutorials for it should be available Soon™.\n                For now, see the <a href=\"https://github.com/Amphitryon0/web-sploosh-kaboom\">GitHub repository</a>.\n            </p>\n            <MainMap />\n            <p>\n                Made by Peter Schmidt-Nielsen, CryZe, csunday95, and Amphitryon\n                ({VERSION_STRING})\n            </p>\n        </>;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}