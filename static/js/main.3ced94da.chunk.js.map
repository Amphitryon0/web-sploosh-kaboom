{"version":3,"sources":["wasm/sploosh_wasm.js","App.js","serviceWorker.js","index.js"],"names":["wasm","cachegetUint8Memory0","WASM_VECTOR_LEN","passArray8ToWasm0","arg","malloc","ptr","length","buffer","memory","Uint8Array","set","cachegetUint32Memory0","passArray32ToWasm0","Uint32Array","cachegetFloat64Memory0","getFloat64Memory0","Float64Array","passArrayF64ToWasm0","cachegetInt32Memory0","getInt32Memory0","Int32Array","getArrayF64FromWasm0","len","subarray","calculate_probabilities_without_sequence","hits","misses","squids_gotten","ptr0","__wbindgen_malloc","len0","ptr1","len1","v2","r0","r1","slice","__wbindgen_free","calculate_probabilities_from_game_history","observed_boards","prior_steps_from_previous_means","prior_steps_from_previous_stddevs","ptr2","len2","ptr3","len3","ptr4","len4","v5","disambiguate_final_board","undefined","set_board_table","board_table","load","module","imports","a","Response","WebAssembly","instantiateStreaming","headers","get","console","warn","arrayBuffer","bytes","instantiate","instance","Instance","init","input","Request","URL","fetch","exports","__wbindgen_wasm_module","interpolate","require","globalDB","indexedDBreq","window","indexedDB","open","dbWrite","key","value","transaction","onerror","event","alert","objectStore","add","dbRead","Promise","resolve","reject","request","onsuccess","target","result","errorCode","onupgradeneeded","createObjectStore","colormap","naturalsUpTo","n","Array","keys","Tile","isBest","this","props","best","x","y","backgroundColor","text","prob","className","style","border","valid","outline","zIndex","opacity","onClick","toFixed","precision","React","Component","process","globalMap","dbCachedFetch","url","callback","cacheMiss","req","XMLHttpRequest","responseType","onload","evt","response","send","catch","makeBoardIndicesTable","actuallyMakeBoardIndicesTable","descs","direction","push","allBoards","boardIndices","placeSquid","board","desc","i","fill","squid2","squid3","squid4","count","from","index","map","join","generateRandomChar","base58","array","crypto","getRandomValues","generateRandomToken","SPYWARE_HOST","globalSpyware","globalSpywareCounter","sendSpywareEvent","eventData","state","loggedIn","spywareMode","timestamp","Date","getTime","body","JSON","stringify","username","token","session","events","method","setState","charsSent","ok","errors","SpywareModeConfiguration","localStorage","getItem","setItem","defaultUsername","json","log","success","kind","version","bigTable","fontSize","margin","padding","borderRadius","width","display","fontFamily","marginLeft","onLogout","data-stop-shortcuts","onChange","onLogin","marginTop","trigger","marginRight","href","color","sampleSquid","Math","round","random","cells","cell","newXY","LayoutDrawingBoard","grid","makeEmptyGrid","selectedCell","changeMade","dx","dy","countsBySquid","2","3","4","layoutString","getLayoutString","boardIndex","parent","isSelectedCell","backgroundImage","globalBoardTimer","setInterval","forceUpdate","BoardTimer","previouslyAccumulatedSeconds","timerStartMS","timerRunning","includesLoadingTheRoom","includedRewardsGotten","invalidated","now","performance","elapsed","oldState","delta","max","min","total","timeDeltaSeconds","prediction","Number","timedTickIntercept","timedTickRate","roomEnteredOffset","getSecondsElapsed","guessStepsElapsedFromTime","defaultConfigurationParams","firstBoardStepsThousands","firstBoardStepsThousandsStdDev","nextBoardStepsThousands","nextBoardStepsThousandsStdDev","timedBoardStepsThousandsStdDev","MainMap","layoutDrawingBoardRefs","createRef","timerRef","makeEmptyState","doComputation","squidsGotten","probs","mode","squidLayout","layout","hitLocations","candidate","isAdmissible","generateLayout","undoBuffer","cursorBelief","observationProb","lastComputationTime","turboBlurboMode","turboBlurboTiming","showKeyShortcuts","timerStepEstimate","potentialMatches","savedSettings","parse","Object","name","configParams","settings","getConfigParams","boardIndexToLayoutString","buf","boardTable","v","observedBoards","startIndex","scanRange","soughtBoard","indexMax","findMatchingLocations","subResult","makeGameHistoryArguments","matches","match","rawObservedBoards","ref","current","ob","priorStepsFromPreviousMeans","priorStepsFromPreviousStdDevs","first","gridValue","numericSquidsGotten","t0","getGridStatistics","gameHistoryArguments","probabilities","maxY","maxX","highestProb","p1","p2","l1Distance","abs","distancePenaltyMultiplier","distanceAdjustedProb","t1","oldValid","didWeConcludeTheSituationWasValid","computationTime","setAsHit","copyToUndoBuffer","arr","arrayContains","squid","killed","templateState","newState","undoEntry","pop","oldGrid","incrementKills","boardTimer","numericValue","splitTimer","copyToHistory","newGrid","newNumericValue","finalBoard","fillIndex","shiftHistory","setStateFromLayoutString","drawingBoards","clearBoard","usedShots","openingOptimizer","placeSelf","renderActualMap","reportMiss","reportHit","clearField","type","checked","transform","id","gridColumn","saveConfigParams","factoryResetConfigParams","minHeight","diffs","recomputePotentialMatches","disabled","initializeTurboBlurboMode","document","addEventListener","getAttribute","ctrlKey","tolower","undoLastMarking","code","toggleRunning","preventDefault","shiftKey","adjustRewards","toggleLoadingTheRoom","resetTimer","toggleInvalidated","App","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3ced94da.chunk.js","sourcesContent":["\nlet wasm;\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\n\nfunction passArray32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4);\n    getUint32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetFloat64Memory0 = null;\nfunction getFloat64Memory0() {\n    if (cachegetFloat64Memory0 === null || cachegetFloat64Memory0.buffer !== wasm.memory.buffer) {\n        cachegetFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachegetFloat64Memory0;\n}\n\nfunction passArrayF64ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 8);\n    getFloat64Memory0().set(arg, ptr / 8);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction getArrayF64FromWasm0(ptr, len) {\n    return getFloat64Memory0().subarray(ptr / 8, ptr / 8 + len);\n}\n/**\n* @param {Uint8Array} hits\n* @param {Uint8Array} misses\n* @param {number} squids_gotten\n* @returns {Float64Array | undefined}\n*/\nexport function calculate_probabilities_without_sequence(hits, misses, squids_gotten) {\n    var ptr0 = passArray8ToWasm0(hits, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(misses, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    wasm.calculate_probabilities_without_sequence(8, ptr0, len0, ptr1, len1, squids_gotten);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    let v2;\n    if (r0 !== 0) {\n        v2 = getArrayF64FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 8);\n    }\n    return v2;\n}\n\n/**\n* @param {Uint8Array} hits\n* @param {Uint8Array} misses\n* @param {number} squids_gotten\n* @param {Uint32Array} observed_boards\n* @param {Uint32Array} prior_steps_from_previous_means\n* @param {Float64Array} prior_steps_from_previous_stddevs\n* @returns {Float64Array | undefined}\n*/\nexport function calculate_probabilities_from_game_history(hits, misses, squids_gotten, observed_boards, prior_steps_from_previous_means, prior_steps_from_previous_stddevs) {\n    var ptr0 = passArray8ToWasm0(hits, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(misses, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passArray32ToWasm0(observed_boards, wasm.__wbindgen_malloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passArray32ToWasm0(prior_steps_from_previous_means, wasm.__wbindgen_malloc);\n    var len3 = WASM_VECTOR_LEN;\n    var ptr4 = passArrayF64ToWasm0(prior_steps_from_previous_stddevs, wasm.__wbindgen_malloc);\n    var len4 = WASM_VECTOR_LEN;\n    wasm.calculate_probabilities_from_game_history(8, ptr0, len0, ptr1, len1, squids_gotten, ptr2, len2, ptr3, len3, ptr4, len4);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    let v5;\n    if (r0 !== 0) {\n        v5 = getArrayF64FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 8);\n    }\n    return v5;\n}\n\n/**\n* @param {Uint8Array} hits\n* @param {Uint32Array} observed_boards\n* @param {Uint32Array} prior_steps_from_previous_means\n* @param {Float64Array} prior_steps_from_previous_stddevs\n* @returns {number | undefined}\n*/\nexport function disambiguate_final_board(hits, observed_boards, prior_steps_from_previous_means, prior_steps_from_previous_stddevs) {\n    var ptr0 = passArray8ToWasm0(hits, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray32ToWasm0(observed_boards, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passArray32ToWasm0(prior_steps_from_previous_means, wasm.__wbindgen_malloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passArrayF64ToWasm0(prior_steps_from_previous_stddevs, wasm.__wbindgen_malloc);\n    var len3 = WASM_VECTOR_LEN;\n    wasm.disambiguate_final_board(8, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    return r0 === 0 ? undefined : r1 >>> 0;\n}\n\n/**\n* @param {Uint32Array} board_table\n*/\nexport function set_board_table(board_table) {\n    var ptr0 = passArray32ToWasm0(board_table, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.set_board_table(ptr0, len0);\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') !== 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nasync function init(input) {\n    //if (typeof input === 'undefined') {\n    //    input = import.meta.url.replace(/\\.js$/, '_bg.wasm');\n    //}\n    const imports = {};\n\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    const { instance, module } = await load(await input, imports);\n\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n\n    return wasm;\n}\n\nexport default init;\n\n","import React from 'react';\nimport './App.css';\nimport Collapsible from 'react-collapsible';\nimport init, {\n    set_board_table,\n    calculate_probabilities_without_sequence,\n    calculate_probabilities_from_game_history,\n    disambiguate_final_board,\n} from './wasm/sploosh_wasm.js';\nconst interpolate = require('color-interpolate');\n\nconst VERSION_STRING = 'v0.0.22';\n\nvar globalDB = null;\nconst indexedDBreq = window.indexedDB.open('splooshkaboom', 1);\nindexedDBreq.onerror = function(event) {\n    alert('Failed to access IndexedDB.');\n};\n// Known issue: There's basically a race condition here in that I don't\n// wait for this onsuccess to potentially start calling dbRead.\nindexedDBreq.onsuccess = function(event) {\n    globalDB = event.target.result;\n    globalDB.onerror = function(event) {\n        alert('IndexedDB error: ' + event.target.errorCode);\n    };\n};\nindexedDBreq.onupgradeneeded = function(event) {\n    const db = event.target.result;\n    db.createObjectStore('sk');\n}\n\n// TODO: Am I using IndexedDB even remotely correctly!? This looks so weird...\n// Do I not have to somehow end or commit the transactions!?\n\nfunction dbWrite(key, value) {\n    if (globalDB === null)\n        return;\n\n    const transaction = globalDB.transaction(['sk'], 'readwrite');\n\n    transaction.onerror = function(event) {\n        alert('Transaction error!');\n    }\n    transaction.objectStore('sk').add(value, key);\n}\n\nfunction dbRead(key) {\n    return new Promise((resolve, reject) => {\n        const transaction = globalDB.transaction(['sk']);\n\n        transaction.onerror = function(event) {\n            alert('Transaction error!');\n        }\n        const objectStore = transaction.objectStore('sk');\n        const request = objectStore.get(key);\n        request.onsuccess = function(event) {\n            resolve(event.target.result);\n        };\n        request.onerror = function(event) {\n            reject();\n        };\n    });\n}\n\n// .        . . . .\n// 0123456789abcdef\nconst colormap = interpolate(['#004', '#070', '#090', '#0b0', '#0d0', '#0f0', '#6f6']);\nconst naturalsUpTo = (n) => [...Array(n).keys()];\n\nclass Tile extends React.Component {\n    render() {\n        const isBest = this.props.best !== null && this.props.best[0] === this.props.x && this.props.best[1] === this.props.y;\n\n        let backgroundColor = this.props.backgroundColor;\n        if (backgroundColor === undefined) {\n            backgroundColor = this.props.text === null ? colormap(this.props.prob) : (\n                this.props.text === 'HIT' ? '#a2a' : '#44a'\n            );\n        }\n\n        return <div className=\"boardTile\"\n            key={this.props.x + ',' + this.props.y}\n            style={{\n                border: this.props.valid ? '1px solid grey' : '1px solid red',\n                outline: isBest ? '4px solid yellow' : '',\n                zIndex: isBest ? 1 : 0,\n                opacity: this.props.opacity,\n                backgroundColor,\n            }}\n            onClick={this.props.onClick}\n        >\n            {this.props.text === null ? (this.props.prob * 100).toFixed(this.props.precision) + '%' : this.props.text}\n        </div>;\n    }\n}\n\nlet wasm = init(process.env.PUBLIC_URL + \"/sploosh_wasm_bg.wasm\");\n\n// Super ugly, please forgive me. :(\nvar globalMap = null;\n\nasync function dbCachedFetch(url, callback) {\n    function cacheMiss() {\n        const req = new XMLHttpRequest();\n        req.open('GET', process.env.PUBLIC_URL + url, true);\n        req.responseType = 'arraybuffer';\n        req.onload = (evt) => {\n            dbWrite(url, req.response);\n            callback(req.response);\n        };\n        req.send();\n        return null;\n    }\n    const result = await dbRead(url).catch(cacheMiss);\n    if (result === undefined) {\n        cacheMiss();\n        return;\n    }\n    // This is sort of an ugly protocol, but if we hit the catch path above\n    // we signal that the callback was already called by returning null.\n    if (result === null)\n        return;\n    callback(result);\n}\n\nasync function makeBoardIndicesTable() {\n    function cacheMiss() {\n        const result = actuallyMakeBoardIndicesTable();\n        dbWrite('boardIndicesTable', result);\n        return result;\n    }\n    const result = await dbRead('boardIndicesTable').catch(cacheMiss);\n    if (result === undefined)\n        return cacheMiss();\n    return result;\n}\n\nfunction actuallyMakeBoardIndicesTable() {\n    // This convention here has to match that in the Rust component and table building C++ exactly!\n    const descs = [];\n    for (let y = 0; y < 8; y++)\n        for (let x = 0; x < 8; x++)\n            for (const direction of [false, true])\n                descs.push({x, y, direction});\n    const allBoards = [];\n    const boardIndices = {};\n    function placeSquid(board, desc, length) {\n        for (let i = 0; i < length; i++) {\n            let {x, y} = desc;\n            if (desc.direction)\n                x += i;\n            else\n                y += i;\n            const index = x + 8 * y;\n            if (x >= 8 || y >= 8)\n                return;\n            board[index] = length;\n        }\n    }\n    const board = new Array(64).fill(0);\n\n    for (const squid2 of descs) {\n        for (const squid3 of descs) {\n            for (const squid4 of descs) {\n                board.fill(0);\n                placeSquid(board, squid2, 2);\n                placeSquid(board, squid3, 3);\n                placeSquid(board, squid4, 4);\n                let count = 0;\n                for (const entry of board)\n                    count += entry\n                if (count !== 2*2 + 3*3 + 4*4)\n                    continue;\n                allBoards.push(Array.from(board));\n            }\n        }\n    }\n    let index = 0;\n    for (const board of allBoards) {\n        boardIndices[board.map((i) => i === 0 ? '.' : i).join('')] = index;\n        index++;\n    }\n    return boardIndices;\n}\n\nfunction generateRandomChar() {\n    const base58 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n    const array = new Uint8Array(1);\n    while (true) {\n        crypto.getRandomValues(array);\n        const index = array[0] & 63;\n        if (index < base58.length)\n            return base58[index];\n    }\n}\n\nfunction generateRandomToken(n) {\n    let result = '';\n    for (let i = 0; i < n; i++)\n        result += generateRandomChar();\n    return result;\n}\n\n// Ugh, maybe later I'll give it a proper domain, and move over to https.\nconst SPYWARE_HOST = 'http://skphonehome.peter.website:1234';\n\nvar globalSpyware = null;\nvar globalSpywareCounter = -1;\n\n// To anyone reading this:\n// I chose the name \"spyware\" to be silly — this is a completely optional opt-in feature to send usage data for analysis.\n// You have to actually explicitly enable the spyware with a checkbox in the GUI, and there's an explanation.\nasync function sendSpywareEvent(eventData) {\n    if (globalSpyware === null || globalMap === null)\n        return;\n    if (!globalSpyware.state.loggedIn)\n        return;\n    if (!globalMap.state.spywareMode)\n        return;\n    eventData.timestamp = (new Date()).getTime() / 1000;\n    globalSpywareCounter++;\n    const body = JSON.stringify({\n        username: globalSpyware.state.username,\n        token: globalSpyware.state.token,\n        session: globalSpyware.session,\n        events: {\n            [globalSpywareCounter]: eventData,\n        },\n    });\n    const response = await fetch(SPYWARE_HOST + '/write', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body,\n    });\n    globalSpyware.setState({charsSent: globalSpyware.state.charsSent + body.length});\n    if (!response.ok)\n        globalSpyware.setState({errors: true});\n}\n\nclass SpywareModeConfiguration extends React.Component {\n    constructor() {\n        super();\n        globalSpyware = this;\n        this.session = generateRandomToken(16);\n        let token = localStorage.getItem('SKToken');\n        if (token === null) {\n            token = generateRandomToken(8);\n            localStorage.setItem('SKToken', token);\n        }\n        let defaultUsername = localStorage.getItem('SKUsername');\n        this.state = {\n            username: defaultUsername === null ? '' : defaultUsername,\n            token,\n            loggedIn: false,\n            errors: false,\n            charsSent: false,\n        };\n    }\n\n    async onLogin() {\n        const username = this.state.username;\n        if (username === '') {\n            alert('Username must be non-empty');\n            return;\n        }\n        const response = await fetch(SPYWARE_HOST + '/login', {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n                'username': username,\n                'token': this.state.token,\n            }),\n        });\n        const result = await response.json();\n        console.log('Login:', result);\n        if (result.success) {\n            // Stash the username when we successfully log in, as a convenience for the user.\n            localStorage.setItem('SKUsername', username);\n            this.setState({loggedIn: true}, () => {\n                sendSpywareEvent({\n                    kind: 'login',\n                    version: VERSION_STRING,\n                    bigTable: globalMap === null ? null : globalMap.bigTable,\n                });\n            });\n        } else {\n            alert('Bad token! This username might already be taken. If you need to recover your login token contact Peter Schmidt-Nielsen.');\n        }\n    }\n\n    async onLogout() {\n        this.setState({loggedIn: false});\n    }\n\n    render() {\n        return <div style={{\n            fontSize: '120%',\n            margin: '10px',\n            padding: '10px',\n            border: '2px solid white',\n            borderRadius: '8px',\n            width: '450px',\n            display: 'inline-block',\n            backgroundColor: this.state.loggedIn ? '#696' : '#777',\n        }}>\n            <span style={{fontSize: '120%'}}>Spyware Mode:</span>\n            <br/>\n            {\n                this.state.loggedIn ?\n                    <>\n                        Logged in as: <span style={{fontFamily: 'monospace', fontSize: '150%'}}>{this.state.username}</span>\n                        <button style={{marginLeft: '20px'}} onClick={() => this.onLogout()}>Logout</button>\n                        <br/>\n                        Events sent: {globalSpywareCounter + 1} &nbsp;&nbsp;&nbsp; Chars sent: {this.state.charsSent}\n                    </> : <>\n                        Username: <input data-stop-shortcuts style={{width: '100px', fontFamily: 'monospace'}} value={this.state.username} onChange={event => this.setState({username: event.target.value})}/>\n                        <button style={{marginLeft: '20px'}} onClick={() => this.onLogin()}>Login</button>\n                    </>\n            }\n            <br/>\n            <div style={{marginTop: '20px'}}>\n                <Collapsible trigger={\n                    <div className=\"clickable\">\n                        Access Token\n                    </div>\n                }>\n                    Token: <input data-stop-shortcuts style={{width: '120px', marginRight: '20px'}} value={this.state.token} onChange={event => this.setState({token: event.target.value})}/>\n                    <button onClick={() => { localStorage.setItem('SKToken', this.state.token); }}>Update Saved Token</button>\n                    <p>\n                        The above token is generated just for you.\n                        Anyone who has the above token can submit data that will appear on the stats page for your username (so I recommend not showing it on stream).\n                        If you lose access to it you'll have to pick a new username, or ask <a href=\"mailto:schmidtnielsenpeter@gmail.com\">Peter Schmidt-Nielsen</a> to help you recover your access token.\n                        The token is automatically saved between sessions, but might be lost if you clear all your browser history.\n                        I recommend copying this token down somewhere.\n                    </p>\n                </Collapsible>\n            </div>\n            {this.state.errors && <span style={{fontSize: '120%', color: 'red'}}>Spyware reporting error!</span>}\n        </div>;\n    }\n}\n\nfunction sampleSquid(length) {\n    const x = Math.round(Math.random() * 8);\n    const y = Math.round(Math.random() * 8);\n    const direction = Math.random() < 0.5;\n    const cells = [[x, y]];\n    for (let i = 0; i < length - 1; i++) {\n        const cell = cells[cells.length - 1];\n        const newXY = direction ? [cell[0] + 1, cell[1]] : [cell[0], cell[1] + 1];\n        cells.push(newXY);\n    }\n    return cells;\n}\n\nfunction generateLayout() {\n    const layout = {};\n    const hitLocations = {};\n    for (const n of [2, 3, 4]) {\n        while (true) {\n            const candidate = sampleSquid(n);\n            let isAdmissible = true;\n            for (const cell of candidate)\n                if (cell[0] > 7 || cell[1] > 7 || hitLocations[cell] === true)\n                    isAdmissible = false;\n            if (isAdmissible) {\n                layout['squid' + n] = candidate;\n                for (const cell of candidate)\n                    hitLocations[cell] = true;\n                break;\n            }\n        }\n    }\n    return layout;\n}\n\nclass LayoutDrawingBoard extends React.Component {\n    constructor() {\n        super();\n        this.state = { grid: this.makeEmptyGrid(), selectedCell: null };\n    }\n\n    makeEmptyGrid() {\n        const grid = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                grid[[x, y]] = '.';\n        return grid;\n    }\n\n    clearBoard() {\n        this.setState({ grid: this.makeEmptyGrid(), selectedCell: null });\n    }\n\n    onClick(x, y) {\n        if (this.state.selectedCell === null) {\n            this.setState({ selectedCell: [x, y] });\n            return;\n        }\n        const grid = {...this.state.grid};\n        let changeMade = false;\n        for (const length of [2, 3, 4]) {\n            for (const [dx, dy] of [[+1, 0], [0, +1], [-1, 0], [0, -1]]) {\n                if (this.state.selectedCell[0] === x + dx * (length - 1) && this.state.selectedCell[1] === y + dy * (length - 1)) {\n                    // If this squid appears anywhere else, obliterate it.\n                    for (let y = 0; y < 8; y++)\n                        for (let x = 0; x < 8; x++)\n                            if (grid[[x, y]] === '' + length)\n                                grid[[x, y]] = '.';\n                    // Fill in the squid here.\n                    for (let i = 0; i < length; i++)\n                        grid[[x + i * dx, y + i * dy]] = '' + length;\n                    changeMade = true;\n                }\n            }\n        }\n        // If any squid has the wrong count, then totally eliminate it.\n        const countsBySquid = {2: 0, 3: 0, 4: 0, '.': 0};\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                countsBySquid[grid[[x, y]]]++;\n        for (const length of [2, 3, 4])\n            if (countsBySquid[length] !== length)\n                for (let y = 0; y < 8; y++)\n                    for (let x = 0; x < 8; x++)\n                        if (grid[[x, y]] === '' + length)\n                            grid[[x, y]] = '.';\n        if (changeMade)\n            this.setState({ grid });\n        this.setState({ selectedCell: null });\n    }\n\n    getLayoutString() {\n        // Quadratic time, but who cares?\n        let layoutString = '';\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                layoutString += this.state.grid[[x, y]];\n        return layoutString;\n    }\n\n    setStateFromLayoutString(layoutString) {\n        const grid = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                grid[[x, y]] = layoutString[x + 8 * y];\n        this.setState({grid});\n    }\n\n    render() {\n        const layoutString = this.getLayoutString();\n        let boardIndex = this.props.parent.boardIndices[layoutString];\n        if (boardIndex === undefined) {\n            boardIndex = \"waiting...\";\n        }\n        const isSelectedCell = (x, y) => this.state.selectedCell !== null && x === this.state.selectedCell[0] && y === this.state.selectedCell[1];\n\n        return <div className=\"historyBoardBox\">\n            <div className=\"board historyBoard\" style={{\n                backgroundImage: 'url(\"' + process.env.PUBLIC_URL + '/board_background_square.png\")',\n            }}>\n                {naturalsUpTo(8).map(\n                    (y) =>\n                        naturalsUpTo(8).map(\n                            (x) => <Tile\n                                key={x + ',' + y}\n                                x={x} y={y}\n                                onClick={() => this.onClick(x, y)}\n                                text={this.state.grid[[x, y]]}\n                                valid={true}\n                                best={this.state.selectedCell}\n                                opacity={isSelectedCell(x, y) || this.state.grid[[x, y]] !== '.' ? 0.6 : 0.2}\n                                backgroundColor={this.state.grid[[x, y]] === '.' ? undefined : 'green'}\n                            />\n                        )\n                )}\n            </div><br/>\n            Squid Layout: {boardIndex}\n        </div>;\n    }\n}\n\nvar globalBoardTimer = null;\n\nsetInterval(\n    () => {\n        if (globalBoardTimer !== null)\n            globalBoardTimer.forceUpdate();\n    },\n    69,\n);\n\nfunction renderYesNo(bool) {\n    return bool ?\n        <span className=\"boolText\" style={{ color: 'green' }}>YES</span> :\n        <span className=\"boolText\" style={{ color: 'red' }}>NO</span>;\n}\n\nclass BoardTimer extends React.Component {\n    constructor() {\n        super();\n        globalBoardTimer = this;\n        this.state = {\n            previouslyAccumulatedSeconds: 0.0,\n            timerStartMS: 0.0,\n            timerRunning: false,\n            includesLoadingTheRoom: true,\n            includedRewardsGotten: 0,\n            invalidated: false,\n        };\n    }\n\n    toggleRunning() {\n        const now = performance.now();\n        const elapsed = 1e-3 * (now - this.state.timerStartMS);\n        sendSpywareEvent({kind: 'timer_toggleRunning', elapsed, oldState: this.state});\n        if (this.state.timerRunning)\n            this.setState({previouslyAccumulatedSeconds: this.state.previouslyAccumulatedSeconds + elapsed});\n        this.setState({timerRunning: !this.state.timerRunning, timerStartMS: now});\n    }\n\n    adjustRewards(delta) {\n        sendSpywareEvent({kind: 'timer_adjustRewards', delta, oldState: this.state});\n        this.setState({includedRewardsGotten: Math.max(0, Math.min(2, this.state.includedRewardsGotten + delta))});\n    }\n\n    toggleLoadingTheRoom() {\n        sendSpywareEvent({kind: 'timer_toggleLoadingTheRoom', oldState: this.state});\n        this.setState({includesLoadingTheRoom: !this.state.includesLoadingTheRoom});\n    }\n\n    toggleInvalidated() {\n        sendSpywareEvent({kind: 'timer_toggleInvalidated', oldState: this.state});\n        this.setState({invalidated: !this.state.invalidated});\n    }\n\n    resetTimer() {\n        sendSpywareEvent({kind: 'timer_resetTimer', oldState: this.state});\n        this.setState({\n            previouslyAccumulatedSeconds: 0.0,\n            timerStartMS: performance.now(),\n            timerRunning: false,\n        });\n    }\n\n    getSecondsElapsed() {\n        let total = this.state.previouslyAccumulatedSeconds;\n        if (this.state.timerRunning) {\n            const now = performance.now();\n            total += 1e-3 * (now - this.state.timerStartMS);\n        }\n        return total;\n    }\n\n    guessStepsElapsedFromTime(timeDeltaSeconds) {\n        // I did some linear regressions from real HD Italian runs. I'll put some data up at some point.\n        let prediction = Number(this.props.timedTickIntercept) + Number(this.props.timedTickRate) * timeDeltaSeconds;\n        if (this.state.includesLoadingTheRoom)\n            prediction += -940 + Number(this.props.roomEnteredOffset);\n        prediction += this.state.includedRewardsGotten * 760;\n        return Math.round(prediction);\n    }\n\n    render() {\n        const elapsed = this.getSecondsElapsed();\n        if (this.state.invalidated)\n            return <>\n                <span><b>TIMER</b></span>\n                <span><b>INVALIDATED</b></span>\n            </>;\n        return <>\n            <span>&nbsp;Seconds elapsed: </span>\n            <span>&nbsp;{elapsed.toFixed(2)}&nbsp;</span>\n            <span>&nbsp;Steps:&nbsp;</span>\n            <span>&nbsp;{this.guessStepsElapsedFromTime(elapsed)}&nbsp;</span>\n            <span>&nbsp;Entered room:</span>\n            <span>&nbsp;{renderYesNo(this.state.includesLoadingTheRoom)}&nbsp;</span>\n            <span>&nbsp;Rewards gotten:&nbsp;</span>\n            <span>&nbsp;{this.state.includedRewardsGotten}&nbsp;</span>\n        </>;\n    }\n}\n\nfunction computeL1Distance(p1, p2) {\n    return Math.abs(p1[0] - p2[0]) + Math.abs(p1[1] - p2[1]);\n}\n\nconst defaultConfigurationParams = {\n    firstBoardStepsThousands: 500,\n    firstBoardStepsThousandsStdDev: 500,\n    nextBoardStepsThousands: 7,\n    nextBoardStepsThousandsStdDev: 3,\n    timedBoardStepsThousandsStdDev: 0.2,\n    timedTickIntercept: 156,\n    timedTickRate: 252,\n    roomEnteredOffset: 0,\n};\n\nclass MainMap extends React.Component {\n    layoutDrawingBoardRefs = [React.createRef(), React.createRef(), React.createRef()];\n    timerRef = React.createRef();\n\n    constructor() {\n        super();\n        this.state = this.makeEmptyState();\n        globalMap = this;\n    }\n\n    componentDidMount() {\n        this.doComputation(this.state.grid, this.state.squidsGotten);\n    }\n\n    makeEmptyGrid() {\n        const grid = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                grid[[x, y]] = null;\n        return grid;\n    }\n\n    makeEmptyState() {\n        const probs = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                probs[[x, y]] = 0.0;\n        // Select a particular layout, for practice mode.\n        const squidLayout = generateLayout();\n        const state = {\n            mode: 'calculator',\n            squidLayout,\n            grid: this.makeEmptyGrid(),\n            squidsGotten: 'unknown',\n            undoBuffer: [],\n            probs,\n            best: [3, 3],\n            cursorBelief: [3, 3],\n            valid: true,\n            observationProb: 1.0,\n            lastComputationTime: -1,\n\n            turboBlurboMode: false,\n            turboBlurboTiming: false,\n            showKeyShortcuts: false,\n            spywareMode: false,\n\n            timerStepEstimate: null,\n\n            potentialMatches: [],\n        };\n        // Load relevant configuration from localStorage.\n        let savedSettings = localStorage.getItem('SKSettings');\n        if (savedSettings === null) {\n            savedSettings = defaultConfigurationParams;\n        } else {\n            // if saved configuration from previous version, use defaults for \n            // any new parameters\n            savedSettings = JSON.parse(savedSettings);\n            for (const name of Object.keys(defaultConfigurationParams)) {\n                if (!(name in savedSettings)){\n                    savedSettings[name] = defaultConfigurationParams[name];\n                }\n            }\n        }\n        const configParams = savedSettings;\n        return {...state, ...configParams};\n    }\n\n    getConfigParams() {\n        const settings = {};\n        for (const name of Object.keys(defaultConfigurationParams))\n            settings[name] = Number(this.state[name]);\n        return settings;\n    }\n\n    saveConfigParams() {\n        const configParams = this.getConfigParams();\n        console.log('Saving config params:', configParams);\n        localStorage.setItem('SKSettings', JSON.stringify(configParams));\n    }\n\n    factoryResetConfigParams() {\n        this.setState(defaultConfigurationParams);\n    }\n\n    async initializeTurboBlurboMode(bigTable) {\n        if (this.state.turboBlurboMode !== false)\n            return;\n        this.bigTable = bigTable;\n        this.setState({turboBlurboMode: 'initializing'});\n        this.boardIndices = await makeBoardIndicesTable();\n        this.boardIndexToLayoutString = new Array(Object.keys(this.boardIndices).length);\n        for (const key of Object.keys(this.boardIndices))\n            this.boardIndexToLayoutString[this.boardIndices[key]] = key;\n\n        const tableName = bigTable ? '/board_table_25M.bin' : '/board_table_5M.bin';\n        dbCachedFetch(tableName, (buf) => {\n            this.boardTable = new Uint32Array(buf);\n            // Warning: Do I need to await wasm here first?\n            console.log('Board table length:', this.boardTable.length);\n            // Make sure every value is in range.\n            for (const v of this.boardTable)\n                if (v > 604583)\n                    alert('BUG BUG BUG: Bad value in board table: ' + v);\n            set_board_table(this.boardTable);\n            this.setState({turboBlurboMode: true, squidsGotten: '0', mode: 'calculator'});\n        });\n    }\n\n    *findMatchingLocations(observedBoards, startIndex, scanRange) {\n        if (observedBoards.length === 0) {\n            yield [];\n            return;\n        }\n        // Try to find the first match.\n        const soughtBoard = observedBoards[0];\n        const boardTable = this.boardTable;\n        const indexMax = Math.min(boardTable.length, startIndex + scanRange);\n        for (let i = startIndex; i < indexMax; i++)\n            if (boardTable[i] === soughtBoard)\n                for (const subResult of this.findMatchingLocations(observedBoards.slice(1), i, 50000))\n                    yield [i, ...subResult];\n    }\n\n    recomputePotentialMatches() {\n        const observedBoards = this.makeGameHistoryArguments()[0];\n        const matches = [];\n        for (const match of this.findMatchingLocations(observedBoards, 0, 1000000000))\n            matches.push(match);\n        sendSpywareEvent({kind: 'recomputePotentialMatches', matches});\n        if (matches[0].length === 0) {\n            matches.length = 0;\n            matches.push([null, null]);\n        }\n        this.setState({potentialMatches: matches});\n    }\n\n    makeGameHistoryArguments() {\n        // Figure out how many history boards we have.\n        const rawObservedBoards = this.layoutDrawingBoardRefs\n            .map((ref) => this.boardIndices[ref.current.getLayoutString()]);\n        const observedBoards = [];\n        for (const ob of rawObservedBoards) {\n            if (ob === undefined)\n                break;\n            observedBoards.push(ob);\n        }\n\n        // The optimal thing to do here is to save the sequence of step delta estimates, but to make\n        // the tool less fragile we only use our timer-based estimates for the very final mean.\n\n        const priorStepsFromPreviousMeans = [];\n        const priorStepsFromPreviousStdDevs = [];\n        let first = true;\n        for (const index of [...observedBoards, null]) {\n            if (index === undefined)\n                break;\n            if (first) {\n                priorStepsFromPreviousMeans.push(1000.0 * Number(this.state.firstBoardStepsThousands));\n                priorStepsFromPreviousStdDevs.push(1000.0 * Number(this.state.firstBoardStepsThousandsStdDev));\n            } else {\n                // If we're the last delta, and also not the first, then possibly use our time delta.\n                if (index === null && this.state.timerStepEstimate !== null && this.state.turboBlurboTiming) {\n                    // Because the timerStepEstimate can be negative I have to avoid underflow.\n                    priorStepsFromPreviousMeans.push(Math.max(0, this.state.timerStepEstimate));\n                    priorStepsFromPreviousStdDevs.push(1000.0 * Number(this.state.timedBoardStepsThousandsStdDev));\n                } else {\n                    priorStepsFromPreviousMeans.push(1000.0 * Number(this.state.nextBoardStepsThousands));\n                    priorStepsFromPreviousStdDevs.push(1000.0 * Number(this.state.nextBoardStepsThousandsStdDev));\n                }\n            }\n            first = false;\n        }\n        return [\n            Uint32Array.from(observedBoards),\n            Uint32Array.from(priorStepsFromPreviousMeans),\n            Float64Array.from(priorStepsFromPreviousStdDevs),\n        ];\n    }\n\n    getGridStatistics(grid, squidsGotten) {\n        const hits = [];\n        const misses = [];\n        for (let y = 0; y < 8; y++) {\n            for (let x = 0; x < 8; x++) {\n                const gridValue = grid[[x, y]];\n                if (gridValue === 'HIT')\n                    hits.push(8 * y + x);\n                if (gridValue === 'MISS')\n                    misses.push(8 * y + x);\n            }\n        }\n        let numericSquidsGotten = -1;\n        for (const n of ['0', '1', '2', '3'])\n            if (squidsGotten === n || squidsGotten === Number(n))\n                numericSquidsGotten = Number(n);\n        return {hits, misses, numericSquidsGotten};\n    }\n\n    async doComputation(grid, squidsGotten) {\n        console.log('Doing computation:', squidsGotten, grid);\n        const t0 = performance.now();\n        const {hits, misses, numericSquidsGotten} = this.getGridStatistics(grid, squidsGotten);\n\n        await wasm;\n        let probabilities;\n        let gameHistoryArguments = null;\n        if (this.state.turboBlurboMode) {\n            gameHistoryArguments = this.makeGameHistoryArguments();\n            console.log('gameHistoryArguments:', gameHistoryArguments);\n\n            probabilities = calculate_probabilities_from_game_history(\n                Uint8Array.from(hits),\n                Uint8Array.from(misses),\n                numericSquidsGotten,\n                ...gameHistoryArguments,\n            );\n        } else {\n            probabilities = calculate_probabilities_without_sequence(\n                Uint8Array.from(hits),\n                Uint8Array.from(misses),\n                numericSquidsGotten,\n            );\n        }\n\n        let valid = true;\n        if (probabilities !== undefined) {\n            let maxY = 0;\n            let maxX = 0;\n            let highestProb = -1;\n            let probs = [];\n\n            // Here we implement our L1 distance bonus heuristic.\n            // The idea is that we want to highlight a square that isn't too far from where\n            // the player last adjusted the board. (i.e. where we believe their cursor is.)\n            for (let y = 0; y < 8; y++) {\n                for (let x = 0; x < 8; x++) {\n                    probs[[x, y]] = probabilities[8 * y + x];\n                    const l1Distance = computeL1Distance(this.state.cursorBelief, [x, y]);\n                    const distancePenaltyMultiplier = 1 - 0.03 * l1Distance;\n                    const distanceAdjustedProb = probabilities[8 * y + x] * distancePenaltyMultiplier;\n                    if (grid[[x, y]] === null && distanceAdjustedProb > highestProb) {\n                        highestProb = distanceAdjustedProb;\n                        maxX = x;\n                        maxY = y;\n                    }\n                }\n            }\n            const observationProb = probabilities[64];\n            this.setState({ probs, best: highestProb >= 0 ? [maxX, maxY] : null, valid, observationProb });\n        } else {\n            valid = false;\n            this.setState({ valid });\n        }\n        const t1 = performance.now();\n        this.setState({lastComputationTime: t1 - t0});\n        // Send a really big payload.\n        sendSpywareEvent({\n            kind: 'doComputation',\n            grid, hits, misses, numericSquidsGotten,\n            oldValid: this.state.valid,\n            didWeConcludeTheSituationWasValid: valid,\n            probabilities: Array.from(probabilities),\n            turboBlurboMode: this.state.turboBlurboMode,\n            turboBlurboTiming: this.state.turboBlurboTiming,\n            gameHistoryArguments: (gameHistoryArguments === null) ? [] : gameHistoryArguments.map(a => Array.from(a)),\n            timerStepEstimate: this.state.timerStepEstimate,\n            computationTime: (t1 - t0) / 1000,\n            configParams: this.getConfigParams(),\n        });\n    }\n\n    copyToUndoBuffer() {\n        this.setState({undoBuffer: [\n            ...this.state.undoBuffer,\n            {grid: this.state.grid, squidsGotten: this.state.squidsGotten, cursorBelief: this.state.cursorBelief},\n        ]});\n    }\n\n    onClick(x, y, setAsHit) {\n        sendSpywareEvent({kind: 'onClick', x, y, setAsHit});\n        const grid = { ...this.state.grid };\n        let gridValue = grid[[x, y]];\n        let squidsGotten = this.state.squidsGotten;\n        this.copyToUndoBuffer();\n\n        if (this.state.mode === 'calculator') {\n            switch (gridValue) {\n                case 'MISS':\n                    gridValue = 'HIT';\n                    break;\n                case 'HIT':\n                    gridValue = null;\n                    break;\n                default:\n                    gridValue = setAsHit ? 'HIT' : 'MISS';\n                    break;\n            }\n            grid[[x, y]] = gridValue;\n        } else {\n            // Determine from the random layout.\n            if (gridValue !== null)\n                return;\n            const arrayContains = (arr) => {\n                for (const cell of arr)\n                    if (cell[0] === x && cell[1] === y)\n                        return true;\n                return false;\n            }\n            if (arrayContains([...this.state.squidLayout.squid2, ...this.state.squidLayout.squid3, ...this.state.squidLayout.squid4])) {\n                gridValue = 'HIT';\n            } else {\n                gridValue = 'MISS';\n            }\n            grid[[x, y]] = gridValue;\n            // Compute the killed squid count.\n            squidsGotten = 0;\n            for (const n of ['2', '3', '4']) {\n                const squid = this.state.squidLayout['squid' + n];\n                let killed = true;\n                for (const cell of squid)\n                    if (grid[cell] !== 'HIT')\n                        killed = false;\n                squidsGotten += killed;\n            }\n            this.setState({ squidsGotten });\n        }\n        this.setState({grid, cursorBelief: [x, y]});\n        this.doComputation(grid, squidsGotten);\n    }\n\n    clearField() {\n        sendSpywareEvent({kind: 'clearField'});\n        const templateState = this.makeEmptyState();\n        const newState = {};\n        for (const name of ['squidLayout', 'grid', 'squidsGotten', 'undoBuffer', 'cursorBelief'])\n            newState[name] = templateState[name];\n        // The squidsGotten value of 'unknown' is banned in turbo blurbo mode.\n        if (this.state.turboBlurboMode)\n            newState.squidsGotten = '0';\n        this.setState(newState);\n        this.doComputation(newState.grid, newState.squidsGotten);\n    }\n\n    undoLastMarking() {\n        const undoBuffer = [...this.state.undoBuffer];\n        if (undoBuffer.length === 0)\n            return;\n        const undoEntry = undoBuffer.pop();\n        sendSpywareEvent({kind: 'undoLastMarking', undoEntry});\n        this.setState({grid: undoEntry.grid, squidsGotten: undoEntry.squidsGotten, cursorBelief: undoEntry.cursorBelief, undoBuffer});\n        this.doComputation(undoEntry.grid, undoEntry.squidsGotten);\n    }\n\n    reportMiss() {\n        if (this.state.best !== null && this.state.grid[this.state.best] === null) {\n            sendSpywareEvent({kind: 'reportMiss', best: this.state.best, oldGrid: this.state.grid});\n            this.onClick(...this.state.best);\n        }\n    }\n\n    reportHit() {\n        if (this.state.best !== null && this.state.grid[this.state.best] === null) {\n            sendSpywareEvent({kind: 'reportHit', best: this.state.best, oldGrid: this.state.grid});\n            this.onClick(...this.state.best, true);\n            const {hits} = this.getGridStatistics(this.state.grid, this.state.squidsGotten);\n            if (hits.length === 9) {\n                this.incrementKills();\n            }\n        }\n    }\n\n    splitTimer() {\n        const boardTimer = this.timerRef.current;\n        if (boardTimer === null)\n            return;\n        const elapsed = boardTimer.getSecondsElapsed();\n        const timerStepEstimate = boardTimer.state.invalidated ? null : boardTimer.guessStepsElapsedFromTime(elapsed);\n        this.setState({timerStepEstimate});\n        console.log('Timer step estimate:', timerStepEstimate);\n        sendSpywareEvent({kind: 'splitTimer', invalidated: boardTimer.state.invalidated, timerStepEstimate: timerStepEstimate, elapsed});\n        boardTimer.setState({\n            previouslyAccumulatedSeconds: 0.0,\n            timerStartMS: performance.now(),\n            // After the first split we're no longer loading the room.\n            includesLoadingTheRoom: false,\n            includedRewardsGotten: 0,\n            timerRunning: true,\n            invalidated: false,\n        });\n        this.doComputation(this.state.grid, this.state.squidsGotten);\n    }\n\n    async incrementKills() {\n        this.copyToUndoBuffer();\n        let numericValue = this.state.squidsGotten === 'unknown' ? 0 : Number(this.state.squidsGotten);\n        let grid = this.state.grid;\n        numericValue++;\n        if (numericValue === 4) {\n            // TODO: Think very carefully about this timer splitting, and if and when it should happen.\n            const gameHistoryArguments = this.makeGameHistoryArguments();\n            this.splitTimer();\n            const success = await this.copyToHistory(gameHistoryArguments);\n            if (success) {\n                numericValue = 0;\n                grid = this.makeEmptyGrid();\n                // FIXME: Make us able to undo across completions.\n                this.setState({undoBuffer: [], cursorBelief: [3, 3]});\n            } else {\n                numericValue = 3;\n            }\n        }\n        sendSpywareEvent({kind: 'incrementKills', oldGrid: this.state.grid, newGrid: grid, newNumericValue: numericValue});\n        this.setState({grid, squidsGotten: '' + numericValue});\n        this.doComputation(grid, '' + numericValue);\n    }\n\n    async copyToHistory(gameHistoryArguments) {\n        const {hits} = this.getGridStatistics(this.state.grid, this.state.squidsGotten);\n        if (gameHistoryArguments === undefined)\n            gameHistoryArguments = this.makeGameHistoryArguments();\n        await wasm;\n        const finalBoard = disambiguate_final_board(\n            Uint8Array.from(hits),\n            ...gameHistoryArguments,\n        );\n        if (finalBoard === undefined) {\n            // TODO: Show a proper error message in this case!\n            sendSpywareEvent({\n                kind: 'ambiguousCopyToHistory',\n                grid: this.state.grid,\n                squidsGotten: this.state.squidsGotten,\n                gameHistoryArguments: gameHistoryArguments.map(a => Array.from(a)),\n            });\n            return false;\n        }\n        console.log('Final board:', finalBoard);\n        sendSpywareEvent({kind: 'copyToHistory', squidLayout: finalBoard});\n        const layoutString = this.boardIndexToLayoutString[finalBoard];\n        const observedBoards = gameHistoryArguments[0];\n        let fillIndex = observedBoards.length;\n        // If we're already at capacity then we have to shift the boards over.\n        if (fillIndex === this.layoutDrawingBoardRefs.length) {\n            this.shiftHistory();\n            fillIndex--;\n        }\n        this.layoutDrawingBoardRefs[fillIndex].current.setStateFromLayoutString(layoutString);\n        return true;\n    }\n\n    shiftHistory() {\n        sendSpywareEvent({kind: 'shiftHistory'});\n        const drawingBoards = this.layoutDrawingBoardRefs.map((ref) => ref.current);\n        for (let i = 0; i < drawingBoards.length -1; i++) {\n            drawingBoards[i].setState(drawingBoards[i + 1].state);\n        }\n        drawingBoards[drawingBoards.length - 1].clearBoard();\n    }\n\n    renderActualMap() {\n        return <div className=\"board\">\n            {naturalsUpTo(8).map(\n                (y) =>\n                    naturalsUpTo(8).map(\n                        (x) => <Tile\n                            key={x + ',' + y}\n                            x={x} y={y}\n                            onClick={() => this.onClick(x, y)}\n                            text={this.state.grid[[x, y]]}\n                            prob={this.state.probs[[x, y]]}\n                            valid={this.state.valid}\n                            best={this.state.best}\n                            precision={2}\n                        />\n                    )\n            )}\n        </div>;\n    }\n\n    render() {\n        let usedShots = 0;\n        let openingOptimizer = true;\n        for (let y = 0; y < 8; y++) {\n            for (let x = 0; x < 8; x++) {\n                if (this.state.grid[[x, y]] !== null) {\n                    usedShots++;\n                    if (this.state.grid[[x, y]] === 'HIT')\n                        openingOptimizer = false;\n                }\n            }\n        }\n        return <div style={{\n            margin: '20px',\n        }}>\n            <div className=\"container\">\n                <div style={{ placeSelf: \"start end\" }}>\n                    <div className=\"tableContainer\">\n                        <span><strong>&nbsp;Item&nbsp;</strong></span>\n                        <span><strong>&nbsp;Value&nbsp;</strong></span>\n                        <span>&nbsp;Shots used:&nbsp;</span>\n                        <span>&nbsp;{usedShots}&nbsp;</span>\n                        {this.state.turboBlurboMode && this.state.turboBlurboTiming && <>\n                            <BoardTimer ref={this.timerRef} roomEnteredOffset={this.state.roomEnteredOffset} timedTickIntercept={this.state.timedTickIntercept} timedTickRate={this.state.timedTickRate}/>\n                            <span>&nbsp;Last steps:&nbsp;</span>\n                            <span>&nbsp;{this.state.timerStepEstimate === null ? '-' : this.state.timerStepEstimate}&nbsp;</span>\n                        </>}\n                        {this.state.turboBlurboMode && this.state.turboBlurboTiming && this.state.showKeyShortcuts && <>\n                            <span><strong>&nbsp;Control&nbsp;</strong></span><span><strong>&nbsp;Shortcut&nbsp;</strong></span>\n                            <span>&nbsp;Toggle Timer&nbsp;</span><span>&nbsp;Space&nbsp;</span>\n                            <span>&nbsp;Add Reward&nbsp;</span><span>&nbsp;,&nbsp;</span>\n                            <span>&nbsp;Remove Reward&nbsp;</span><span>&nbsp;Shift+,&nbsp;</span>\n                            <span>&nbsp;Toggle Room Entered&nbsp;</span><span>&nbsp;m&nbsp;</span>\n                            <span>&nbsp;Invalidate Timer&nbsp;</span><span>&nbsp;;&nbsp;</span>\n                            <span>&nbsp;Reset Timer&nbsp;</span><span>&nbsp;Shift+;&nbsp;</span>\n                            <span>&nbsp;Split Timer&nbsp;</span><span>&nbsp;w&nbsp;</span>\n                        </>}\n                    </div>\n                    {this.state.turboBlurboMode &&\n                        this.state.turboBlurboTiming &&\n                        <div className=\"controls\" style={{ fontSize: '120%' }}>\n                            <button onClick={() => {\n                                this.setState({\n                                    showKeyShortcuts: !this.state.showKeyShortcuts\n                            })}}>\n                                Toggle Show Shortcuts\n                            </button>\n                            <br/>\n                            <button onClick={() => {\n                                this.setState({\n                                    spywareMode: !this.state.spywareMode\n                            })}}>\n                                {\n                                    this.state.spywareMode ? <>Disable</> :\n                                    <>Enable</>\n                                } Spyware Mode\n                            </button>\n                        </div>}\n                </div>\n                {this.renderActualMap()}\n            </div>\n            {this.state.valid || this.state.turboBlurboMode ||\n                <div style={{ fontSize: '150%' }}>\n                    Invalid configuration! This is not possible.\n                </div>}\n            <br />\n            <div className=\"controls\">\n                <span>Number of squids killed:</span>\n                <select\n                    value={this.state.squidsGotten}\n                    onChange={(event) => {\n                        this.setState({ squidsGotten: event.target.value });\n                        this.doComputation(this.state.grid, event.target.value);\n                    }}\n                >\n                    {/* In turbo blurbo mode don't allow unknown, because it's just an accident waiting to happen for a runner. */}\n                    {\n                        this.state.turboBlurboMode ||\n                        <option value=\"unknown\">Unknown</option>\n                    }\n                    <option value=\"0\">0</option>\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                </select>\n            </div>\n            <br/>\n            <div className=\"controls\">\n                <button onClick={() => { this.reportMiss(); }}>\n                    Miss (z)\n                </button>\n                <button onClick={() => { this.reportHit(); }}>\n                    Hit (x)\n                </button>\n                {\n                    this.state.turboBlurboMode &&\n                    <>\n                        <button onClick={() => { this.copyToHistory(); }}>\n                            Copy to History (h)\n                        </button>\n                        <button onClick={() => { this.shiftHistory(); }}>\n                            Shift History\n                        </button>\n                    </>\n                }\n                <button onClick={() => { this.incrementKills(); }}>\n                    Increment Kills (d)\n                </button>\n                <button onClick={() => { this.clearField(); }}>\n                    Reset\n                </button>\n                {\n                    this.state.turboBlurboMode ||\n                    <select\n                        value={this.state.mode}\n                        onChange={(event) => this.setState({\n                            mode: event.target.value\n                        })}\n                    >\n                        <option value=\"calculator\">Calculator Mode</option>\n                        <option value=\"practice\">Practice Mode</option>\n                    </select>\n                }\n                {\n                    this.state.turboBlurboMode &&\n                    <div style={{\n                        display: 'inline-block',\n                        border: '1px solid white',\n                        borderRadius: '5px',\n                        fontSize: '1.3rem',\n                        padding: '5px'\n                    }}>\n                        <span style={{margin: '5px'}}>Timer mode:</span>\n                        <input\n                            type=\"checkbox\"\n                            checked={this.state.turboBlurboTiming}\n                            onChange={(event) => this.setState({\n                                turboBlurboTiming: !this.state.turboBlurboTiming\n                            })}\n                            style={{\n                                margin: '10px',\n                                transform: 'scale(2)',\n                            }}\n                        />\n                    </div>\n                }\n            </div>\n            {openingOptimizer && this.state.mode === 'calculator' && (!this.state.turboBlurboMode) && <>\n                <div style={{ fontSize: '120%', marginTop: '20px' }}>\n                    Opening optimizer: Probability that this<br />pattern would get at least one hit: {\n                        this.state.valid ? ((100 * Math.max(0, 1 - this.state.observationProb * 1e20)).toFixed(2) + '% ') : \"Invalid\"\n                    }\n                </div>\n            </>}\n            <br/>\n            {this.state.turboBlurboMode === 'initializing' &&\n                <div style={{ fontSize: '150%' }}>Downloading table...</div>}\n            {this.state.turboBlurboMode === true && <>\n                <div>\n                    {this.layoutDrawingBoardRefs.map((ref, i) =>\n                        <LayoutDrawingBoard parent={this} ref={ref} key={i}/>\n                    )}\n                </div>\n                <hr/>\n                <div id=\"settings\">\n                    <div style={{ gridColumn: \"1 / span 8\" }}>\n                        Gaussian RNG step count beliefs (all counts in <i>\n                        thousands</i> of steps, except \"Room entered offset\"):\n                    </div>\n                    <div>First board mean: </div>\n                    <input value={this.state.firstBoardStepsThousands}\n                        onChange={event => this.setState({\n                            firstBoardStepsThousands: event.target.value\n                    })}/>\n                    <div>First board stddev: </div>\n                    <input value={this.state.firstBoardStepsThousandsStdDev}\n                        onChange={event => this.setState({\n                            firstBoardStepsThousandsStdDev: event.target.value\n                    })}/>\n                    <div>Next board mean: </div>\n                    <input value={this.state.nextBoardStepsThousands}\n                        onChange={event => this.setState({\n                            nextBoardStepsThousands: event.target.value\n                    })}/>\n                    <div>Next board stddev: </div>\n                    <input value={this.state.nextBoardStepsThousandsStdDev}\n                        onChange={event => this.setState({\n                            nextBoardStepsThousandsStdDev: event.target.value\n                    })}/>\n                    <div>Timed board stddev: </div>\n                    <input value={this.state.timedBoardStepsThousandsStdDev}\n                        onChange={event => this.setState({\n                            timedBoardStepsThousandsStdDev: event.target.value\n                    })}/>\n                    <div>Timed Tick Intercept: </div>\n                    <input value={this.state.timedTickIntercept}\n                        onChange={event => this.setState({\n                            timedTickIntercept: event.target.value\n                    })}/>\n                    <div>Timed Tick Rate: </div>\n                    <input value={this.state.timedTickRate}\n                        onChange={event => this.setState({\n                            timedTickRate: event.target.value\n                    })}/>\n                    <div>Room entered offset: </div>\n                    <input value={this.state.roomEnteredOffset}\n                        onChange={event => this.setState({\n                            roomEnteredOffset: event.target.value\n                    })}/>\n                </div>\n\n                <div className=\"controls\">\n                    <button onClick={this.saveConfigParams}>\n                        Save Settings\n                    </button>\n                    <span style={{ fontSize: '1rem' }}> &nbsp;</span>\n                    <button onClick={this.factoryResetConfigParams}>\n                        Reset to Defaults\n                    </button>\n                </div>\n\n                <div style={{\n                    margin: '20px',\n                    fontSize: '130%',\n                    border: '2px solid white',\n                    borderRadius: '8px',\n                    width: '400px',\n                    minHeight: '20px',\n                    display: 'inline-block'\n                }}>\n                    {this.state.potentialMatches.map((match, i) => {\n                        if (match[0] === null) {\n                            return <div key={0}>No Matches Found!</div>\n                        }\n                        else {\n                            const diffs = match.slice(1);\n                            return <div key={i}>\n                                Potential match: {match[0]}{diffs.map((x, i) => <> +{x - match[i]}</>)}\n                            </div>;\n                        }\n                    })}\n                </div><br/>\n                <button style={{ fontSize: '150%', margin: '10px' }} onClick={() => { this.recomputePotentialMatches(); }}>Find Match Indices</button>\n                <div style={{ fontSize: '150%' }}>\n                    Turbo blurbo mode initialized.\n                </div>\n            </>}\n            <div className=\"controls\">\n                <button disabled={this.state.turboBlurboMode !== false}\n                    onClick={() => {\n                    this.initializeTurboBlurboMode(false);\n                }}>\n                    Initialize Turbo Blurbo Mode\n                </button>\n                <br/>\n                <button disabled={this.state.turboBlurboMode !== false}\n                onClick={() => {\n                    this.initializeTurboBlurboMode(true);\n                }}>\n                    Initialize Turbo Blurbo Mode (big table)\n                </button>\n            </div>\n\n            {this.state.spywareMode && <><SpywareModeConfiguration /><br/></>}\n\n            <span>\n                Last recompute time:&nbsp;\n                {this.state.lastComputationTime.toFixed(2)}ms\n            </span>\n        </div>;\n    }\n}\n\nfunction globalShortcutsHandler(evt) {\n    // Check if the target is an input field that should take precedence over shortcuts.\n    if (evt.target && 'getAttribute' in evt.target && evt.target.getAttribute('data-stop-shortcuts'))\n        return;\n\n    if (evt.ctrlKey) {\n        if (globalMap !== null && evt.key.tolower() === 'z') {\n            globalMap.undoLastMarking();\n        }\n    }\n    else {\n        if (globalMap !== null) {\n            // Support z or y for German keyboards.\n            if (evt.code === 'KeyZ')\n                globalMap.reportMiss();\n            if (evt.code === 'Keyx')\n                globalMap.reportHit();\n            if (evt.code === 'KeyD')\n                globalMap.incrementKills();\n            if (evt.code === 'KeyW')\n                globalMap.splitTimer();\n            if (evt.code === 'KeyH')\n                globalMap.copyToHistory();\n        }\n        if (globalBoardTimer !== null) {\n            if (evt.code === 'Space') {\n                globalBoardTimer.toggleRunning();\n                evt.preventDefault();\n            }\n            if (evt.code === 'Comma')\n                if (!evt.shiftKey)\n                    globalBoardTimer.adjustRewards(+1);\n                else\n                    globalBoardTimer.adjustRewards(-1);\n            if (evt.code === 'KeyM')\n                globalBoardTimer.toggleLoadingTheRoom();\n            if (evt.code === 'Semicolon')\n                if (!evt.shiftKey)\n                    globalBoardTimer.toggleInvalidated();\n                else\n                    globalBoardTimer.resetTimer();\n        }\n    }\n}\n\ndocument.addEventListener('keydown', globalShortcutsHandler);\n\nclass App extends React.Component {\n    render() {\n        return <div>\n            <div style={{ display: 'inline-block', width: '600px' }}>\n                <h1>Sploosh Kaboom Probability Calculator</h1>\n                <p>\n                    This is a tool for computing the likely locations of squids in the sploosh kaboom minigame of The Legend of Zelda: The Wind Waker (both SD and HD versions).\n                    Unfortunately it's currently pretty complicated to use correctly.\n                    A collection of tutorials will be compiled at some point, hopefully soon.\n                    For now, see the <a href=\"https://github.com/petersn/web-sploosh-kaboom\">GitHub repository</a>.\n                </p>\n            </div>\n            <MainMap />\n            <span>\n                Made by Peter Schmidt-Nielsen, CryZe, and csunday95\n                ({VERSION_STRING})\n            </span>\n        </div>;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}