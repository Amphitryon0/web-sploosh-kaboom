{"version":3,"sources":["wasm/sploosh_wasm.js","App.js","serviceWorker.js","index.js"],"names":["wasm","cachegetUint8Memory0","WASM_VECTOR_LEN","passArray8ToWasm0","arg","malloc","ptr","length","buffer","memory","Uint8Array","set","cachegetUint32Memory0","passArray32ToWasm0","Uint32Array","cachegetFloat64Memory0","getFloat64Memory0","Float64Array","passArrayF64ToWasm0","cachegetInt32Memory0","getInt32Memory0","Int32Array","getArrayF64FromWasm0","len","subarray","calculate_probabilities_without_sequence","hits","misses","squids_gotten","ptr0","__wbindgen_malloc","len0","ptr1","len1","v2","r0","r1","slice","__wbindgen_free","calculate_probabilities_from_game_history","observed_boards","prior_steps_from_previous_means","prior_steps_from_previous_stddevs","ptr2","len2","ptr3","len3","ptr4","len4","v5","disambiguate_board","undefined","set_board_table","board_table","load","module","imports","a","Response","WebAssembly","instantiateStreaming","headers","get","console","warn","arrayBuffer","bytes","instantiate","instance","Instance","init","input","Request","URL","fetch","exports","__wbindgen_wasm_module","interpolate","require","globalDB","indexedDBreq","window","indexedDB","open","dbWrite","key","value","transaction","onerror","event","alert","objectStore","add","dbRead","Promise","resolve","reject","request","onsuccess","target","result","toPercent","precision","toFixed","errorCode","onupgradeneeded","createObjectStore","colormap","naturalsUpTo","n","Array","keys","Tile","isBest","this","props","best","x","y","backgroundColor","text","prob","className","style","border","valid","outline","zIndex","opacity","onClick","React","Component","process","globalMap","dbCachedFetch","url","callback","cacheMiss","req","XMLHttpRequest","responseType","onload","evt","response","send","catch","makeBoardIndicesTable","actuallyMakeBoardIndicesTable","descs","direction","push","allBoards","boardIndices","placeSquid","board","desc","i","fill","squid2","squid3","squid4","count","from","index","map","join","sampleSquid","Math","round","random","cells","cell","newXY","LayoutDrawingBoard","state","grid","makeEmptyGrid","selectedCell","setState","changeMade","dx","dy","countsBySquid","2","3","4","layoutString","getLayoutString","boardIndex","parent","isSelectedCell","globalBoardTimer","setInterval","forceUpdate","BoardTimer","previouslyAccumulatedSeconds","timerStartMS","timerRunning","includesLoadingTheRoom","includedRewardsGotten","invalidated","now","performance","elapsed","delta","max","min","timerStepEstimates","total","timeDeltaSeconds","prediction","Number","timedTickIntercept","timedTickRate","roomEnteredOffset","getSecondsElapsed","guessStepsElapsedFromTime","color","defaultConfigurationParams","firstBoardStepsThousands","firstBoardStepsThousandsStdDev","nextBoardStepsThousands","nextBoardStepsThousandsStdDev","timedBoardStepsThousandsStdDev","usingTimer","showAdvancedSettings","MainMap","layoutDrawingBoardRefs","createRef","timerRef","makeEmptyState","tableSize","doComputation","squidsGotten","probs","mode","squidLayout","layout","hitLocations","candidate","isAdmissible","generateLayout","undoBuffer","cursorBelief","observationProb","lastComputationTime","sequenceAware","showKeyShortcuts","potentialMatches","savedSettings","localStorage","getItem","JSON","parse","Object","name","configParams","settings","getConfigParams","log","setItem","stringify","boardIndexToLayoutString","buf","boardTable","v","clearField","observedBoards","startIndex","scanRange","soughtBoard","indexMax","findMatchingLocations","subResult","makeGameHistoryArguments","matches","match","rawObservedBoards","ref","current","ob","means","stds","estimates","lastEstimate","timedStd","gridValue","numericSquidsGotten","t0","getGridStatistics","gameHistoryArguments","probabilities","maxY","maxX","highestProb","p1","p2","l1Distance","abs","distancePenaltyMultiplier","distanceAdjustedProb","t1","setAsHit","copyToUndoBuffer","arr","arrayContains","squid","killed","templateState","newState","undoEntry","pop","incrementKills","boardTimer","newEstimates","toggleRunning","numericValue","splitTimer","copyToHistory","finalBoard","fillIndex","shiftHistory","setStateFromLayoutString","drawingBoards","clearBoard","likelyBoard","usedShots","openingOptimizer","placeSelf","id","renderActualMap","marginTop","onChange","reportMiss","reportHit","killMostLikely","htmlFor","type","checked","disabled","saveConfigParams","factoryResetConfigParams","margin","borderRadius","width","minHeight","display","diffs","recomputePotentialMatches","defaultChecked","loadSequenceTable","document","addEventListener","getAttribute","ctrlKey","toLowerCase","undoLastMarking","code","preventDefault","shiftKey","adjustRewards","toggleLoadingTheRoom","resetTimer","toggleInvalidated","App","marginLeft","marginRight","maxWidth","href","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b667e6fc.chunk.js","sourcesContent":["\nlet wasm;\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\n\nfunction passArray32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4);\n    getUint32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetFloat64Memory0 = null;\nfunction getFloat64Memory0() {\n    if (cachegetFloat64Memory0 === null || cachegetFloat64Memory0.buffer !== wasm.memory.buffer) {\n        cachegetFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachegetFloat64Memory0;\n}\n\nfunction passArrayF64ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 8);\n    getFloat64Memory0().set(arg, ptr / 8);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction getArrayF64FromWasm0(ptr, len) {\n    return getFloat64Memory0().subarray(ptr / 8, ptr / 8 + len);\n}\n/**\n* @param {Uint8Array} hits\n* @param {Uint8Array} misses\n* @param {number} squids_gotten\n* @returns {Float64Array | undefined}\n*/\nexport function calculate_probabilities_without_sequence(hits, misses, squids_gotten) {\n    var ptr0 = passArray8ToWasm0(hits, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(misses, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    wasm.calculate_probabilities_without_sequence(8, ptr0, len0, ptr1, len1, squids_gotten);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    let v2;\n    if (r0 !== 0) {\n        v2 = getArrayF64FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 8);\n    }\n    return v2;\n}\n\n/**\n* @param {Uint8Array} hits\n* @param {Uint8Array} misses\n* @param {number} squids_gotten\n* @param {Uint32Array} observed_boards\n* @param {Uint32Array} prior_steps_from_previous_means\n* @param {Float64Array} prior_steps_from_previous_stddevs\n* @returns {Float64Array | undefined}\n*/\nexport function calculate_probabilities_from_game_history(hits, misses, squids_gotten, observed_boards, prior_steps_from_previous_means, prior_steps_from_previous_stddevs) {\n    var ptr0 = passArray8ToWasm0(hits, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(misses, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passArray32ToWasm0(observed_boards, wasm.__wbindgen_malloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passArray32ToWasm0(prior_steps_from_previous_means, wasm.__wbindgen_malloc);\n    var len3 = WASM_VECTOR_LEN;\n    var ptr4 = passArrayF64ToWasm0(prior_steps_from_previous_stddevs, wasm.__wbindgen_malloc);\n    var len4 = WASM_VECTOR_LEN;\n    wasm.calculate_probabilities_from_game_history(8, ptr0, len0, ptr1, len1, squids_gotten, ptr2, len2, ptr3, len3, ptr4, len4);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    let v5;\n    if (r0 !== 0) {\n        v5 = getArrayF64FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 8);\n    }\n    return v5;\n}\n\n/**\n* @param {Uint8Array} hits\n* @param {Uint8Array} misses\n* @param {number} squids_gotten\n* @param {Uint32Array} observed_boards\n* @param {Uint32Array} prior_steps_from_previous_means\n* @param {Float64Array} prior_steps_from_previous_stddevs\n* @returns {number | undefined}\n*/\nexport function disambiguate_board(hits, misses, squids_gotten, observed_boards, prior_steps_from_previous_means, prior_steps_from_previous_stddevs) {\n    var ptr0 = passArray8ToWasm0(hits, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(misses, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passArray32ToWasm0(observed_boards, wasm.__wbindgen_malloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passArray32ToWasm0(prior_steps_from_previous_means, wasm.__wbindgen_malloc);\n    var len3 = WASM_VECTOR_LEN;\n    var ptr4 = passArrayF64ToWasm0(prior_steps_from_previous_stddevs, wasm.__wbindgen_malloc);\n    var len4 = WASM_VECTOR_LEN;\n    wasm.disambiguate_board(8, ptr0, len0, ptr1, len1, squids_gotten, ptr2, len2, ptr3, len3, ptr4, len4);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    return r0 === 0 ? undefined : r1 >>> 0;\n}\n\n/**\n* @param {Uint32Array} board_table\n*/\nexport function set_board_table(board_table) {\n    var ptr0 = passArray32ToWasm0(board_table, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.set_board_table(ptr0, len0);\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') !== 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nasync function init(input) {\n    //if (typeof input === 'undefined') {\n    //    input = import.meta.url.replace(/\\.js$/, '_bg.wasm');\n    //}\n    const imports = {};\n\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    const { instance, module } = await load(await input, imports);\n\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n\n    return wasm;\n}\n\nexport default init;\n\n","import React from 'react';\nimport './App.css';\nimport init, {\n    set_board_table,\n    calculate_probabilities_without_sequence,\n    calculate_probabilities_from_game_history,\n    disambiguate_board,\n} from './wasm/sploosh_wasm.js';\nconst interpolate = require('color-interpolate');\n\nconst VERSION_STRING = 'v0.1.0-beta.8';\n\nvar globalDB = null;\nconst indexedDBreq = window.indexedDB.open('splooshkaboom', 1);\nindexedDBreq.onerror = function(event) {\n    alert('Failed to access IndexedDB.');\n};\n// Known issue: There's basically a race condition here in that I don't\n// wait for this onsuccess to potentially start calling dbRead.\nindexedDBreq.onsuccess = function(event) {\n    globalDB = event.target.result;\n    globalDB.onerror = function(event) {\n        alert('IndexedDB error: ' + event.target.errorCode);\n    };\n};\nindexedDBreq.onupgradeneeded = function(event) {\n    const db = event.target.result;\n    db.createObjectStore('sk');\n}\n\n// TODO: Am I using IndexedDB even remotely correctly!? This looks so weird...\n// Do I not have to somehow end or commit the transactions!?\n\nfunction dbWrite(key, value) {\n    if (globalDB === null)\n        return;\n\n    const transaction = globalDB.transaction(['sk'], 'readwrite');\n\n    transaction.onerror = function(event) {\n        alert('Transaction error!');\n    }\n    transaction.objectStore('sk').add(value, key);\n}\n\nfunction dbRead(key) {\n    return new Promise((resolve, reject) => {\n        const transaction = globalDB.transaction(['sk']);\n\n        transaction.onerror = function(event) {\n            alert('Transaction error!');\n        }\n        const objectStore = transaction.objectStore('sk');\n        const request = objectStore.get(key);\n        request.onsuccess = function(event) {\n            resolve(event.target.result);\n        };\n        request.onerror = function(event) {\n            reject();\n        };\n    });\n}\n\nfunction toPercent(value, precision) {\n    return (value * 100).toFixed(precision) + '%';\n}\n\n// .        . . . .\n// 0123456789abcdef\nconst colormap = interpolate(['#004', '#070', '#090', '#0b0', '#0d0', '#0f0', '#6f6']);\nconst naturalsUpTo = (n) => [...Array(n).keys()];\n\nclass Tile extends React.Component {\n    render() {\n        const isBest = this.props.best !== null && this.props.best[0] === this.props.x && this.props.best[1] === this.props.y;\n\n        let backgroundColor = this.props.backgroundColor;\n        if (backgroundColor === undefined) {\n            backgroundColor = this.props.text === null ? colormap(this.props.prob) : (\n                this.props.text === 'HIT' ? '#a2a' : '#44a'\n            );\n        }\n\n        return <div className=\"boardTile\"\n            key={this.props.x + ',' + this.props.y}\n            style={{\n                border: this.props.valid ? '1px solid grey' : '1px solid red',\n                outline: isBest ? '2px solid yellow' : '',\n                zIndex: isBest ? 1 : 0,\n                opacity: this.props.opacity,\n                backgroundColor,\n            }}\n            onClick={this.props.onClick}\n        >\n            {this.props.text === '.' ? ''\n                : this.props.text ?? toPercent(this.props.prob, this.props.precision)}\n        </div>;\n    }\n}\n\nlet wasm = init(process.env.PUBLIC_URL + \"/sploosh_wasm_bg.wasm\");\n\n// Super ugly, please forgive me. :(\nvar globalMap = null;\n\nasync function dbCachedFetch(url, callback) {\n    function cacheMiss() {\n        const req = new XMLHttpRequest();\n        req.open('GET', process.env.PUBLIC_URL + url, true);\n        req.responseType = 'arraybuffer';\n        req.onload = (evt) => {\n            dbWrite(url, req.response);\n            callback(req.response);\n        };\n        req.send();\n        return null;\n    }\n    const result = await dbRead(url).catch(cacheMiss);\n    if (result === undefined) {\n        cacheMiss();\n        return;\n    }\n    // This is sort of an ugly protocol, but if we hit the catch path above\n    // we signal that the callback was already called by returning null.\n    if (result === null)\n        return;\n    callback(result);\n}\n\nasync function makeBoardIndicesTable() {\n    function cacheMiss() {\n        const result = actuallyMakeBoardIndicesTable();\n        dbWrite('boardIndicesTable', result);\n        return result;\n    }\n    const result = await dbRead('boardIndicesTable').catch(cacheMiss);\n    if (result === undefined)\n        return cacheMiss();\n    return result;\n}\n\nfunction actuallyMakeBoardIndicesTable() {\n    // This convention here has to match that in the Rust component and table building C++ exactly!\n    const descs = [];\n    for (let y = 0; y < 8; y++)\n        for (let x = 0; x < 8; x++)\n            for (const direction of [false, true])\n                descs.push({x, y, direction});\n    const allBoards = [];\n    const boardIndices = {};\n    function placeSquid(board, desc, length) {\n        for (let i = 0; i < length; i++) {\n            let {x, y} = desc;\n            if (desc.direction)\n                x += i;\n            else\n                y += i;\n            const index = x + 8 * y;\n            if (x >= 8 || y >= 8)\n                return;\n            board[index] = length;\n        }\n    }\n    const board = new Array(64).fill(0);\n\n    for (const squid2 of descs) {\n        for (const squid3 of descs) {\n            for (const squid4 of descs) {\n                board.fill(0);\n                placeSquid(board, squid2, 2);\n                placeSquid(board, squid3, 3);\n                placeSquid(board, squid4, 4);\n                let count = 0;\n                for (const entry of board)\n                    count += entry\n                if (count !== 2*2 + 3*3 + 4*4)\n                    continue;\n                allBoards.push(Array.from(board));\n            }\n        }\n    }\n    let index = 0;\n    for (const board of allBoards) {\n        boardIndices[board.map((i) => i === 0 ? '.' : i).join('')] = index;\n        index++;\n    }\n    return boardIndices;\n}\n\nfunction sampleSquid(length) {\n    const x = Math.round(Math.random() * 8);\n    const y = Math.round(Math.random() * 8);\n    const direction = Math.random() < 0.5;\n    const cells = [[x, y]];\n    for (let i = 0; i < length - 1; i++) {\n        const cell = cells[cells.length - 1];\n        const newXY = direction ? [cell[0] + 1, cell[1]] : [cell[0], cell[1] + 1];\n        cells.push(newXY);\n    }\n    return cells;\n}\n\nfunction generateLayout() {\n    const layout = {};\n    const hitLocations = {};\n    for (const n of [2, 3, 4]) {\n        while (true) {\n            const candidate = sampleSquid(n);\n            let isAdmissible = true;\n            for (const cell of candidate)\n                if (cell[0] > 7 || cell[1] > 7 || hitLocations[cell] === true)\n                    isAdmissible = false;\n            if (isAdmissible) {\n                layout['squid' + n] = candidate;\n                for (const cell of candidate)\n                    hitLocations[cell] = true;\n                break;\n            }\n        }\n    }\n    return layout;\n}\n\nclass LayoutDrawingBoard extends React.Component {\n    constructor() {\n        super();\n        this.state = { grid: this.makeEmptyGrid(), selectedCell: null };\n    }\n\n    makeEmptyGrid() {\n        const grid = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                grid[[x, y]] = '.';\n        return grid;\n    }\n\n    clearBoard() {\n        this.setState({ grid: this.makeEmptyGrid(), selectedCell: null });\n    }\n\n    onClick(x, y) {\n        if (this.state.selectedCell === null) {\n            this.setState({ selectedCell: [x, y] });\n            return;\n        }\n        const grid = {...this.state.grid};\n        let changeMade = false;\n        for (const length of [2, 3, 4]) {\n            for (const [dx, dy] of [[+1, 0], [0, +1], [-1, 0], [0, -1]]) {\n                if (this.state.selectedCell[0] === x + dx * (length - 1) && this.state.selectedCell[1] === y + dy * (length - 1)) {\n                    // If this squid appears anywhere else, obliterate it.\n                    for (let y = 0; y < 8; y++)\n                        for (let x = 0; x < 8; x++)\n                            if (grid[[x, y]] === '' + length)\n                                grid[[x, y]] = '.';\n                    // Fill in the squid here.\n                    for (let i = 0; i < length; i++)\n                        grid[[x + i * dx, y + i * dy]] = '' + length;\n                    changeMade = true;\n                }\n            }\n        }\n        // If any squid has the wrong count, then totally eliminate it.\n        const countsBySquid = {2: 0, 3: 0, 4: 0, '.': 0};\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                countsBySquid[grid[[x, y]]]++;\n        for (const length of [2, 3, 4])\n            if (countsBySquid[length] !== length)\n                for (let y = 0; y < 8; y++)\n                    for (let x = 0; x < 8; x++)\n                        if (grid[[x, y]] === '' + length)\n                            grid[[x, y]] = '.';\n        if (changeMade)\n            this.setState({ grid });\n        this.setState({ selectedCell: null });\n    }\n\n    getLayoutString() {\n        // Quadratic time, but who cares?\n        let layoutString = '';\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                layoutString += this.state.grid[[x, y]];\n        return layoutString;\n    }\n\n    setStateFromLayoutString(layoutString) {\n        const grid = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                grid[[x, y]] = layoutString[x + 8 * y];\n        this.setState({grid});\n    }\n\n    render() {\n        const layoutString = this.getLayoutString();\n        let boardIndex = this.props.parent.boardIndices[layoutString];\n        if (boardIndex === undefined) {\n            boardIndex = \"waiting...\";\n        }\n        const isSelectedCell = (x, y) => this.state.selectedCell !== null && x === this.state.selectedCell[0] && y === this.state.selectedCell[1];\n\n        return <div className=\"board historyBoard\">\n            {naturalsUpTo(8).map(\n                (y) =>\n                    naturalsUpTo(8).map(\n                        (x) => <Tile\n                            key={x + ',' + y}\n                            x={x} y={y}\n                            onClick={() => this.onClick(x, y)}\n                            text={this.state.grid[[x, y]]}\n                            valid={true}\n                            best={this.state.selectedCell}\n                            opacity={isSelectedCell(x, y) || this.state.grid[[x, y]] !== '.' ? 0.6 : 0.2}\n                            backgroundColor={this.state.grid[[x, y]] === '.' ? undefined : 'green'}\n                        />\n                    )\n            )}\n        </div>;\n    }\n}\n\nvar globalBoardTimer = null;\n\nsetInterval(\n    () => {\n        if (globalBoardTimer !== null)\n            globalBoardTimer.forceUpdate();\n    },\n    69,\n);\n\nfunction renderYesNo(bool) {\n    return bool ?\n        <span className=\"boolText\" style={{ color: 'green' }}>Yes</span> :\n        <span className=\"boolText\" style={{ color: 'red' }}>No</span>;\n}\n\nclass BoardTimer extends React.Component {\n    constructor() {\n        super();\n        globalBoardTimer = this;\n        this.state = {\n            previouslyAccumulatedSeconds: 0.0,\n            timerStartMS: 0.0,\n            timerRunning: false,\n            includesLoadingTheRoom: true,\n            includedRewardsGotten: 0,\n            invalidated: false,\n        };\n    }\n\n    toggleRunning() {\n        const now = performance.now();\n        const elapsed = 1e-3 * (now - this.state.timerStartMS);\n        if (this.state.timerRunning)\n            this.setState({previouslyAccumulatedSeconds: this.state.previouslyAccumulatedSeconds + elapsed});\n        this.setState({timerRunning: !this.state.timerRunning, timerStartMS: now});\n    }\n\n    adjustRewards(delta) {\n        this.setState({includedRewardsGotten: Math.max(0, Math.min(2, this.state.includedRewardsGotten + delta))});\n    }\n\n    toggleLoadingTheRoom() {\n        this.setState({includesLoadingTheRoom: !this.state.includesLoadingTheRoom});\n    }\n\n    toggleInvalidated() {\n        this.setState({invalidated: !this.state.invalidated});\n    }\n\n    resetTimer() {\n        this.setState({\n            previouslyAccumulatedSeconds: 0.0,\n            timerStartMS: performance.now(),\n            timerRunning: false,\n            includesLoadingTheRoom: true,\n            includedRewardsGotten: 0,\n            invalidated: false,\n        });\n        globalMap.setState({\n            timerStepEstimates: [],\n        });\n    }\n\n    getSecondsElapsed() {\n        let total = this.state.previouslyAccumulatedSeconds;\n        if (this.state.timerRunning) {\n            const now = performance.now();\n            total += 1e-3 * (now - this.state.timerStartMS);\n        }\n        return total;\n    }\n\n    guessStepsElapsedFromTime(timeDeltaSeconds) {\n        // I did some linear regressions from real HD Italian runs. I'll put some data up at some point.\n        let prediction = Number(this.props.timedTickIntercept) + Number(this.props.timedTickRate) * timeDeltaSeconds;\n        if (this.state.includesLoadingTheRoom)\n            prediction += -940 + Number(this.props.roomEnteredOffset);\n        prediction += this.state.includedRewardsGotten * 760;\n        return Math.round(prediction);\n    }\n\n    render() {\n        const elapsed = this.getSecondsElapsed();\n        if (this.state.invalidated)\n            return <tr>\n                <td><b>Timer</b></td>\n                <td><b>Invalidated</b></td>\n            </tr>;\n        return <>\n            <tr>\n                <td>Seconds elapsed:</td>\n                <td>{elapsed.toFixed(2)}</td>\n            </tr>\n            <tr>\n                <td>Steps:</td>\n                <td>{this.guessStepsElapsedFromTime(elapsed)}</td>\n            </tr>\n            <tr>\n                <td>Entered room:</td>\n                <td>{renderYesNo(this.state.includesLoadingTheRoom)}</td>\n            </tr>\n            <tr>\n                <td>Rewards gotten:</td>\n                <td>{this.state.includedRewardsGotten}</td>\n            </tr>\n        </>;\n    }\n}\n\nfunction computeL1Distance(p1, p2) {\n    return Math.abs(p1[0] - p2[0]) + Math.abs(p1[1] - p2[1]);\n}\n\nconst defaultConfigurationParams = {\n    firstBoardStepsThousands: 500,\n    firstBoardStepsThousandsStdDev: 500,\n    nextBoardStepsThousands: 7,\n    nextBoardStepsThousandsStdDev: 3,\n    timedBoardStepsThousandsStdDev: 0.2,\n    timedTickIntercept: 300,\n    timedTickRate: 252,\n    roomEnteredOffset: 0,\n    usingTimer: true,\n    showAdvancedSettings: false,\n};\n\nclass MainMap extends React.Component {\n    layoutDrawingBoardRefs = [React.createRef(), React.createRef(), React.createRef()];\n    timerRef = React.createRef();\n\n    constructor() {\n        super();\n        this.state = this.makeEmptyState();\n        this.tableSize = \"25M\";\n        globalMap = this;\n    }\n\n    componentDidMount() {\n        this.doComputation(this.state.grid, this.state.squidsGotten);\n    }\n\n    makeEmptyGrid() {\n        const grid = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                grid[[x, y]] = null;\n        return grid;\n    }\n\n    makeEmptyState() {\n        const probs = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                probs[[x, y]] = 0.0;\n        // Select a particular layout, for practice mode.\n        const squidLayout = generateLayout();\n        const state = {\n            mode: 'calculator',\n            squidLayout,\n            grid: this.makeEmptyGrid(),\n            squidsGotten: 'unknown',\n            undoBuffer: [],\n            probs,\n            best: [3, 4],\n            cursorBelief: [0, 7],\n            valid: true,\n            observationProb: 1.0,\n            lastComputationTime: -1,\n\n            sequenceAware: false,\n            usingTimer: false,\n            showKeyShortcuts: false,\n\n            timerStepEstimates: [],\n\n            potentialMatches: [],\n        };\n        // Load relevant configuration from localStorage.\n        let savedSettings = localStorage.getItem('SKSettings');\n        if (savedSettings === null) {\n            savedSettings = defaultConfigurationParams;\n        } else {\n            // if saved configuration from previous version, use defaults for \n            // any new parameters\n            savedSettings = JSON.parse(savedSettings);\n            for (const name of Object.keys(defaultConfigurationParams)) {\n                if (!(name in savedSettings)){\n                    savedSettings[name] = defaultConfigurationParams[name];\n                }\n            }\n        }\n        const configParams = savedSettings;\n        return {...state, ...configParams};\n    }\n\n    getConfigParams() {\n        const settings = {};\n        for (const name of Object.keys(defaultConfigurationParams))\n            settings[name] = this.state[name];\n        return settings;\n    }\n\n    saveConfigParams() {\n        const configParams = this.getConfigParams();\n        console.log('Saving config params:', configParams);\n        localStorage.setItem('SKSettings', JSON.stringify(configParams));\n    }\n\n    factoryResetConfigParams() {\n        this.setState(defaultConfigurationParams);\n    }\n\n    async loadSequenceTable() {\n        if (this.state.sequenceAware !== false)\n            return;\n        this.setState({sequenceAware: 'initializing'});\n        this.boardIndices = await makeBoardIndicesTable();\n        this.boardIndexToLayoutString = new Array(Object.keys(this.boardIndices).length);\n        for (const key of Object.keys(this.boardIndices))\n            this.boardIndexToLayoutString[this.boardIndices[key]] = key;\n\n        const tableName =  '/board_table_' + this.tableSize + '.bin';\n        dbCachedFetch(tableName, (buf) => {\n            this.boardTable = new Uint32Array(buf);\n            // Warning: Do I need to await wasm here first?\n            console.log('Board table length:', this.boardTable.length);\n            // Make sure every value is in range.\n            for (const v of this.boardTable)\n                if (v > 604583)\n                    alert('BUG BUG BUG: Bad value in board table: ' + v);\n            set_board_table(this.boardTable);\n            this.setState({\n                sequenceAware: true,\n                mode: 'calculator'\n            }, () => {\n                this.clearField();\n            });\n        });\n    }\n\n    *findMatchingLocations(observedBoards, startIndex, scanRange) {\n        if (observedBoards.length === 0) {\n            yield [];\n            return;\n        }\n        // Try to find the first match.\n        const soughtBoard = observedBoards[0];\n        const boardTable = this.boardTable;\n        const indexMax = Math.min(boardTable.length, startIndex + scanRange);\n        for (let i = startIndex; i < indexMax; i++)\n            if (boardTable[i] === soughtBoard)\n                for (const subResult of this.findMatchingLocations(observedBoards.slice(1), i, 50000))\n                    yield [i, ...subResult];\n    }\n\n    recomputePotentialMatches() {\n        const observedBoards = this.makeGameHistoryArguments()[0];\n        const matches = [];\n        for (const match of this.findMatchingLocations(observedBoards, 0, 1000000000))\n            matches.push(match);\n        if (matches[0].length === 0) {\n            matches.length = 0;\n            matches.push([null, null]);\n        }\n        this.setState({potentialMatches: matches});\n    }\n\n    makeGameHistoryArguments() {\n        // Figure out how many history boards we have.\n        const rawObservedBoards = this.layoutDrawingBoardRefs\n            .map((ref) => this.boardIndices?.[ref.current?.getLayoutString()]);\n        const observedBoards = [];\n        for (const ob of rawObservedBoards) {\n            if (ob === undefined)\n                break;\n            observedBoards.push(ob);\n        }\n\n        // The optimal thing to do here is to save the sequence of step delta estimates, but to make\n        // the tool less fragile we only use our timer-based estimates for the very final mean.\n\n        const means = [1000.0 * Number(this.state.firstBoardStepsThousands)];\n        const stds = [1000.0 * Number(this.state.firstBoardStepsThousandsStdDev)];\n        for (let i = 0; i < observedBoards.length; i++) {\n            means.push(1000.0 * Number(this.state.nextBoardStepsThousands));\n            stds.push(1000.0 * Number(this.state.nextBoardStepsThousandsStdDev));\n        }\n        const estimates = this.state.timerStepEstimates;\n        const lastEstimate = estimates[estimates.length - 1];\n        if (observedBoards.length > 0 && estimates.length > 0 && lastEstimate !== null) {\n            means[means.length - 1] = Math.max(0, lastEstimate);\n            const timedStd = 1000.0 * Number(this.state.timedBoardStepsThousandsStdDev);\n            // There is more uncertainty in the second board than ones after.\n            stds[stds.length - 1] = observedBoards.length === 1 ? 2.0 * timedStd\n                : 0.5 * timedStd;\n        }\n\n        return [\n            Uint32Array.from(observedBoards),\n            Uint32Array.from(means),\n            Float64Array.from(stds),\n        ];\n    }\n\n    getGridStatistics(grid, squidsGotten) {\n        const hits = [];\n        const misses = [];\n        for (let y = 0; y < 8; y++) {\n            for (let x = 0; x < 8; x++) {\n                const gridValue = grid[[x, y]];\n                if (gridValue === 'HIT')\n                    hits.push(8 * y + x);\n                if (gridValue === 'MISS')\n                    misses.push(8 * y + x);\n            }\n        }\n        let numericSquidsGotten = -1;\n        for (const n of ['0', '1', '2', '3'])\n            if (squidsGotten === n || squidsGotten === Number(n))\n                numericSquidsGotten = Number(n);\n        return {hits, misses, numericSquidsGotten};\n    }\n\n    async doComputation(grid, squidsGotten) {\n        console.log('Doing computation:', squidsGotten, grid);\n        const t0 = performance.now();\n        const {hits, misses, numericSquidsGotten} = this.getGridStatistics(grid, squidsGotten);\n\n        await wasm;\n        let probabilities;\n        let gameHistoryArguments = null;\n        if (this.state.sequenceAware) {\n            gameHistoryArguments = this.makeGameHistoryArguments();\n            console.log('gameHistoryArguments:', gameHistoryArguments);\n\n            probabilities = calculate_probabilities_from_game_history(\n                Uint8Array.from(hits),\n                Uint8Array.from(misses),\n                numericSquidsGotten,\n                ...gameHistoryArguments,\n            );\n        } else {\n            probabilities = calculate_probabilities_without_sequence(\n                Uint8Array.from(hits),\n                Uint8Array.from(misses),\n                numericSquidsGotten,\n            );\n        }\n\n        if (probabilities !== undefined) {\n            let maxY = 0;\n            let maxX = 0;\n            let highestProb = -1;\n            let probs = [];\n\n            // Here we implement our L1 distance bonus heuristic.\n            // The idea is that we want to highlight a square that isn't too far from where\n            // the player last adjusted the board. (i.e. where we believe their cursor is.)\n            for (let y = 0; y < 8; y++) {\n                for (let x = 0; x < 8; x++) {\n                    probs[[x, y]] = probabilities[8 * y + x];\n                    const l1Distance = computeL1Distance(this.state.cursorBelief, [x, y]);\n                    const distancePenaltyMultiplier = 1 - 0.04 * l1Distance;\n                    const distanceAdjustedProb = probabilities[8 * y + x] * distancePenaltyMultiplier;\n                    if (grid[[x, y]] === null && distanceAdjustedProb > highestProb) {\n                        highestProb = distanceAdjustedProb;\n                        maxX = x;\n                        maxY = y;\n                    }\n                }\n            }\n            const observationProb = probabilities[64];\n            this.setState({ probs, best: highestProb > 0 ? [maxX, maxY] : null,\n                valid: true, observationProb });\n        } else {\n            this.setState({ valid: false, best: null });\n        }\n        const t1 = performance.now();\n        this.setState({lastComputationTime: t1 - t0});\n    }\n\n    copyToUndoBuffer() {\n        this.setState({undoBuffer: [\n            ...this.state.undoBuffer,\n            {grid: this.state.grid, squidsGotten: this.state.squidsGotten, cursorBelief: this.state.cursorBelief},\n        ]});\n    }\n\n    onClick(x, y, setAsHit) {\n        const grid = { ...this.state.grid };\n        let gridValue = grid[[x, y]];\n        let squidsGotten = this.state.squidsGotten;\n        this.copyToUndoBuffer();\n\n        if (this.state.mode === 'calculator') {\n            switch (gridValue) {\n                case 'MISS':\n                    gridValue = 'HIT';\n                    break;\n                case 'HIT':\n                    gridValue = null;\n                    break;\n                default:\n                    gridValue = setAsHit ? 'HIT' : 'MISS';\n                    break;\n            }\n            grid[[x, y]] = gridValue;\n        } else {\n            // Determine from the random layout.\n            if (gridValue !== null)\n                return;\n            const arrayContains = (arr) => {\n                for (const cell of arr)\n                    if (cell[0] === x && cell[1] === y)\n                        return true;\n                return false;\n            }\n            if (arrayContains([...this.state.squidLayout.squid2, ...this.state.squidLayout.squid3, ...this.state.squidLayout.squid4])) {\n                gridValue = 'HIT';\n            } else {\n                gridValue = 'MISS';\n            }\n            grid[[x, y]] = gridValue;\n            // Compute the killed squid count.\n            squidsGotten = 0;\n            for (const n of ['2', '3', '4']) {\n                const squid = this.state.squidLayout['squid' + n];\n                let killed = true;\n                for (const cell of squid)\n                    if (grid[cell] !== 'HIT')\n                        killed = false;\n                squidsGotten += killed;\n            }\n            this.setState({ squidsGotten });\n        }\n        this.setState({grid, cursorBelief: [x, y]});\n        this.doComputation(grid, squidsGotten);\n    }\n\n    clearField() {\n        const templateState = this.makeEmptyState();\n        const newState = {};\n        for (const name of ['squidLayout', 'grid', 'squidsGotten', 'undoBuffer', 'cursorBelief'])\n            newState[name] = templateState[name];\n        // The squidsGotten value of 'unknown' is banned in sequence-aware mode.\n        if (this.state.sequenceAware)\n            newState.squidsGotten = '0';\n        this.setState(newState);\n        this.doComputation(newState.grid, newState.squidsGotten);\n    }\n\n    undoLastMarking() {\n        const undoBuffer = [...this.state.undoBuffer];\n        if (undoBuffer.length === 0)\n            return;\n        const undoEntry = undoBuffer.pop();\n        this.setState({grid: undoEntry.grid, squidsGotten: undoEntry.squidsGotten, cursorBelief: undoEntry.cursorBelief, undoBuffer});\n        this.doComputation(undoEntry.grid, undoEntry.squidsGotten);\n    }\n\n    reportMiss() {\n        if (this.state.best !== null && this.state.grid[this.state.best] === null) {\n            this.onClick(...this.state.best);\n        }\n    }\n\n    reportHit() {\n        if (this.state.best !== null && this.state.grid[this.state.best] === null) {\n            this.onClick(...this.state.best, true);\n            const {hits} = this.getGridStatistics(this.state.grid, this.state.squidsGotten);\n            if (hits.length === 9) {\n                this.incrementKills();\n            }\n        }\n    }\n\n    splitTimer() {\n        const boardTimer = this.timerRef.current;\n        if (boardTimer === null)\n            return;\n        const elapsed = boardTimer.getSecondsElapsed();\n        if (!elapsed) {\n            boardTimer.toggleRunning();\n            return;\n        }\n        const newEstimates = [...this.state.timerStepEstimates,\n            boardTimer.state.invalidated ? null\n            : boardTimer.guessStepsElapsedFromTime(elapsed)];\n        this.setState({ timerStepEstimates: newEstimates });\n        console.log('Timer step estimates:', newEstimates);\n        boardTimer.setState({\n            previouslyAccumulatedSeconds: 0.0,\n            timerStartMS: performance.now(),\n            // After the first split we're no longer loading the room.\n            includesLoadingTheRoom: false,\n            includedRewardsGotten: 0,\n            timerRunning: true,\n            invalidated: false,\n        });\n        this.doComputation(this.state.grid, this.state.squidsGotten);\n    }\n\n    async incrementKills() {\n        this.copyToUndoBuffer();\n        let numericValue = this.state.squidsGotten === 'unknown' ? 0 : Number(this.state.squidsGotten);\n        let grid = this.state.grid;\n        numericValue++;\n        if (numericValue === 4) {\n            // TODO: Think very carefully about this timer splitting, and if and when it should happen.\n            const gameHistoryArguments = this.makeGameHistoryArguments();\n            this.splitTimer();\n            const success = await this.copyToHistory(gameHistoryArguments);\n            if (success) {\n                numericValue = 0;\n                grid = this.makeEmptyGrid();\n                // FIXME: Make us able to undo across completions.\n                this.setState({undoBuffer: [], cursorBelief: [0, 7]});\n            } else {\n                numericValue = 3;\n            }\n        }\n        this.setState({grid, squidsGotten: '' + numericValue});\n        this.doComputation(grid, '' + numericValue);\n    }\n\n    async copyToHistory(gameHistoryArguments) {\n        const {hits, misses, numericSquidsGotten} = this.getGridStatistics(this.state.grid, this.state.squidsGotten);\n        if (gameHistoryArguments === undefined)\n            gameHistoryArguments = this.makeGameHistoryArguments();\n        await wasm;\n        const finalBoard = disambiguate_board(\n            Uint8Array.from(hits),\n            Uint8Array.from(misses),\n            numericSquidsGotten,\n            ...gameHistoryArguments,\n        );\n        if (finalBoard === undefined) {\n            // TODO: Show a proper error message in this case!\n            return false;\n        }\n        console.log('Final board:', finalBoard);\n        const layoutString = this.boardIndexToLayoutString[finalBoard];\n        const observedBoards = gameHistoryArguments[0];\n        let fillIndex = observedBoards.length;\n        // If we're already at capacity then we have to shift the boards over.\n        if (fillIndex === this.layoutDrawingBoardRefs.length) {\n            this.shiftHistory();\n            fillIndex--;\n        }\n        this.layoutDrawingBoardRefs[fillIndex].current.setStateFromLayoutString(layoutString);\n        return true;\n    }\n\n    shiftHistory() {\n        const drawingBoards = this.layoutDrawingBoardRefs.map((ref) => ref.current);\n        for (let i = 0; i < drawingBoards.length -1; i++) {\n            drawingBoards[i].setState(drawingBoards[i + 1].state);\n        }\n        drawingBoards[drawingBoards.length - 1].clearBoard();\n    }\n\n    setStateFromLayoutString(layoutString) {\n        const grid = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                grid[[x, y]] = layoutString[x + 8 * y] !== '.' ? 'HIT'\n                               : this.state.grid[[x, y]];\n        this.setState({ grid, squidsGotten: 3 }, () => {\n            this.doComputation(grid, 3);\n        });\n    }\n\n    async killMostLikely(gameHistoryArguments) {\n        const {hits, misses, numericSquidsGotten} = this.getGridStatistics(this.state.grid, this.state.squidsGotten);\n        if (gameHistoryArguments === undefined)\n            gameHistoryArguments = this.makeGameHistoryArguments();\n        await wasm;\n        const likelyBoard = disambiguate_board(\n            Uint8Array.from(hits),\n            Uint8Array.from(misses),\n            numericSquidsGotten,\n            ...gameHistoryArguments,\n        );\n        if (likelyBoard !== undefined) {\n            this.copyToUndoBuffer();\n            const layoutString = this.boardIndexToLayoutString[likelyBoard];\n            this.setStateFromLayoutString(layoutString);\n        }\n    }\n\n    renderActualMap() {\n        return <div className=\"board\">\n            {naturalsUpTo(8).map(\n                (y) =>\n                    naturalsUpTo(8).map(\n                        (x) => <Tile\n                            key={x + ',' + y}\n                            x={x} y={y}\n                            onClick={() => this.onClick(x, y)}\n                            text={this.state.grid[[x, y]]}\n                            prob={this.state.probs[[x, y]]}\n                            valid={this.state.valid}\n                            best={this.state.best}\n                            precision={2}\n                        />\n                    )\n            )}\n        </div>;\n    }\n\n    render() {\n        let usedShots = 0;\n        let openingOptimizer = true;\n        for (let y = 0; y < 8; y++) {\n            for (let x = 0; x < 8; x++) {\n                if (this.state.grid[[x, y]] !== null) {\n                    usedShots++;\n                    if (this.state.grid[[x, y]] === 'HIT')\n                        openingOptimizer = false;\n                }\n            }\n        }\n        return <>\n            <div className=\"container\">\n                <div style={{ placeSelf: \"start end\" }}>\n                    <div id=\"infoArea\">\n                        <table>\n                            <thead><tr><th>Item</th><th>Value</th></tr></thead>\n                            <tbody>\n                                <tr><td>Shots used:</td><td>{usedShots}</td></tr>\n                                {this.state.sequenceAware === true && this.state.usingTimer && <>\n                                    <BoardTimer ref={this.timerRef} roomEnteredOffset={this.state.roomEnteredOffset} timedTickIntercept={this.state.timedTickIntercept} timedTickRate={this.state.timedTickRate}/>\n                                    <tr>\n                                        <td>Previous steps:</td>\n                                        <td>{!this.state.timerStepEstimates.length ? '-'\n                                            : this.state.timerStepEstimates.join(', ')}</td>\n                                    </tr>\n                                </>}\n                            </tbody>\n                        </table>\n                        {this.state.sequenceAware === true && this.state.usingTimer && this.state.showKeyShortcuts && <table>\n                            <thead><tr><th>Control</th><th>Shortcut</th></tr></thead>\n                            <tbody>\n                                <tr><td>Start/Split Timer</td><td>Space</td></tr>\n                                <tr><td>Add Reward</td><td>,</td></tr>\n                                <tr><td>Remove Reward</td><td>Shift+,</td></tr>\n                                <tr><td>Toggle Room Entered</td><td>m</td></tr>\n                                <tr><td>Invalidate Timer</td><td>;</td></tr>\n                                <tr><td>Reset Timer</td><td>Shift+;</td></tr>\n                                <tr><td>Pause/Resume Timer</td><td>w</td></tr>\n                            </tbody>\n                        </table>}\n                    </div>\n                    {this.state.sequenceAware === true &&\n                        this.state.usingTimer &&\n                        <div className=\"controls\">\n                            <button onClick={() => {\n                                this.setState({\n                                    showKeyShortcuts: !this.state.showKeyShortcuts\n                            })}}>\n                                Toggle Show Shortcuts\n                            </button>\n                        </div>}\n                </div>\n                {this.renderActualMap()}\n            </div>\n            {!this.state.valid && !this.state.sequenceAware &&\n                <div>Invalid configuration! This is not possible.</div>}\n            <div className=\"controls\" style={{ marginTop: '5px' }}>\n                Number of squids killed:\n                <select\n                    value={this.state.squidsGotten}\n                    onChange={(event) => {\n                        this.setState({ squidsGotten: event.target.value });\n                        this.doComputation(this.state.grid, event.target.value);\n                    }}\n                >\n                    {/* In sequence-aware mode, don't allow unknown because it's just an accident waiting to happen for a runner. */}\n                    {\n                        !this.state.sequenceAware &&\n                        <option value=\"unknown\">Unknown</option>\n                    }\n                    <option value=\"0\">0</option>\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                </select>\n            </div>\n            <div className=\"controls\">\n                <button onClick={() => { this.reportMiss(); }}>\n                    Miss (z)\n                </button>\n                <button onClick={() => { this.reportHit(); }}>\n                    Hit (x)\n                </button>\n                <button onClick={() => { this.incrementKills(); }}>\n                    Increment Kills (v)\n                </button>\n                {\n                    this.state.sequenceAware === true &&\n                    <>\n                        <button onClick={() => { this.killMostLikely(); }}>\n                            Quick Kill (k)\n                        </button>\n                        <button onClick={() => { this.shiftHistory(); }}>\n                            Shift History\n                        </button>\n                    </>\n                }\n                <button onClick={() => { this.clearField(); }}>\n                    Reset\n                </button>\n                {\n                    !this.state.sequenceAware &&\n                    <select\n                        value={this.state.mode}\n                        onChange={(event) => this.setState({\n                            mode: event.target.value\n                        })}\n                    >\n                        <option value=\"calculator\">Calculator Mode</option>\n                        <option value=\"practice\">Practice Mode</option>\n                    </select>\n                }\n            </div>\n            {openingOptimizer && this.state.mode === 'calculator' && !this.state.sequenceAware && <p>\n                Opening optimizer: Probability that this<br />pattern would get at least one hit: {\n                    this.state.valid ? toPercent(Math.max(0, 1 - this.state.observationProb), 2)\n                        : \"Invalid\"\n                }\n            </p>}\n            {this.state.sequenceAware === 'initializing' &&\n                <p>Downloading table...</p>}\n            {this.state.sequenceAware === true && <>\n                <div>\n                    {this.layoutDrawingBoardRefs.map((ref, i) =>\n                        <LayoutDrawingBoard parent={this} ref={ref} key={i}/>\n                    )}\n                </div>\n                <hr/>\n                <fieldset id=\"settings\">\n                    <legend>\n                        Gaussian RNG step count beliefs (all counts in <i>\n                        thousands</i> of steps, except {\n                            this.state.usingTimer && this.state.showAdvancedSettings &&\n                            <>\"Timed board intercept\", \"Timed board rate\", and</>\n                        } \"Room entered offset\")\n                    </legend>\n                    <div>\n                        <label htmlFor=\"firstBoardMean\">First board mean:</label>\n                        <input id=\"firstBoardMean\"\n                            value={this.state.firstBoardStepsThousands}\n                            onChange={event => this.setState({\n                                firstBoardStepsThousands: event.target.value\n                        })}/>\n                        <label htmlFor=\"firstBoardStddev\">First board stddev:</label>\n                        <input id=\"firstBoardStddev\"\n                            value={this.state.firstBoardStepsThousandsStdDev}\n                            onChange={event => this.setState({\n                                firstBoardStepsThousandsStdDev: event.target.value\n                        })}/>\n                        {(!this.state.usingTimer || this.state.showAdvancedSettings) && <>\n                            <label htmlFor=\"nextBoardMean\">\n                                {this.state.usingTimer ? <>Fallback mean:</>\n                                    : <>Next board mean:</>}\n                            </label>\n                            <input id=\"nextBoardMean\"\n                                value={this.state.nextBoardStepsThousands}\n                                onChange={event => this.setState({\n                                    nextBoardStepsThousands: event.target.value\n                            })}/>\n                            <label htmlFor=\"nextBoardStddev\">\n                                {this.state.usingTimer ? <>Fallback stddev:</>\n                                    : <>Next board stddev:</>}\n                            </label>\n                            <input id=\"nextBoardStddev\"\n                                value={this.state.nextBoardStepsThousandsStdDev}\n                                onChange={event => this.setState({\n                                    nextBoardStepsThousandsStdDev: event.target.value\n                            })}/>\n                        </>}\n                        {this.state.usingTimer && <>\n                            <label htmlFor=\"timedBoardStddev\">Timed board stddev:</label>\n                            <input id=\"timedBoardStddev\"\n                                value={this.state.timedBoardStepsThousandsStdDev}\n                                onChange={event => this.setState({\n                                    timedBoardStepsThousandsStdDev: event.target.value\n                            })}/>\n                            {this.state.showAdvancedSettings && <>\n                                <label htmlFor=\"timedBoardIntercept\">Timed board intercept:</label>\n                                <input id=\"timedBoardIntercept\"\n                                    value={this.state.timedTickIntercept}\n                                    onChange={event => this.setState({\n                                        timedTickIntercept: event.target.value\n                                })}/>\n                                <label htmlFor=\"timedBoardRate\">Timed board rate:</label>\n                                <input id=\"timedBoardRate\"\n                                    value={this.state.timedTickRate}\n                                    onChange={event => this.setState({\n                                        timedTickRate: event.target.value\n                                })}/>\n                            </>}\n                            <label htmlFor=\"roomEnteredOffset\">Room entered offset:</label>\n                            <input id=\"roomEnteredOffset\"\n                                value={this.state.roomEnteredOffset}\n                                onChange={event => this.setState({\n                                    roomEnteredOffset: event.target.value\n                            })}/>\n                        </>}\n                    </div>\n                </fieldset>\n\n                <div className=\"controls\">\n                    <label>\n                        <input type=\"checkbox\"\n                            checked={this.state.usingTimer}\n                            onChange={(event) => this.setState({\n                                usingTimer: !this.state.usingTimer\n                        })} />\n                        Use timer\n                    </label>\n                    <label>\n                        <input type=\"checkbox\"\n                            disabled={!this.state.usingTimer}\n                            checked={this.state.showAdvancedSettings}\n                            onChange={(event) => this.setState({\n                                showAdvancedSettings: !this.state.showAdvancedSettings\n                        })} />\n                        Show advanced settings\n                    </label>\n                </div>\n\n                <div className=\"controls\">\n                    <button onClick={() => { this.saveConfigParams(); }}>\n                        Save Settings\n                    </button>\n                    <button onClick={() => { this.factoryResetConfigParams(); }}>\n                        Reset to Defaults\n                    </button>\n                </div>\n\n                <div style={{\n                    margin: '5px',\n                    border: '2px solid white',\n                    borderRadius: '8px',\n                    width: '400px',\n                    minHeight: '20px',\n                    display: 'inline-block'\n                }}>\n                    {this.state.potentialMatches.map((match, i) => {\n                        if (match[0] === null) {\n                            return <div key={0}>No Matches Found!</div>\n                        }\n                        else {\n                            const diffs = match.slice(1);\n                            return <div key={i}>\n                                Potential match: {match[0]}{diffs.map((x, i) => <> +{x - match[i]}</>)}\n                            </div>;\n                        }\n                    })}\n                </div>\n                <div className=\"controls\">\n                    <button onClick={() => {\n                        this.recomputePotentialMatches();\n                    }}>Find Match Indices</button>\n                </div>\n            </>}\n            {!this.state.sequenceAware && <fieldset id=\"sequenceConfig\"\n                onChange={(event) => { this.tableSize = event.target.value; }}\n            >\n                <legend>Sequence-Aware Mode</legend>\n                <div>\n                    <label>\n                        <input type=\"radio\" name=\"tableSize\" value=\"500k\" />\n                        Small table (500 thousand values, 2 MB)\n                    </label>\n                </div>\n                <div>\n                    <label>\n                        <input type=\"radio\" name=\"tableSize\" value=\"5M\" />\n                        Medium table (5 million values, 20 MB)\n                    </label>\n                </div>\n                <div>\n                    <label>\n                        <input type=\"radio\" name=\"tableSize\" value=\"25M\" defaultChecked />\n                        Large table (25 million values, 100 MB)\n                    </label>\n                </div>\n                <button onClick={() => { this.loadSequenceTable(); }}>\n                    Initialize\n                </button>\n            </fieldset>}\n\n            <p>\n                Last recompute time:&nbsp;\n                {this.state.lastComputationTime.toFixed(2)}ms\n            </p>\n        </>;\n    }\n}\n\nfunction globalShortcutsHandler(evt) {\n    // Check if the target is an input field that should take precedence over shortcuts.\n    if (evt.target && 'getAttribute' in evt.target && evt.target.getAttribute('data-stop-shortcuts'))\n        return;\n\n    if (evt.ctrlKey) {\n        if (globalMap !== null && evt.key.toLowerCase() === 'z') {\n            globalMap.undoLastMarking();\n        }\n    }\n    else {\n        if (globalMap !== null) {\n            // Support z or y for German keyboards.\n            if (evt.code === 'KeyZ')\n                globalMap.reportMiss();\n            if (evt.code === 'KeyX')\n                globalMap.reportHit();\n            if (evt.code === 'KeyV')\n                globalMap.incrementKills();\n            if (evt.code === 'Space') {\n                globalMap.splitTimer();\n                evt.preventDefault();\n            }\n            if (evt.code === 'KeyK')\n                globalMap.killMostLikely();\n        }\n        if (globalBoardTimer !== null) {\n            if (evt.code === 'KeyW')\n                globalBoardTimer.toggleRunning();\n            if (evt.code === 'Comma')\n                if (!evt.shiftKey)\n                    globalBoardTimer.adjustRewards(+1);\n                else\n                    globalBoardTimer.adjustRewards(-1);\n            if (evt.code === 'KeyM')\n                globalBoardTimer.toggleLoadingTheRoom();\n            if (evt.code === 'Semicolon')\n                if (!evt.shiftKey)\n                    globalBoardTimer.toggleInvalidated();\n                else\n                    globalBoardTimer.resetTimer();\n        }\n    }\n}\n\ndocument.addEventListener('keydown', globalShortcutsHandler);\n\nclass App extends React.Component {\n    render() {\n        return <>\n            <h1>Sploosh Kaboom Probability Calculator</h1>\n            <p style={{ marginLeft: 'auto', marginRight: 'auto', maxWidth: '600px' }}>\n                This is a tool for computing the likely locations of squids in the sploosh kaboom minigame of The Legend of Zelda: The Wind Waker (both SD and HD versions).\n                Unfortunately it's currently pretty complicated to use correctly.\n                A collection of tutorials will be compiled at some point, hopefully soon.\n                For now, see the <a href=\"https://github.com/Amphitryon0/web-sploosh-kaboom\">GitHub repository</a>.\n            </p>\n            <MainMap />\n            <p>\n                Made by Peter Schmidt-Nielsen, CryZe, csunday95, and Amphitryon\n                ({VERSION_STRING})\n            </p>\n        </>;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}