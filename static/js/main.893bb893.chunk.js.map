{"version":3,"sources":["wasm/sploosh_wasm.js","App.js","serviceWorker.js","index.js"],"names":["wasm","cachegetUint8Memory0","WASM_VECTOR_LEN","passArray8ToWasm0","arg","malloc","ptr","length","buffer","memory","Uint8Array","set","cachegetUint32Memory0","passArray32ToWasm0","Uint32Array","cachegetFloat64Memory0","getFloat64Memory0","Float64Array","passArrayF64ToWasm0","cachegetInt32Memory0","getInt32Memory0","Int32Array","getArrayF64FromWasm0","len","subarray","calculate_probabilities_without_sequence","hits","misses","squids_gotten","ptr0","__wbindgen_malloc","len0","ptr1","len1","v2","r0","r1","slice","__wbindgen_free","calculate_probabilities_from_game_history","observed_boards","prior_steps_from_previous_means","prior_steps_from_previous_stddevs","ptr2","len2","ptr3","len3","ptr4","len4","v5","disambiguate_board","undefined","set_board_table","board_table","load","module","imports","a","Response","WebAssembly","instantiateStreaming","headers","get","console","warn","arrayBuffer","bytes","instantiate","instance","Instance","init","input","Request","URL","fetch","exports","__wbindgen_wasm_module","interpolate","require","globalDB","indexedDBreq","window","indexedDB","open","dbWrite","key","value","transaction","onerror","event","alert","objectStore","add","dbRead","Promise","resolve","reject","request","onsuccess","target","result","toPercent","precision","toFixed","errorCode","onupgradeneeded","createObjectStore","colormap","naturalsUpTo","n","Array","keys","Tile","isBest","this","props","best","x","y","backgroundColor","text","prob","className","style","border","valid","outline","zIndex","opacity","onClick","React","Component","process","globalMap","dbCachedFetch","url","callback","cacheMiss","req","XMLHttpRequest","responseType","onload","evt","response","send","catch","makeBoardIndicesTable","actuallyMakeBoardIndicesTable","descs","direction","push","allBoards","boardIndices","placeSquid","board","desc","i","fill","squid2","squid3","squid4","count","from","index","map","join","generateRandomChar","base58","array","crypto","getRandomValues","generateRandomToken","SPYWARE_HOST","globalSpyware","globalSpywareCounter","sendSpywareEvent","eventData","state","loggedIn","sequenceAware","usingTimer","spywareMode","timestamp","Date","getTime","body","JSON","stringify","username","token","session","events","method","setState","charsSent","ok","errors","SpywareModeConfiguration","localStorage","getItem","setItem","defaultUsername","json","log","success","kind","version","tableSize","margin","padding","borderRadius","width","fontFamily","marginLeft","onLogout","data-stop-shortcuts","onChange","onLogin","marginRight","href","color","sampleSquid","Math","round","random","cells","cell","newXY","LayoutDrawingBoard","grid","makeEmptyGrid","selectedCell","changeMade","dx","dy","countsBySquid","2","3","4","layoutString","getLayoutString","boardIndex","parent","isSelectedCell","globalBoardTimer","setInterval","forceUpdate","BoardTimer","previouslyAccumulatedSeconds","timerStartMS","timerRunning","includesLoadingTheRoom","includedRewardsGotten","invalidated","now","performance","elapsed","oldState","delta","max","min","timerStepEstimates","total","timeDeltaSeconds","prediction","Number","timedTickIntercept","timedTickRate","roomEnteredOffset","getSecondsElapsed","guessStepsElapsedFromTime","defaultConfigurationParams","firstBoardStepsThousands","firstBoardStepsThousandsStdDev","nextBoardStepsThousands","nextBoardStepsThousandsStdDev","timedBoardStepsThousandsStdDev","showAdvancedSettings","MainMap","layoutDrawingBoardRefs","createRef","timerRef","makeEmptyState","doComputation","squidsGotten","probs","mode","squidLayout","layout","hitLocations","candidate","isAdmissible","generateLayout","undoBuffer","cursorBelief","observationProb","lastComputationTime","showKeyShortcuts","potentialMatches","savedSettings","parse","Object","name","configParams","settings","getConfigParams","boardIndexToLayoutString","buf","boardTable","v","clearField","observedBoards","startIndex","scanRange","soughtBoard","indexMax","findMatchingLocations","subResult","makeGameHistoryArguments","matches","match","rawObservedBoards","ref","current","ob","means","stds","estimates","lastEstimate","timedStd","gridValue","numericSquidsGotten","t0","getGridStatistics","gameHistoryArguments","probabilities","maxY","maxX","highestProb","p1","p2","l1Distance","abs","distancePenaltyMultiplier","distanceAdjustedProb","t1","oldValid","didWeConcludeTheSituationWasValid","computationTime","setAsHit","copyToUndoBuffer","arr","arrayContains","squid","killed","templateState","newState","undoEntry","pop","oldGrid","incrementKills","boardTimer","newEstimates","toggleRunning","numericValue","splitTimer","copyToHistory","newGrid","newNumericValue","finalBoard","fillIndex","shiftHistory","setStateFromLayoutString","drawingBoards","clearBoard","likelyBoard","usedShots","openingOptimizer","placeSelf","id","renderActualMap","marginTop","reportMiss","reportHit","killMostLikely","htmlFor","type","checked","disabled","saveConfigParams","factoryResetConfigParams","minHeight","display","diffs","recomputePotentialMatches","defaultChecked","loadSequenceTable","document","addEventListener","getAttribute","ctrlKey","toLowerCase","undoLastMarking","code","preventDefault","shiftKey","adjustRewards","toggleLoadingTheRoom","resetTimer","toggleInvalidated","App","maxWidth","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.893bb893.chunk.js","sourcesContent":["\nlet wasm;\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\n\nfunction passArray32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4);\n    getUint32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetFloat64Memory0 = null;\nfunction getFloat64Memory0() {\n    if (cachegetFloat64Memory0 === null || cachegetFloat64Memory0.buffer !== wasm.memory.buffer) {\n        cachegetFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachegetFloat64Memory0;\n}\n\nfunction passArrayF64ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 8);\n    getFloat64Memory0().set(arg, ptr / 8);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction getArrayF64FromWasm0(ptr, len) {\n    return getFloat64Memory0().subarray(ptr / 8, ptr / 8 + len);\n}\n/**\n* @param {Uint8Array} hits\n* @param {Uint8Array} misses\n* @param {number} squids_gotten\n* @returns {Float64Array | undefined}\n*/\nexport function calculate_probabilities_without_sequence(hits, misses, squids_gotten) {\n    var ptr0 = passArray8ToWasm0(hits, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(misses, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    wasm.calculate_probabilities_without_sequence(8, ptr0, len0, ptr1, len1, squids_gotten);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    let v2;\n    if (r0 !== 0) {\n        v2 = getArrayF64FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 8);\n    }\n    return v2;\n}\n\n/**\n* @param {Uint8Array} hits\n* @param {Uint8Array} misses\n* @param {number} squids_gotten\n* @param {Uint32Array} observed_boards\n* @param {Uint32Array} prior_steps_from_previous_means\n* @param {Float64Array} prior_steps_from_previous_stddevs\n* @returns {Float64Array | undefined}\n*/\nexport function calculate_probabilities_from_game_history(hits, misses, squids_gotten, observed_boards, prior_steps_from_previous_means, prior_steps_from_previous_stddevs) {\n    var ptr0 = passArray8ToWasm0(hits, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(misses, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passArray32ToWasm0(observed_boards, wasm.__wbindgen_malloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passArray32ToWasm0(prior_steps_from_previous_means, wasm.__wbindgen_malloc);\n    var len3 = WASM_VECTOR_LEN;\n    var ptr4 = passArrayF64ToWasm0(prior_steps_from_previous_stddevs, wasm.__wbindgen_malloc);\n    var len4 = WASM_VECTOR_LEN;\n    wasm.calculate_probabilities_from_game_history(8, ptr0, len0, ptr1, len1, squids_gotten, ptr2, len2, ptr3, len3, ptr4, len4);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    let v5;\n    if (r0 !== 0) {\n        v5 = getArrayF64FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 8);\n    }\n    return v5;\n}\n\n/**\n* @param {Uint8Array} hits\n* @param {Uint8Array} misses\n* @param {number} squids_gotten\n* @param {Uint32Array} observed_boards\n* @param {Uint32Array} prior_steps_from_previous_means\n* @param {Float64Array} prior_steps_from_previous_stddevs\n* @returns {number | undefined}\n*/\nexport function disambiguate_board(hits, misses, squids_gotten, observed_boards, prior_steps_from_previous_means, prior_steps_from_previous_stddevs) {\n    var ptr0 = passArray8ToWasm0(hits, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(misses, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passArray32ToWasm0(observed_boards, wasm.__wbindgen_malloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passArray32ToWasm0(prior_steps_from_previous_means, wasm.__wbindgen_malloc);\n    var len3 = WASM_VECTOR_LEN;\n    var ptr4 = passArrayF64ToWasm0(prior_steps_from_previous_stddevs, wasm.__wbindgen_malloc);\n    var len4 = WASM_VECTOR_LEN;\n    wasm.disambiguate_board(8, ptr0, len0, ptr1, len1, squids_gotten, ptr2, len2, ptr3, len3, ptr4, len4);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    return r0 === 0 ? undefined : r1 >>> 0;\n}\n\n/**\n* @param {Uint32Array} board_table\n*/\nexport function set_board_table(board_table) {\n    var ptr0 = passArray32ToWasm0(board_table, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.set_board_table(ptr0, len0);\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') !== 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nasync function init(input) {\n    //if (typeof input === 'undefined') {\n    //    input = import.meta.url.replace(/\\.js$/, '_bg.wasm');\n    //}\n    const imports = {};\n\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    const { instance, module } = await load(await input, imports);\n\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n\n    return wasm;\n}\n\nexport default init;\n\n","import React from 'react';\nimport './App.css';\nimport init, {\n    set_board_table,\n    calculate_probabilities_without_sequence,\n    calculate_probabilities_from_game_history,\n    disambiguate_board,\n} from './wasm/sploosh_wasm.js';\nconst interpolate = require('color-interpolate');\n\nconst VERSION_STRING = 'v0.1.0-beta.7';\n\nvar globalDB = null;\nconst indexedDBreq = window.indexedDB.open('splooshkaboom', 1);\nindexedDBreq.onerror = function(event) {\n    alert('Failed to access IndexedDB.');\n};\n// Known issue: There's basically a race condition here in that I don't\n// wait for this onsuccess to potentially start calling dbRead.\nindexedDBreq.onsuccess = function(event) {\n    globalDB = event.target.result;\n    globalDB.onerror = function(event) {\n        alert('IndexedDB error: ' + event.target.errorCode);\n    };\n};\nindexedDBreq.onupgradeneeded = function(event) {\n    const db = event.target.result;\n    db.createObjectStore('sk');\n}\n\n// TODO: Am I using IndexedDB even remotely correctly!? This looks so weird...\n// Do I not have to somehow end or commit the transactions!?\n\nfunction dbWrite(key, value) {\n    if (globalDB === null)\n        return;\n\n    const transaction = globalDB.transaction(['sk'], 'readwrite');\n\n    transaction.onerror = function(event) {\n        alert('Transaction error!');\n    }\n    transaction.objectStore('sk').add(value, key);\n}\n\nfunction dbRead(key) {\n    return new Promise((resolve, reject) => {\n        const transaction = globalDB.transaction(['sk']);\n\n        transaction.onerror = function(event) {\n            alert('Transaction error!');\n        }\n        const objectStore = transaction.objectStore('sk');\n        const request = objectStore.get(key);\n        request.onsuccess = function(event) {\n            resolve(event.target.result);\n        };\n        request.onerror = function(event) {\n            reject();\n        };\n    });\n}\n\nfunction toPercent(value, precision) {\n    return (value * 100).toFixed(precision) + '%';\n}\n\n// .        . . . .\n// 0123456789abcdef\nconst colormap = interpolate(['#004', '#070', '#090', '#0b0', '#0d0', '#0f0', '#6f6']);\nconst naturalsUpTo = (n) => [...Array(n).keys()];\n\nclass Tile extends React.Component {\n    render() {\n        const isBest = this.props.best !== null && this.props.best[0] === this.props.x && this.props.best[1] === this.props.y;\n\n        let backgroundColor = this.props.backgroundColor;\n        if (backgroundColor === undefined) {\n            backgroundColor = this.props.text === null ? colormap(this.props.prob) : (\n                this.props.text === 'HIT' ? '#a2a' : '#44a'\n            );\n        }\n\n        return <div className=\"boardTile\"\n            key={this.props.x + ',' + this.props.y}\n            style={{\n                border: this.props.valid ? '1px solid grey' : '1px solid red',\n                outline: isBest ? '2px solid yellow' : '',\n                zIndex: isBest ? 1 : 0,\n                opacity: this.props.opacity,\n                backgroundColor,\n            }}\n            onClick={this.props.onClick}\n        >\n            {this.props.text === '.' ? ''\n                : this.props.text ?? toPercent(this.props.prob, this.props.precision)}\n        </div>;\n    }\n}\n\nlet wasm = init(process.env.PUBLIC_URL + \"/sploosh_wasm_bg.wasm\");\n\n// Super ugly, please forgive me. :(\nvar globalMap = null;\n\nasync function dbCachedFetch(url, callback) {\n    function cacheMiss() {\n        const req = new XMLHttpRequest();\n        req.open('GET', process.env.PUBLIC_URL + url, true);\n        req.responseType = 'arraybuffer';\n        req.onload = (evt) => {\n            dbWrite(url, req.response);\n            callback(req.response);\n        };\n        req.send();\n        return null;\n    }\n    const result = await dbRead(url).catch(cacheMiss);\n    if (result === undefined) {\n        cacheMiss();\n        return;\n    }\n    // This is sort of an ugly protocol, but if we hit the catch path above\n    // we signal that the callback was already called by returning null.\n    if (result === null)\n        return;\n    callback(result);\n}\n\nasync function makeBoardIndicesTable() {\n    function cacheMiss() {\n        const result = actuallyMakeBoardIndicesTable();\n        dbWrite('boardIndicesTable', result);\n        return result;\n    }\n    const result = await dbRead('boardIndicesTable').catch(cacheMiss);\n    if (result === undefined)\n        return cacheMiss();\n    return result;\n}\n\nfunction actuallyMakeBoardIndicesTable() {\n    // This convention here has to match that in the Rust component and table building C++ exactly!\n    const descs = [];\n    for (let y = 0; y < 8; y++)\n        for (let x = 0; x < 8; x++)\n            for (const direction of [false, true])\n                descs.push({x, y, direction});\n    const allBoards = [];\n    const boardIndices = {};\n    function placeSquid(board, desc, length) {\n        for (let i = 0; i < length; i++) {\n            let {x, y} = desc;\n            if (desc.direction)\n                x += i;\n            else\n                y += i;\n            const index = x + 8 * y;\n            if (x >= 8 || y >= 8)\n                return;\n            board[index] = length;\n        }\n    }\n    const board = new Array(64).fill(0);\n\n    for (const squid2 of descs) {\n        for (const squid3 of descs) {\n            for (const squid4 of descs) {\n                board.fill(0);\n                placeSquid(board, squid2, 2);\n                placeSquid(board, squid3, 3);\n                placeSquid(board, squid4, 4);\n                let count = 0;\n                for (const entry of board)\n                    count += entry\n                if (count !== 2*2 + 3*3 + 4*4)\n                    continue;\n                allBoards.push(Array.from(board));\n            }\n        }\n    }\n    let index = 0;\n    for (const board of allBoards) {\n        boardIndices[board.map((i) => i === 0 ? '.' : i).join('')] = index;\n        index++;\n    }\n    return boardIndices;\n}\n\nfunction generateRandomChar() {\n    const base58 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n    const array = new Uint8Array(1);\n    while (true) {\n        crypto.getRandomValues(array);\n        const index = array[0] & 63;\n        if (index < base58.length)\n            return base58[index];\n    }\n}\n\nfunction generateRandomToken(n) {\n    let result = '';\n    for (let i = 0; i < n; i++)\n        result += generateRandomChar();\n    return result;\n}\n\n// Ugh, maybe later I'll give it a proper domain, and move over to https.\nconst SPYWARE_HOST = 'http://skphonehome.peter.website:1234';\n\nvar globalSpyware = null;\nvar globalSpywareCounter = -1;\n\n// To anyone reading this:\n// I chose the name \"spyware\" to be silly — this is a completely optional opt-in feature to send usage data for analysis.\n// You have to actually explicitly enable the spyware with a checkbox in the GUI, and there's an explanation.\nasync function sendSpywareEvent(eventData) {\n    if (globalSpyware === null || globalMap === null)\n        return;\n    if (!globalSpyware.state.loggedIn)\n        return;\n    if (!globalMap.state.sequenceAware || !globalMap.state.usingTimer)\n        return;\n    if (!globalMap.state.spywareMode)\n        return;\n    eventData.timestamp = (new Date()).getTime() / 1000;\n    globalSpywareCounter++;\n    const body = JSON.stringify({\n        username: globalSpyware.state.username,\n        token: globalSpyware.state.token,\n        session: globalSpyware.session,\n        events: {\n            [globalSpywareCounter]: eventData,\n        },\n    });\n    const response = await fetch(SPYWARE_HOST + '/write', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body,\n    });\n    globalSpyware.setState({charsSent: globalSpyware.state.charsSent + body.length});\n    if (!response.ok)\n        globalSpyware.setState({errors: true});\n}\n\nclass SpywareModeConfiguration extends React.Component {\n    constructor() {\n        super();\n        globalSpyware = this;\n        this.session = generateRandomToken(16);\n        let token = localStorage.getItem('SKToken');\n        if (token === null) {\n            token = generateRandomToken(8);\n            localStorage.setItem('SKToken', token);\n        }\n        let defaultUsername = localStorage.getItem('SKUsername');\n        this.state = {\n            username: defaultUsername === null ? '' : defaultUsername,\n            token,\n            loggedIn: false,\n            errors: false,\n            charsSent: false,\n        };\n    }\n\n    async onLogin() {\n        const username = this.state.username;\n        if (username === '') {\n            alert('Username must be non-empty');\n            return;\n        }\n        const response = await fetch(SPYWARE_HOST + '/login', {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n                'username': username,\n                'token': this.state.token,\n            }),\n        });\n        const result = await response.json();\n        console.log('Login:', result);\n        if (result.success) {\n            // Stash the username when we successfully log in, as a convenience for the user.\n            localStorage.setItem('SKUsername', username);\n            this.setState({loggedIn: true}, () => {\n                sendSpywareEvent({\n                    kind: 'login',\n                    version: VERSION_STRING,\n                    tableSize: globalMap === null ? null : globalMap.tableSize,\n                });\n            });\n        } else {\n            alert('Bad token! This username might already be taken. If you need to recover your login token contact Peter Schmidt-Nielsen.');\n        }\n    }\n\n    async onLogout() {\n        this.setState({loggedIn: false});\n    }\n\n    render() {\n        return <div style={{\n            margin: '10px auto',\n            padding: '10px',\n            border: '2px solid white',\n            borderRadius: '8px',\n            width: '450px',\n            backgroundColor: this.state.loggedIn ? '#696' : '#777',\n        }}>\n            <div>Spyware Mode:</div>\n            {\n                this.state.loggedIn ?\n                    <>\n                        <div>\n                            Logged in as: <span style={{fontFamily: 'monospace'}}>{this.state.username}</span>\n                            <button style={{marginLeft: '20px'}} onClick={() => this.onLogout()}>Logout</button>\n                        </div>\n                        <div>\n                            Events sent: {globalSpywareCounter + 1}\n                            Chars sent: {this.state.charsSent}\n                        </div>\n                    </> : <>\n                        Username: <input data-stop-shortcuts style={{width: '100px', fontFamily: 'monospace'}} value={this.state.username} onChange={event => this.setState({username: event.target.value})}/>\n                        <button style={{marginLeft: '20px'}} onClick={() => this.onLogin()}>Login</button>\n                    </>\n            }\n            <details>\n                <summary>Access Token</summary>\n                Token: <input data-stop-shortcuts style={{width: '120px', marginRight: '20px'}} value={this.state.token} onChange={event => this.setState({token: event.target.value})}/>\n                <button onClick={() => { localStorage.setItem('SKToken', this.state.token); }}>Update Saved Token</button>\n                <p>\n                    The above token is generated just for you.\n                    Anyone who has the above token can submit data that will appear on the stats page for your username (so I recommend not showing it on stream).\n                    If you lose access to it you'll have to pick a new username, or ask <a href=\"mailto:schmidtnielsenpeter@gmail.com\">Peter Schmidt-Nielsen</a> to help you recover your access token.\n                    The token is automatically saved between sessions, but might be lost if you clear all your browser history.\n                    I recommend copying this token down somewhere.\n                </p>\n            </details>\n            {this.state.errors && <span style={{ color: 'red' }}>\n                Spyware reporting error!\n            </span>}\n        </div>;\n    }\n}\n\nfunction sampleSquid(length) {\n    const x = Math.round(Math.random() * 8);\n    const y = Math.round(Math.random() * 8);\n    const direction = Math.random() < 0.5;\n    const cells = [[x, y]];\n    for (let i = 0; i < length - 1; i++) {\n        const cell = cells[cells.length - 1];\n        const newXY = direction ? [cell[0] + 1, cell[1]] : [cell[0], cell[1] + 1];\n        cells.push(newXY);\n    }\n    return cells;\n}\n\nfunction generateLayout() {\n    const layout = {};\n    const hitLocations = {};\n    for (const n of [2, 3, 4]) {\n        while (true) {\n            const candidate = sampleSquid(n);\n            let isAdmissible = true;\n            for (const cell of candidate)\n                if (cell[0] > 7 || cell[1] > 7 || hitLocations[cell] === true)\n                    isAdmissible = false;\n            if (isAdmissible) {\n                layout['squid' + n] = candidate;\n                for (const cell of candidate)\n                    hitLocations[cell] = true;\n                break;\n            }\n        }\n    }\n    return layout;\n}\n\nclass LayoutDrawingBoard extends React.Component {\n    constructor() {\n        super();\n        this.state = { grid: this.makeEmptyGrid(), selectedCell: null };\n    }\n\n    makeEmptyGrid() {\n        const grid = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                grid[[x, y]] = '.';\n        return grid;\n    }\n\n    clearBoard() {\n        this.setState({ grid: this.makeEmptyGrid(), selectedCell: null });\n    }\n\n    onClick(x, y) {\n        if (this.state.selectedCell === null) {\n            this.setState({ selectedCell: [x, y] });\n            return;\n        }\n        const grid = {...this.state.grid};\n        let changeMade = false;\n        for (const length of [2, 3, 4]) {\n            for (const [dx, dy] of [[+1, 0], [0, +1], [-1, 0], [0, -1]]) {\n                if (this.state.selectedCell[0] === x + dx * (length - 1) && this.state.selectedCell[1] === y + dy * (length - 1)) {\n                    // If this squid appears anywhere else, obliterate it.\n                    for (let y = 0; y < 8; y++)\n                        for (let x = 0; x < 8; x++)\n                            if (grid[[x, y]] === '' + length)\n                                grid[[x, y]] = '.';\n                    // Fill in the squid here.\n                    for (let i = 0; i < length; i++)\n                        grid[[x + i * dx, y + i * dy]] = '' + length;\n                    changeMade = true;\n                }\n            }\n        }\n        // If any squid has the wrong count, then totally eliminate it.\n        const countsBySquid = {2: 0, 3: 0, 4: 0, '.': 0};\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                countsBySquid[grid[[x, y]]]++;\n        for (const length of [2, 3, 4])\n            if (countsBySquid[length] !== length)\n                for (let y = 0; y < 8; y++)\n                    for (let x = 0; x < 8; x++)\n                        if (grid[[x, y]] === '' + length)\n                            grid[[x, y]] = '.';\n        if (changeMade)\n            this.setState({ grid });\n        this.setState({ selectedCell: null });\n    }\n\n    getLayoutString() {\n        // Quadratic time, but who cares?\n        let layoutString = '';\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                layoutString += this.state.grid[[x, y]];\n        return layoutString;\n    }\n\n    setStateFromLayoutString(layoutString) {\n        const grid = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                grid[[x, y]] = layoutString[x + 8 * y];\n        this.setState({grid});\n    }\n\n    render() {\n        const layoutString = this.getLayoutString();\n        let boardIndex = this.props.parent.boardIndices[layoutString];\n        if (boardIndex === undefined) {\n            boardIndex = \"waiting...\";\n        }\n        const isSelectedCell = (x, y) => this.state.selectedCell !== null && x === this.state.selectedCell[0] && y === this.state.selectedCell[1];\n\n        return <div className=\"board historyBoard\">\n            {naturalsUpTo(8).map(\n                (y) =>\n                    naturalsUpTo(8).map(\n                        (x) => <Tile\n                            key={x + ',' + y}\n                            x={x} y={y}\n                            onClick={() => this.onClick(x, y)}\n                            text={this.state.grid[[x, y]]}\n                            valid={true}\n                            best={this.state.selectedCell}\n                            opacity={isSelectedCell(x, y) || this.state.grid[[x, y]] !== '.' ? 0.6 : 0.2}\n                            backgroundColor={this.state.grid[[x, y]] === '.' ? undefined : 'green'}\n                        />\n                    )\n            )}\n        </div>;\n    }\n}\n\nvar globalBoardTimer = null;\n\nsetInterval(\n    () => {\n        if (globalBoardTimer !== null)\n            globalBoardTimer.forceUpdate();\n    },\n    69,\n);\n\nfunction renderYesNo(bool) {\n    return bool ?\n        <span className=\"boolText\" style={{ color: 'green' }}>Yes</span> :\n        <span className=\"boolText\" style={{ color: 'red' }}>No</span>;\n}\n\nclass BoardTimer extends React.Component {\n    constructor() {\n        super();\n        globalBoardTimer = this;\n        this.state = {\n            previouslyAccumulatedSeconds: 0.0,\n            timerStartMS: 0.0,\n            timerRunning: false,\n            includesLoadingTheRoom: true,\n            includedRewardsGotten: 0,\n            invalidated: false,\n        };\n    }\n\n    toggleRunning() {\n        const now = performance.now();\n        const elapsed = 1e-3 * (now - this.state.timerStartMS);\n        sendSpywareEvent({kind: 'timer_toggleRunning', elapsed, oldState: this.state});\n        if (this.state.timerRunning)\n            this.setState({previouslyAccumulatedSeconds: this.state.previouslyAccumulatedSeconds + elapsed});\n        this.setState({timerRunning: !this.state.timerRunning, timerStartMS: now});\n    }\n\n    adjustRewards(delta) {\n        sendSpywareEvent({kind: 'timer_adjustRewards', delta, oldState: this.state});\n        this.setState({includedRewardsGotten: Math.max(0, Math.min(2, this.state.includedRewardsGotten + delta))});\n    }\n\n    toggleLoadingTheRoom() {\n        sendSpywareEvent({kind: 'timer_toggleLoadingTheRoom', oldState: this.state});\n        this.setState({includesLoadingTheRoom: !this.state.includesLoadingTheRoom});\n    }\n\n    toggleInvalidated() {\n        sendSpywareEvent({kind: 'timer_toggleInvalidated', oldState: this.state});\n        this.setState({invalidated: !this.state.invalidated});\n    }\n\n    resetTimer() {\n        sendSpywareEvent({kind: 'timer_resetTimer', oldState: this.state});\n        this.setState({\n            previouslyAccumulatedSeconds: 0.0,\n            timerStartMS: performance.now(),\n            timerRunning: false,\n            includesLoadingTheRoom: true,\n            includedRewardsGotten: 0,\n            invalidated: false,\n        });\n        globalMap.setState({\n            timerStepEstimates: [],\n        });\n    }\n\n    getSecondsElapsed() {\n        let total = this.state.previouslyAccumulatedSeconds;\n        if (this.state.timerRunning) {\n            const now = performance.now();\n            total += 1e-3 * (now - this.state.timerStartMS);\n        }\n        return total;\n    }\n\n    guessStepsElapsedFromTime(timeDeltaSeconds) {\n        // I did some linear regressions from real HD Italian runs. I'll put some data up at some point.\n        let prediction = Number(this.props.timedTickIntercept) + Number(this.props.timedTickRate) * timeDeltaSeconds;\n        if (this.state.includesLoadingTheRoom)\n            prediction += -940 + Number(this.props.roomEnteredOffset);\n        prediction += this.state.includedRewardsGotten * 760;\n        return Math.round(prediction);\n    }\n\n    render() {\n        const elapsed = this.getSecondsElapsed();\n        if (this.state.invalidated)\n            return <tr>\n                <td><b>Timer</b></td>\n                <td><b>Invalidated</b></td>\n            </tr>;\n        return <>\n            <tr>\n                <td>Seconds elapsed:</td>\n                <td>{elapsed.toFixed(2)}</td>\n            </tr>\n            <tr>\n                <td>Steps:</td>\n                <td>{this.guessStepsElapsedFromTime(elapsed)}</td>\n            </tr>\n            <tr>\n                <td>Entered room:</td>\n                <td>{renderYesNo(this.state.includesLoadingTheRoom)}</td>\n            </tr>\n            <tr>\n                <td>Rewards gotten:</td>\n                <td>{this.state.includedRewardsGotten}</td>\n            </tr>\n        </>;\n    }\n}\n\nfunction computeL1Distance(p1, p2) {\n    return Math.abs(p1[0] - p2[0]) + Math.abs(p1[1] - p2[1]);\n}\n\nconst defaultConfigurationParams = {\n    firstBoardStepsThousands: 500,\n    firstBoardStepsThousandsStdDev: 500,\n    nextBoardStepsThousands: 7,\n    nextBoardStepsThousandsStdDev: 3,\n    timedBoardStepsThousandsStdDev: 0.2,\n    timedTickIntercept: 300,\n    timedTickRate: 252,\n    roomEnteredOffset: 0,\n    usingTimer: true,\n    spywareMode: false,\n    showAdvancedSettings: false,\n};\n\nclass MainMap extends React.Component {\n    layoutDrawingBoardRefs = [React.createRef(), React.createRef(), React.createRef()];\n    timerRef = React.createRef();\n\n    constructor() {\n        super();\n        this.state = this.makeEmptyState();\n        this.tableSize = \"25M\";\n        globalMap = this;\n    }\n\n    componentDidMount() {\n        this.doComputation(this.state.grid, this.state.squidsGotten);\n    }\n\n    makeEmptyGrid() {\n        const grid = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                grid[[x, y]] = null;\n        return grid;\n    }\n\n    makeEmptyState() {\n        const probs = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                probs[[x, y]] = 0.0;\n        // Select a particular layout, for practice mode.\n        const squidLayout = generateLayout();\n        const state = {\n            mode: 'calculator',\n            squidLayout,\n            grid: this.makeEmptyGrid(),\n            squidsGotten: 'unknown',\n            undoBuffer: [],\n            probs,\n            best: [3, 4],\n            cursorBelief: [0, 7],\n            valid: true,\n            observationProb: 1.0,\n            lastComputationTime: -1,\n\n            sequenceAware: false,\n            usingTimer: false,\n            showKeyShortcuts: false,\n            spywareMode: false,\n\n            timerStepEstimates: [],\n\n            potentialMatches: [],\n        };\n        // Load relevant configuration from localStorage.\n        let savedSettings = localStorage.getItem('SKSettings');\n        if (savedSettings === null) {\n            savedSettings = defaultConfigurationParams;\n        } else {\n            // if saved configuration from previous version, use defaults for \n            // any new parameters\n            savedSettings = JSON.parse(savedSettings);\n            for (const name of Object.keys(defaultConfigurationParams)) {\n                if (!(name in savedSettings)){\n                    savedSettings[name] = defaultConfigurationParams[name];\n                }\n            }\n        }\n        const configParams = savedSettings;\n        return {...state, ...configParams};\n    }\n\n    getConfigParams() {\n        const settings = {};\n        for (const name of Object.keys(defaultConfigurationParams))\n            settings[name] = this.state[name];\n        return settings;\n    }\n\n    saveConfigParams() {\n        const configParams = this.getConfigParams();\n        console.log('Saving config params:', configParams);\n        localStorage.setItem('SKSettings', JSON.stringify(configParams));\n    }\n\n    factoryResetConfigParams() {\n        this.setState(defaultConfigurationParams);\n    }\n\n    async loadSequenceTable() {\n        if (this.state.sequenceAware !== false)\n            return;\n        this.setState({sequenceAware: 'initializing'});\n        this.boardIndices = await makeBoardIndicesTable();\n        this.boardIndexToLayoutString = new Array(Object.keys(this.boardIndices).length);\n        for (const key of Object.keys(this.boardIndices))\n            this.boardIndexToLayoutString[this.boardIndices[key]] = key;\n\n        const tableName =  '/board_table_' + this.tableSize + '.bin';\n        dbCachedFetch(tableName, (buf) => {\n            this.boardTable = new Uint32Array(buf);\n            // Warning: Do I need to await wasm here first?\n            console.log('Board table length:', this.boardTable.length);\n            // Make sure every value is in range.\n            for (const v of this.boardTable)\n                if (v > 604583)\n                    alert('BUG BUG BUG: Bad value in board table: ' + v);\n            set_board_table(this.boardTable);\n            this.setState({\n                sequenceAware: true,\n                mode: 'calculator'\n            }, () => {\n                this.clearField();\n            });\n        });\n    }\n\n    *findMatchingLocations(observedBoards, startIndex, scanRange) {\n        if (observedBoards.length === 0) {\n            yield [];\n            return;\n        }\n        // Try to find the first match.\n        const soughtBoard = observedBoards[0];\n        const boardTable = this.boardTable;\n        const indexMax = Math.min(boardTable.length, startIndex + scanRange);\n        for (let i = startIndex; i < indexMax; i++)\n            if (boardTable[i] === soughtBoard)\n                for (const subResult of this.findMatchingLocations(observedBoards.slice(1), i, 50000))\n                    yield [i, ...subResult];\n    }\n\n    recomputePotentialMatches() {\n        const observedBoards = this.makeGameHistoryArguments()[0];\n        const matches = [];\n        for (const match of this.findMatchingLocations(observedBoards, 0, 1000000000))\n            matches.push(match);\n        sendSpywareEvent({kind: 'recomputePotentialMatches', matches});\n        if (matches[0].length === 0) {\n            matches.length = 0;\n            matches.push([null, null]);\n        }\n        this.setState({potentialMatches: matches});\n    }\n\n    makeGameHistoryArguments() {\n        // Figure out how many history boards we have.\n        const rawObservedBoards = this.layoutDrawingBoardRefs\n            .map((ref) => this.boardIndices?.[ref.current?.getLayoutString()]);\n        const observedBoards = [];\n        for (const ob of rawObservedBoards) {\n            if (ob === undefined)\n                break;\n            observedBoards.push(ob);\n        }\n\n        // The optimal thing to do here is to save the sequence of step delta estimates, but to make\n        // the tool less fragile we only use our timer-based estimates for the very final mean.\n\n        const means = [1000.0 * Number(this.state.firstBoardStepsThousands)];\n        const stds = [1000.0 * Number(this.state.firstBoardStepsThousandsStdDev)];\n        for (let i = 0; i < observedBoards.length; i++) {\n            means.push(1000.0 * Number(this.state.nextBoardStepsThousands));\n            stds.push(1000.0 * Number(this.state.nextBoardStepsThousandsStdDev));\n        }\n        const estimates = this.state.timerStepEstimates;\n        const lastEstimate = estimates[estimates.length - 1];\n        if (observedBoards.length > 0 && estimates.length > 0 && lastEstimate !== null) {\n            means[means.length - 1] = Math.max(0, lastEstimate);\n            const timedStd = 1000.0 * Number(this.state.timedBoardStepsThousandsStdDev);\n            // There is more uncertainty in the second board than ones after.\n            stds[stds.length - 1] = observedBoards.length === 1 ? 2.0 * timedStd\n                : 0.5 * timedStd;\n        }\n\n        return [\n            Uint32Array.from(observedBoards),\n            Uint32Array.from(means),\n            Float64Array.from(stds),\n        ];\n    }\n\n    getGridStatistics(grid, squidsGotten) {\n        const hits = [];\n        const misses = [];\n        for (let y = 0; y < 8; y++) {\n            for (let x = 0; x < 8; x++) {\n                const gridValue = grid[[x, y]];\n                if (gridValue === 'HIT')\n                    hits.push(8 * y + x);\n                if (gridValue === 'MISS')\n                    misses.push(8 * y + x);\n            }\n        }\n        let numericSquidsGotten = -1;\n        for (const n of ['0', '1', '2', '3'])\n            if (squidsGotten === n || squidsGotten === Number(n))\n                numericSquidsGotten = Number(n);\n        return {hits, misses, numericSquidsGotten};\n    }\n\n    async doComputation(grid, squidsGotten) {\n        console.log('Doing computation:', squidsGotten, grid);\n        const t0 = performance.now();\n        const {hits, misses, numericSquidsGotten} = this.getGridStatistics(grid, squidsGotten);\n\n        await wasm;\n        let probabilities;\n        let gameHistoryArguments = null;\n        if (this.state.sequenceAware) {\n            gameHistoryArguments = this.makeGameHistoryArguments();\n            console.log('gameHistoryArguments:', gameHistoryArguments);\n\n            probabilities = calculate_probabilities_from_game_history(\n                Uint8Array.from(hits),\n                Uint8Array.from(misses),\n                numericSquidsGotten,\n                ...gameHistoryArguments,\n            );\n        } else {\n            probabilities = calculate_probabilities_without_sequence(\n                Uint8Array.from(hits),\n                Uint8Array.from(misses),\n                numericSquidsGotten,\n            );\n        }\n\n        let valid = true;\n        if (probabilities !== undefined) {\n            let maxY = 0;\n            let maxX = 0;\n            let highestProb = -1;\n            let probs = [];\n\n            // Here we implement our L1 distance bonus heuristic.\n            // The idea is that we want to highlight a square that isn't too far from where\n            // the player last adjusted the board. (i.e. where we believe their cursor is.)\n            for (let y = 0; y < 8; y++) {\n                for (let x = 0; x < 8; x++) {\n                    probs[[x, y]] = probabilities[8 * y + x];\n                    const l1Distance = computeL1Distance(this.state.cursorBelief, [x, y]);\n                    const distancePenaltyMultiplier = 1 - 0.04 * l1Distance;\n                    const distanceAdjustedProb = probabilities[8 * y + x] * distancePenaltyMultiplier;\n                    if (grid[[x, y]] === null && distanceAdjustedProb > highestProb) {\n                        highestProb = distanceAdjustedProb;\n                        maxX = x;\n                        maxY = y;\n                    }\n                }\n            }\n            const observationProb = probabilities[64];\n            this.setState({ probs, best: highestProb > 0 ? [maxX, maxY] : null,\n                valid, observationProb });\n        } else {\n            valid = false;\n            this.setState({ valid, best: null });\n        }\n        const t1 = performance.now();\n        this.setState({lastComputationTime: t1 - t0});\n        // Send a really big payload.\n        sendSpywareEvent({\n            kind: 'doComputation',\n            grid, hits, misses, numericSquidsGotten,\n            oldValid: this.state.valid,\n            didWeConcludeTheSituationWasValid: valid,\n            probabilities: Array.from(probabilities ?? []),\n            sequenceAware: this.state.sequenceAware,\n            usingTimer: this.state.usingTimer,\n            gameHistoryArguments: gameHistoryArguments?.map(a => Array.from(a)) ?? [],\n            timerStepEstimates: this.state.timerStepEstimates,\n            computationTime: (t1 - t0) / 1000,\n            configParams: this.getConfigParams(),\n        });\n    }\n\n    copyToUndoBuffer() {\n        this.setState({undoBuffer: [\n            ...this.state.undoBuffer,\n            {grid: this.state.grid, squidsGotten: this.state.squidsGotten, cursorBelief: this.state.cursorBelief},\n        ]});\n    }\n\n    onClick(x, y, setAsHit) {\n        sendSpywareEvent({kind: 'onClick', x, y, setAsHit});\n        const grid = { ...this.state.grid };\n        let gridValue = grid[[x, y]];\n        let squidsGotten = this.state.squidsGotten;\n        this.copyToUndoBuffer();\n\n        if (this.state.mode === 'calculator') {\n            switch (gridValue) {\n                case 'MISS':\n                    gridValue = 'HIT';\n                    break;\n                case 'HIT':\n                    gridValue = null;\n                    break;\n                default:\n                    gridValue = setAsHit ? 'HIT' : 'MISS';\n                    break;\n            }\n            grid[[x, y]] = gridValue;\n        } else {\n            // Determine from the random layout.\n            if (gridValue !== null)\n                return;\n            const arrayContains = (arr) => {\n                for (const cell of arr)\n                    if (cell[0] === x && cell[1] === y)\n                        return true;\n                return false;\n            }\n            if (arrayContains([...this.state.squidLayout.squid2, ...this.state.squidLayout.squid3, ...this.state.squidLayout.squid4])) {\n                gridValue = 'HIT';\n            } else {\n                gridValue = 'MISS';\n            }\n            grid[[x, y]] = gridValue;\n            // Compute the killed squid count.\n            squidsGotten = 0;\n            for (const n of ['2', '3', '4']) {\n                const squid = this.state.squidLayout['squid' + n];\n                let killed = true;\n                for (const cell of squid)\n                    if (grid[cell] !== 'HIT')\n                        killed = false;\n                squidsGotten += killed;\n            }\n            this.setState({ squidsGotten });\n        }\n        this.setState({grid, cursorBelief: [x, y]});\n        this.doComputation(grid, squidsGotten);\n    }\n\n    clearField() {\n        sendSpywareEvent({kind: 'clearField'});\n        const templateState = this.makeEmptyState();\n        const newState = {};\n        for (const name of ['squidLayout', 'grid', 'squidsGotten', 'undoBuffer', 'cursorBelief'])\n            newState[name] = templateState[name];\n        // The squidsGotten value of 'unknown' is banned in sequence-aware mode.\n        if (this.state.sequenceAware)\n            newState.squidsGotten = '0';\n        this.setState(newState);\n        this.doComputation(newState.grid, newState.squidsGotten);\n    }\n\n    undoLastMarking() {\n        const undoBuffer = [...this.state.undoBuffer];\n        if (undoBuffer.length === 0)\n            return;\n        const undoEntry = undoBuffer.pop();\n        sendSpywareEvent({kind: 'undoLastMarking', undoEntry});\n        this.setState({grid: undoEntry.grid, squidsGotten: undoEntry.squidsGotten, cursorBelief: undoEntry.cursorBelief, undoBuffer});\n        this.doComputation(undoEntry.grid, undoEntry.squidsGotten);\n    }\n\n    reportMiss() {\n        if (this.state.best !== null && this.state.grid[this.state.best] === null) {\n            sendSpywareEvent({kind: 'reportMiss', best: this.state.best, oldGrid: this.state.grid});\n            this.onClick(...this.state.best);\n        }\n    }\n\n    reportHit() {\n        if (this.state.best !== null && this.state.grid[this.state.best] === null) {\n            sendSpywareEvent({kind: 'reportHit', best: this.state.best, oldGrid: this.state.grid});\n            this.onClick(...this.state.best, true);\n            const {hits} = this.getGridStatistics(this.state.grid, this.state.squidsGotten);\n            if (hits.length === 9) {\n                this.incrementKills();\n            }\n        }\n    }\n\n    splitTimer() {\n        const boardTimer = this.timerRef.current;\n        if (boardTimer === null)\n            return;\n        const elapsed = boardTimer.getSecondsElapsed();\n        if (!elapsed) {\n            boardTimer.toggleRunning();\n            return;\n        }\n        const newEstimates = [...this.state.timerStepEstimates,\n            boardTimer.state.invalidated ? null\n            : boardTimer.guessStepsElapsedFromTime(elapsed)];\n        this.setState({ timerStepEstimates: newEstimates });\n        console.log('Timer step estimates:', newEstimates);\n        sendSpywareEvent({kind: 'splitTimer', invalidated: boardTimer.state.invalidated, timerStepEstimates: newEstimates, elapsed});\n        boardTimer.setState({\n            previouslyAccumulatedSeconds: 0.0,\n            timerStartMS: performance.now(),\n            // After the first split we're no longer loading the room.\n            includesLoadingTheRoom: false,\n            includedRewardsGotten: 0,\n            timerRunning: true,\n            invalidated: false,\n        });\n        this.doComputation(this.state.grid, this.state.squidsGotten);\n    }\n\n    async incrementKills() {\n        this.copyToUndoBuffer();\n        let numericValue = this.state.squidsGotten === 'unknown' ? 0 : Number(this.state.squidsGotten);\n        let grid = this.state.grid;\n        numericValue++;\n        if (numericValue === 4) {\n            // TODO: Think very carefully about this timer splitting, and if and when it should happen.\n            const gameHistoryArguments = this.makeGameHistoryArguments();\n            this.splitTimer();\n            const success = await this.copyToHistory(gameHistoryArguments);\n            if (success) {\n                numericValue = 0;\n                grid = this.makeEmptyGrid();\n                // FIXME: Make us able to undo across completions.\n                this.setState({undoBuffer: [], cursorBelief: [0, 7]});\n            } else {\n                numericValue = 3;\n            }\n        }\n        sendSpywareEvent({kind: 'incrementKills', oldGrid: this.state.grid, newGrid: grid, newNumericValue: numericValue});\n        this.setState({grid, squidsGotten: '' + numericValue});\n        this.doComputation(grid, '' + numericValue);\n    }\n\n    async copyToHistory(gameHistoryArguments) {\n        const {hits, misses, numericSquidsGotten} = this.getGridStatistics(this.state.grid, this.state.squidsGotten);\n        if (gameHistoryArguments === undefined)\n            gameHistoryArguments = this.makeGameHistoryArguments();\n        await wasm;\n        const finalBoard = disambiguate_board(\n            Uint8Array.from(hits),\n            Uint8Array.from(misses),\n            numericSquidsGotten,\n            ...gameHistoryArguments,\n        );\n        if (finalBoard === undefined) {\n            // TODO: Show a proper error message in this case!\n            sendSpywareEvent({\n                kind: 'ambiguousCopyToHistory',\n                grid: this.state.grid,\n                squidsGotten: this.state.squidsGotten,\n                gameHistoryArguments: gameHistoryArguments.map(a => Array.from(a)),\n            });\n            return false;\n        }\n        console.log('Final board:', finalBoard);\n        sendSpywareEvent({kind: 'copyToHistory', squidLayout: finalBoard});\n        const layoutString = this.boardIndexToLayoutString[finalBoard];\n        const observedBoards = gameHistoryArguments[0];\n        let fillIndex = observedBoards.length;\n        // If we're already at capacity then we have to shift the boards over.\n        if (fillIndex === this.layoutDrawingBoardRefs.length) {\n            this.shiftHistory();\n            fillIndex--;\n        }\n        this.layoutDrawingBoardRefs[fillIndex].current.setStateFromLayoutString(layoutString);\n        return true;\n    }\n\n    shiftHistory() {\n        sendSpywareEvent({kind: 'shiftHistory'});\n        const drawingBoards = this.layoutDrawingBoardRefs.map((ref) => ref.current);\n        for (let i = 0; i < drawingBoards.length -1; i++) {\n            drawingBoards[i].setState(drawingBoards[i + 1].state);\n        }\n        drawingBoards[drawingBoards.length - 1].clearBoard();\n    }\n\n    setStateFromLayoutString(layoutString) {\n        const grid = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                grid[[x, y]] = layoutString[x + 8 * y] !== '.' ? 'HIT'\n                               : this.state.grid[[x, y]];\n        this.setState({ grid, squidsGotten: 3 }, () => {\n            this.doComputation(grid, 3);\n        });\n    }\n\n    async killMostLikely(gameHistoryArguments) {\n        const {hits, misses, numericSquidsGotten} = this.getGridStatistics(this.state.grid, this.state.squidsGotten);\n        if (gameHistoryArguments === undefined)\n            gameHistoryArguments = this.makeGameHistoryArguments();\n        await wasm;\n        const likelyBoard = disambiguate_board(\n            Uint8Array.from(hits),\n            Uint8Array.from(misses),\n            numericSquidsGotten,\n            ...gameHistoryArguments,\n        );\n        if (likelyBoard !== undefined) {\n            this.copyToUndoBuffer();\n            const layoutString = this.boardIndexToLayoutString[likelyBoard];\n            this.setStateFromLayoutString(layoutString);\n        }\n    }\n\n    renderActualMap() {\n        return <div className=\"board\">\n            {naturalsUpTo(8).map(\n                (y) =>\n                    naturalsUpTo(8).map(\n                        (x) => <Tile\n                            key={x + ',' + y}\n                            x={x} y={y}\n                            onClick={() => this.onClick(x, y)}\n                            text={this.state.grid[[x, y]]}\n                            prob={this.state.probs[[x, y]]}\n                            valid={this.state.valid}\n                            best={this.state.best}\n                            precision={2}\n                        />\n                    )\n            )}\n        </div>;\n    }\n\n    render() {\n        let usedShots = 0;\n        let openingOptimizer = true;\n        for (let y = 0; y < 8; y++) {\n            for (let x = 0; x < 8; x++) {\n                if (this.state.grid[[x, y]] !== null) {\n                    usedShots++;\n                    if (this.state.grid[[x, y]] === 'HIT')\n                        openingOptimizer = false;\n                }\n            }\n        }\n        return <>\n            <div className=\"container\">\n                <div style={{ placeSelf: \"start end\" }}>\n                    <div id=\"infoArea\">\n                        <table>\n                            <thead><tr><th>Item</th><th>Value</th></tr></thead>\n                            <tbody>\n                                <tr><td>Shots used:</td><td>{usedShots}</td></tr>\n                                {this.state.sequenceAware === true && this.state.usingTimer && <>\n                                    <BoardTimer ref={this.timerRef} roomEnteredOffset={this.state.roomEnteredOffset} timedTickIntercept={this.state.timedTickIntercept} timedTickRate={this.state.timedTickRate}/>\n                                    <tr>\n                                        <td>Previous steps:</td>\n                                        <td>{!this.state.timerStepEstimates.length ? '-'\n                                            : this.state.timerStepEstimates.join(', ')}</td>\n                                    </tr>\n                                </>}\n                            </tbody>\n                        </table>\n                        {this.state.sequenceAware === true && this.state.usingTimer && this.state.showKeyShortcuts && <table>\n                            <thead><tr><th>Control</th><th>Shortcut</th></tr></thead>\n                            <tbody>\n                                <tr><td>Start/Split Timer</td><td>Space</td></tr>\n                                <tr><td>Add Reward</td><td>,</td></tr>\n                                <tr><td>Remove Reward</td><td>Shift+,</td></tr>\n                                <tr><td>Toggle Room Entered</td><td>m</td></tr>\n                                <tr><td>Invalidate Timer</td><td>;</td></tr>\n                                <tr><td>Reset Timer</td><td>Shift+;</td></tr>\n                                <tr><td>Pause/Resume Timer</td><td>w</td></tr>\n                            </tbody>\n                        </table>}\n                    </div>\n                    {this.state.sequenceAware === true &&\n                        this.state.usingTimer &&\n                        <div className=\"controls\">\n                            <button onClick={() => {\n                                this.setState({\n                                    showKeyShortcuts: !this.state.showKeyShortcuts\n                            })}}>\n                                Toggle Show Shortcuts\n                            </button>\n                        </div>}\n                </div>\n                {this.renderActualMap()}\n            </div>\n            {!this.state.valid && !this.state.sequenceAware &&\n                <div>Invalid configuration! This is not possible.</div>}\n            <div className=\"controls\" style={{ marginTop: '5px' }}>\n                Number of squids killed:\n                <select\n                    value={this.state.squidsGotten}\n                    onChange={(event) => {\n                        this.setState({ squidsGotten: event.target.value });\n                        this.doComputation(this.state.grid, event.target.value);\n                    }}\n                >\n                    {/* In sequence-aware mode, don't allow unknown because it's just an accident waiting to happen for a runner. */}\n                    {\n                        !this.state.sequenceAware &&\n                        <option value=\"unknown\">Unknown</option>\n                    }\n                    <option value=\"0\">0</option>\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                </select>\n            </div>\n            <div className=\"controls\">\n                <button onClick={() => { this.reportMiss(); }}>\n                    Miss (z)\n                </button>\n                <button onClick={() => { this.reportHit(); }}>\n                    Hit (x)\n                </button>\n                <button onClick={() => { this.incrementKills(); }}>\n                    Increment Kills (v)\n                </button>\n                {\n                    this.state.sequenceAware === true &&\n                    <>\n                        <button onClick={() => { this.killMostLikely(); }}>\n                            Quick Kill (k)\n                        </button>\n                        <button onClick={() => { this.shiftHistory(); }}>\n                            Shift History\n                        </button>\n                    </>\n                }\n                <button onClick={() => { this.clearField(); }}>\n                    Reset\n                </button>\n                {\n                    !this.state.sequenceAware &&\n                    <select\n                        value={this.state.mode}\n                        onChange={(event) => this.setState({\n                            mode: event.target.value\n                        })}\n                    >\n                        <option value=\"calculator\">Calculator Mode</option>\n                        <option value=\"practice\">Practice Mode</option>\n                    </select>\n                }\n            </div>\n            {openingOptimizer && this.state.mode === 'calculator' && !this.state.sequenceAware && <p>\n                Opening optimizer: Probability that this<br />pattern would get at least one hit: {\n                    this.state.valid ? toPercent(Math.max(0, 1 - this.state.observationProb), 2)\n                        : \"Invalid\"\n                }\n            </p>}\n            {this.state.sequenceAware === 'initializing' &&\n                <p>Downloading table...</p>}\n            {this.state.sequenceAware === true && <>\n                <div>\n                    {this.layoutDrawingBoardRefs.map((ref, i) =>\n                        <LayoutDrawingBoard parent={this} ref={ref} key={i}/>\n                    )}\n                </div>\n                <hr/>\n                <fieldset id=\"settings\">\n                    <legend>\n                        Gaussian RNG step count beliefs (all counts in <i>\n                        thousands</i> of steps, except {\n                            this.state.usingTimer && this.state.showAdvancedSettings &&\n                            <>\"Timed board intercept\", \"Timed board rate\", and</>\n                        } \"Room entered offset\")\n                    </legend>\n                    <div>\n                        <label htmlFor=\"firstBoardMean\">First board mean:</label>\n                        <input id=\"firstBoardMean\"\n                            value={this.state.firstBoardStepsThousands}\n                            onChange={event => this.setState({\n                                firstBoardStepsThousands: event.target.value\n                        })}/>\n                        <label htmlFor=\"firstBoardStddev\">First board stddev:</label>\n                        <input id=\"firstBoardStddev\"\n                            value={this.state.firstBoardStepsThousandsStdDev}\n                            onChange={event => this.setState({\n                                firstBoardStepsThousandsStdDev: event.target.value\n                        })}/>\n                        {(!this.state.usingTimer || this.state.showAdvancedSettings) && <>\n                            <label htmlFor=\"nextBoardMean\">\n                                {this.state.usingTimer ? <>Fallback mean:</>\n                                    : <>Next board mean:</>}\n                            </label>\n                            <input id=\"nextBoardMean\"\n                                value={this.state.nextBoardStepsThousands}\n                                onChange={event => this.setState({\n                                    nextBoardStepsThousands: event.target.value\n                            })}/>\n                            <label htmlFor=\"nextBoardStddev\">\n                                {this.state.usingTimer ? <>Fallback stddev:</>\n                                    : <>Next board stddev:</>}\n                            </label>\n                            <input id=\"nextBoardStddev\"\n                                value={this.state.nextBoardStepsThousandsStdDev}\n                                onChange={event => this.setState({\n                                    nextBoardStepsThousandsStdDev: event.target.value\n                            })}/>\n                        </>}\n                        {this.state.usingTimer && <>\n                            <label htmlFor=\"timedBoardStddev\">Timed board stddev:</label>\n                            <input id=\"timedBoardStddev\"\n                                value={this.state.timedBoardStepsThousandsStdDev}\n                                onChange={event => this.setState({\n                                    timedBoardStepsThousandsStdDev: event.target.value\n                            })}/>\n                            {this.state.showAdvancedSettings && <>\n                                <label htmlFor=\"timedBoardIntercept\">Timed board intercept:</label>\n                                <input id=\"timedBoardIntercept\"\n                                    value={this.state.timedTickIntercept}\n                                    onChange={event => this.setState({\n                                        timedTickIntercept: event.target.value\n                                })}/>\n                                <label htmlFor=\"timedBoardRate\">Timed board rate:</label>\n                                <input id=\"timedBoardRate\"\n                                    value={this.state.timedTickRate}\n                                    onChange={event => this.setState({\n                                        timedTickRate: event.target.value\n                                })}/>\n                            </>}\n                            <label htmlFor=\"roomEnteredOffset\">Room entered offset:</label>\n                            <input id=\"roomEnteredOffset\"\n                                value={this.state.roomEnteredOffset}\n                                onChange={event => this.setState({\n                                    roomEnteredOffset: event.target.value\n                            })}/>\n                        </>}\n                    </div>\n                </fieldset>\n\n                <div className=\"controls\">\n                    <label>\n                        <input type=\"checkbox\"\n                            checked={this.state.usingTimer}\n                            onChange={(event) => this.setState({\n                                usingTimer: !this.state.usingTimer\n                        })} />\n                        Use timer\n                    </label>\n                    <label>\n                        <input type=\"checkbox\"\n                            disabled={!this.state.usingTimer}\n                            checked={this.state.spywareMode}\n                            onChange={(event) => this.setState({\n                                spywareMode: !this.state.spywareMode\n                        })} />\n                        Enable spyware mode\n                    </label>\n                    <label>\n                        <input type=\"checkbox\"\n                            disabled={!this.state.usingTimer}\n                            checked={this.state.showAdvancedSettings}\n                            onChange={(event) => this.setState({\n                                showAdvancedSettings: !this.state.showAdvancedSettings\n                        })} />\n                        Show advanced settings\n                    </label>\n                </div>\n\n                <div className=\"controls\">\n                    <button onClick={() => { this.saveConfigParams(); }}>\n                        Save Settings\n                    </button>\n                    <button onClick={() => { this.factoryResetConfigParams(); }}>\n                        Reset to Defaults\n                    </button>\n                </div>\n\n                <div style={{\n                    margin: '5px',\n                    border: '2px solid white',\n                    borderRadius: '8px',\n                    width: '400px',\n                    minHeight: '20px',\n                    display: 'inline-block'\n                }}>\n                    {this.state.potentialMatches.map((match, i) => {\n                        if (match[0] === null) {\n                            return <div key={0}>No Matches Found!</div>\n                        }\n                        else {\n                            const diffs = match.slice(1);\n                            return <div key={i}>\n                                Potential match: {match[0]}{diffs.map((x, i) => <> +{x - match[i]}</>)}\n                            </div>;\n                        }\n                    })}\n                </div>\n                <div className=\"controls\">\n                    <button onClick={() => {\n                        this.recomputePotentialMatches();\n                    }}>Find Match Indices</button>\n                </div>\n            </>}\n            {!this.state.sequenceAware && <fieldset id=\"sequenceConfig\"\n                onChange={(event) => { this.tableSize = event.target.value; }}\n            >\n                <legend>Sequence-Aware Mode</legend>\n                <div>\n                    <label>\n                        <input type=\"radio\" name=\"tableSize\" value=\"500k\" />\n                        Small table (500 thousand values, 2 MB)\n                    </label>\n                </div>\n                <div>\n                    <label>\n                        <input type=\"radio\" name=\"tableSize\" value=\"5M\" />\n                        Medium table (5 million values, 20 MB)\n                    </label>\n                </div>\n                <div>\n                    <label>\n                        <input type=\"radio\" name=\"tableSize\" value=\"25M\" defaultChecked />\n                        Large table (25 million values, 100 MB)\n                    </label>\n                </div>\n                <button onClick={() => { this.loadSequenceTable(); }}>\n                    Initialize\n                </button>\n            </fieldset>}\n\n            {this.state.sequenceAware === true && this.state.usingTimer &&\n                this.state.spywareMode && <SpywareModeConfiguration />}\n\n            <p>\n                Last recompute time:&nbsp;\n                {this.state.lastComputationTime.toFixed(2)}ms\n            </p>\n        </>;\n    }\n}\n\nfunction globalShortcutsHandler(evt) {\n    // Check if the target is an input field that should take precedence over shortcuts.\n    if (evt.target && 'getAttribute' in evt.target && evt.target.getAttribute('data-stop-shortcuts'))\n        return;\n\n    if (evt.ctrlKey) {\n        if (globalMap !== null && evt.key.toLowerCase() === 'z') {\n            globalMap.undoLastMarking();\n        }\n    }\n    else {\n        if (globalMap !== null) {\n            // Support z or y for German keyboards.\n            if (evt.code === 'KeyZ')\n                globalMap.reportMiss();\n            if (evt.code === 'KeyX')\n                globalMap.reportHit();\n            if (evt.code === 'KeyV')\n                globalMap.incrementKills();\n            if (evt.code === 'Space') {\n                globalMap.splitTimer();\n                evt.preventDefault();\n            }\n            if (evt.code === 'KeyK')\n                globalMap.killMostLikely();\n        }\n        if (globalBoardTimer !== null) {\n            if (evt.code === 'KeyW')\n                globalBoardTimer.toggleRunning();\n            if (evt.code === 'Comma')\n                if (!evt.shiftKey)\n                    globalBoardTimer.adjustRewards(+1);\n                else\n                    globalBoardTimer.adjustRewards(-1);\n            if (evt.code === 'KeyM')\n                globalBoardTimer.toggleLoadingTheRoom();\n            if (evt.code === 'Semicolon')\n                if (!evt.shiftKey)\n                    globalBoardTimer.toggleInvalidated();\n                else\n                    globalBoardTimer.resetTimer();\n        }\n    }\n}\n\ndocument.addEventListener('keydown', globalShortcutsHandler);\n\nclass App extends React.Component {\n    render() {\n        return <>\n            <h1>Sploosh Kaboom Probability Calculator</h1>\n            <p style={{ marginLeft: 'auto', marginRight: 'auto', maxWidth: '600px' }}>\n                This is a tool for computing the likely locations of squids in the sploosh kaboom minigame of The Legend of Zelda: The Wind Waker (both SD and HD versions).\n                Unfortunately it's currently pretty complicated to use correctly.\n                A collection of tutorials will be compiled at some point, hopefully soon.\n                For now, see the <a href=\"https://github.com/Amphitryon0/web-sploosh-kaboom\">GitHub repository</a>.\n            </p>\n            <MainMap />\n            <p>\n                Made by Peter Schmidt-Nielsen, CryZe, csunday95, and Amphitryon\n                ({VERSION_STRING})\n            </p>\n        </>;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}