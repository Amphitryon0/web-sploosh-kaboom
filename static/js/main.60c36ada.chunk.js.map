{"version":3,"sources":["wasm/sploosh_wasm.js","App.js","serviceWorker.js","index.js"],"names":["wasm","cachegetUint8Memory0","WASM_VECTOR_LEN","passArray8ToWasm0","arg","malloc","ptr","length","buffer","memory","Uint8Array","set","cachegetUint32Memory0","passArray32ToWasm0","Uint32Array","cachegetFloat64Memory0","getFloat64Memory0","Float64Array","passArrayF64ToWasm0","cachegetInt32Memory0","getInt32Memory0","Int32Array","getArrayF64FromWasm0","len","subarray","calculate_probabilities_with_board_constraints","hits","misses","squids_gotten","board_constraints","constraint_probs","ptr0","__wbindgen_malloc","len0","ptr1","len1","ptr2","len2","ptr3","len3","v4","r0","r1","slice","__wbindgen_free","calculate_probabilities_from_game_history","observed_boards","prior_steps_from_previous_means","prior_steps_from_previous_stddevs","ptr4","len4","v5","disambiguate_final_board","undefined","set_board_table","board_table","load","module","imports","a","Response","WebAssembly","instantiateStreaming","headers","get","console","warn","arrayBuffer","bytes","instantiate","instance","Instance","init","input","Request","URL","fetch","exports","__wbindgen_wasm_module","interpolate","require","globalDB","indexedDBreq","window","indexedDB","open","dbWrite","key","value","transaction","oncomplete","event","onerror","alert","objectStore","add","onsuccess","dbRead","Promise","resolve","reject","request","target","result","errorCode","onupgradeneeded","createObjectStore","colormap","naturalsUpTo","n","Array","keys","Tile","isBest","this","props","best","x","y","backgroundColor","text","prob","style","display","justifyContent","alignItems","textAlign","width","height","border","valid","outline","zIndex","fontFamily","userSelect","MozUserSelect","WebkitUserSelect","msUserSelect","color","fontSize","opacity","onClick","toFixed","precision","React","Component","process","globalMap","dbCachedFetch","url","callback","cacheMiss","req","XMLHttpRequest","responseType","onload","evt","response","send","catch","makeBoardIndicesTable","actuallyMakeBoardIndicesTable","descs","direction","push","allBoards","boardIndices","placeSquid","board","desc","i","fill","squid2","squid3","squid4","count","from","index","map","join","generateRandomChar","base58","array","crypto","getRandomValues","generateRandomToken","SPYWARE_HOST","globalSpyware","globalSpywareCounter","sendSpywareEvent","eventData","state","loggedIn","spywareMode","timestamp","Date","getTime","body","JSON","stringify","username","token","session","events","method","setState","charsSent","ok","errors","SpywareModeConfiguration","localStorage","getItem","setItem","defaultUsername","json","log","success","kind","version","bigTable","margin","padding","borderRadius","marginLeft","onLogout","data-stop-shortcuts","onChange","onLogin","marginTop","trigger","className","marginRight","href","sampleSquid","Math","round","random","cells","cell","newXY","LayoutDrawingBoard","grid","makeEmptyGrid","selectedCell","changeMade","dx","dy","countsBySquid","2","3","4","layoutString","getLayoutString","boardIndex","parent","isSelectedCell","backgroundImage","backgroundSize","globalBoardTimer","setInterval","forceUpdate","BoardTimer","previouslyAccumulatedSeconds","timerStartMS","timerRunning","includesLoadingTheRoom","includedRewardsGotten","invalidated","now","performance","elapsed","oldState","delta","max","min","total","timeDeltaSeconds","prediction","Number","timedTickIntercept","timedTickRate","roomEnteredOffset","getSecondsElapsed","guessStepsElapsedFromTime","textShadow","defaultConfigurationParams","firstBoardStepsThousands","firstBoardStepsThousandsStdDev","nextBoardStepsThousands","nextBoardStepsThousandsStdDev","timedBoardStepsThousandsStdDev","MainMap","videoRef","createRef","canvasRef","outputCanvasRef","hiddenAreaRef","layoutDrawingBoardRefs","timerRef","makeEmptyState","previouslyReadStates","doComputation","squidsGotten","probs","mode","squidLayout","layout","hitLocations","candidate","isAdmissible","generateLayout","undoBuffer","cursorBelief","observationProb","lastComputationTime","turboBlurboMode","turboBlurboTiming","showKeyShortcuts","timerStepEstimate","potentialMatches","savedSettings","parse","Object","name","configParams","settings","getConfigParams","boardIndexToLayoutString","buf","boardTable","v","observedBoards","startIndex","scanRange","soughtBoard","indexMax","findMatchingLocations","subResult","makeGameHistoryArguments","matches","match","rawObservedBoards","ref","current","ob","priorStepsFromPreviousMeans","priorStepsFromPreviousStdDevs","first","gridValue","numericSquidsGotten","t0","getGridStatistics","gameHistoryArguments","probabilities","maxY","maxX","highestProb","p1","p2","l1Distance","abs","distancePenaltyMultiplier","distanceAdjustedProb","t1","oldValid","didWeConcludeTheSituationWasValid","computationTime","setAsHit","copyToUndoBuffer","arr","arrayContains","squid","killed","templateState","newState","undoEntry","pop","oldGrid","incrementKills","boardTimer","numericValue","splitTimer","copyToHistory","newGrid","newNumericValue","finalBoard","fillIndex","shiftHistory","setStateFromLayoutString","drawingBoards","clearBoard","overlayMode","justifySelf","doVideoProcessing","position","top","left","transform","renderActualMap","usedShots","openingOptimizer","alignSelf","gridTemplateColumns","reportMiss","reportHit","clearField","type","checked","gridTemplateRows","justifyItems","gridColumn","gridRow","saveConfigParams","factoryResetConfigParams","minHeight","diffs","recomputePotentialMatches","disabled","initializeTurboBlurboMode","document","addEventListener","getAttribute","event_key","toLowerCase","ctrlKey","undoLastMarking","toggleRunning","preventDefault","adjustRewards","toggleLoadingTheRoom","toggleInvalidated","resetTimer","App","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.60c36ada.chunk.js","sourcesContent":["\nlet wasm;\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\n\nfunction passArray32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4);\n    getUint32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetFloat64Memory0 = null;\nfunction getFloat64Memory0() {\n    if (cachegetFloat64Memory0 === null || cachegetFloat64Memory0.buffer !== wasm.memory.buffer) {\n        cachegetFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachegetFloat64Memory0;\n}\n\nfunction passArrayF64ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 8);\n    getFloat64Memory0().set(arg, ptr / 8);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction getArrayF64FromWasm0(ptr, len) {\n    return getFloat64Memory0().subarray(ptr / 8, ptr / 8 + len);\n}\n/**\n* @param {Uint8Array} hits\n* @param {Uint8Array} misses\n* @param {number} squids_gotten\n* @param {Uint32Array} board_constraints\n* @param {Float64Array} constraint_probs\n* @returns {Float64Array | undefined}\n*/\nexport function calculate_probabilities_with_board_constraints(hits, misses, squids_gotten, board_constraints, constraint_probs) {\n    var ptr0 = passArray8ToWasm0(hits, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(misses, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passArray32ToWasm0(board_constraints, wasm.__wbindgen_malloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passArrayF64ToWasm0(constraint_probs, wasm.__wbindgen_malloc);\n    var len3 = WASM_VECTOR_LEN;\n    wasm.calculate_probabilities_with_board_constraints(8, ptr0, len0, ptr1, len1, squids_gotten, ptr2, len2, ptr3, len3);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    let v4;\n    if (r0 !== 0) {\n        v4 = getArrayF64FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 8);\n    }\n    return v4;\n}\n\n/**\n* @param {Uint8Array} hits\n* @param {Uint8Array} misses\n* @param {number} squids_gotten\n* @param {Uint32Array} observed_boards\n* @param {Uint32Array} prior_steps_from_previous_means\n* @param {Float64Array} prior_steps_from_previous_stddevs\n* @returns {Float64Array | undefined}\n*/\nexport function calculate_probabilities_from_game_history(hits, misses, squids_gotten, observed_boards, prior_steps_from_previous_means, prior_steps_from_previous_stddevs) {\n    var ptr0 = passArray8ToWasm0(hits, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(misses, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passArray32ToWasm0(observed_boards, wasm.__wbindgen_malloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passArray32ToWasm0(prior_steps_from_previous_means, wasm.__wbindgen_malloc);\n    var len3 = WASM_VECTOR_LEN;\n    var ptr4 = passArrayF64ToWasm0(prior_steps_from_previous_stddevs, wasm.__wbindgen_malloc);\n    var len4 = WASM_VECTOR_LEN;\n    wasm.calculate_probabilities_from_game_history(8, ptr0, len0, ptr1, len1, squids_gotten, ptr2, len2, ptr3, len3, ptr4, len4);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    let v5;\n    if (r0 !== 0) {\n        v5 = getArrayF64FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 8);\n    }\n    return v5;\n}\n\n/**\n* @param {Uint8Array} hits\n* @param {Uint32Array} observed_boards\n* @param {Uint32Array} prior_steps_from_previous_means\n* @param {Float64Array} prior_steps_from_previous_stddevs\n* @returns {number | undefined}\n*/\nexport function disambiguate_final_board(hits, observed_boards, prior_steps_from_previous_means, prior_steps_from_previous_stddevs) {\n    var ptr0 = passArray8ToWasm0(hits, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray32ToWasm0(observed_boards, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passArray32ToWasm0(prior_steps_from_previous_means, wasm.__wbindgen_malloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passArrayF64ToWasm0(prior_steps_from_previous_stddevs, wasm.__wbindgen_malloc);\n    var len3 = WASM_VECTOR_LEN;\n    wasm.disambiguate_final_board(8, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    return r0 === 0 ? undefined : r1 >>> 0;\n}\n\n/**\n* @param {Uint32Array} board_table\n*/\nexport function set_board_table(board_table) {\n    var ptr0 = passArray32ToWasm0(board_table, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.set_board_table(ptr0, len0);\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nasync function init(input) {\n    //if (typeof input === 'undefined') {\n    //    input = import.meta.url.replace(/\\.js$/, '_bg.wasm');\n    //}\n    const imports = {};\n\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    const { instance, module } = await load(await input, imports);\n\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n\n    return wasm;\n}\n\nexport default init;\n\n","import React from 'react';\nimport './App.css';\nimport Collapsible from 'react-collapsible';\nimport init, {\n    set_board_table,\n    calculate_probabilities_with_board_constraints,\n    calculate_probabilities_from_game_history,\n    disambiguate_final_board,\n} from './wasm/sploosh_wasm.js';\nconst interpolate = require('color-interpolate');\n\nconst VERSION_STRING = 'v0.0.21';\n\nvar globalDB = null;\nconst indexedDBreq = window.indexedDB.open('splooshkaboom', 1);\nindexedDBreq.onerror = function(event) {\n    alert('Failed to access IndexedDB.');\n};\n// Known issue: There's basically a race condition here in that I don't\n// wait for this onsuccess to potentially start calling dbRead.\nindexedDBreq.onsuccess = function(event) {\n    globalDB = event.target.result;\n    globalDB.onerror = function(event) {\n        alert('IndexedDB error: ' + event.target.errorCode);\n    };\n};\nindexedDBreq.onupgradeneeded = function(event) {\n    const db = event.target.result;\n    db.createObjectStore('sk');\n}\n\n// TODO: Am I using IndexedDB even remotely correctly!? This looks so weird...\n// Do I not have to somehow end or commit the transactions!?\n\nfunction dbWrite(key, value) {\n    if (globalDB === null)\n        return;\n\n    const transaction = globalDB.transaction(['sk'], 'readwrite');\n\n    transaction.oncomplete = function(event) {\n        //alert('Transaction complete!');\n    }\n    transaction.onerror = function(event) {\n        alert('Transaction error!');\n    }\n    const objectStore = transaction.objectStore('sk');\n    const request = objectStore.add(value, key);\n    request.onsuccess = function(event) {\n        //alert('Request success!');\n    }\n}\n\nfunction dbRead(key) {\n    return new Promise((resolve, reject) => {\n        const transaction = globalDB.transaction(['sk']);\n\n        transaction.oncomplete = function(event) {\n            //alert('Transaction complete!');\n        }\n        transaction.onerror = function(event) {\n            alert('Transaction error!');\n        }\n        const objectStore = transaction.objectStore('sk');\n        const request = objectStore.get(key);\n        request.onsuccess = function(event) {\n            //alert('Request success!');\n            resolve(event.target.result);\n        };\n        request.onerror = function(event) {\n            //alert('Request failure!');\n            reject();\n        };\n    });\n}\n\n//const colormap = interpolate(['#004', '#090', '#0a0', 'green']);\n//const colormap = interpolate(['#004', '#0a0', '#0d0', '#0f0', '#6f6']);\n// .        . . . .\n// 0123456789abcdef\nconst colormap = interpolate(['#004', '#070', '#090', '#0b0', '#0d0', '#0f0', '#6f6']);\nconst naturalsUpTo = (n) => [...Array(n).keys()];\n\nclass Tile extends React.Component {\n    render() {\n        const isBest = this.props.best !== null && this.props.best[0] === this.props.x && this.props.best[1] === this.props.y;\n\n        let backgroundColor = this.props.backgroundColor;\n        if (backgroundColor === undefined) {\n            backgroundColor = this.props.text === null ? colormap(this.props.prob) : (\n                this.props.text === 'HIT' ? '#a2a' : '#44a'\n            );\n        }\n\n        return <div\n            key={this.props.x + ',' + this.props.y}\n            style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                textAlign: 'center',\n                width: '70px',\n                height: '70px',\n                border: this.props.valid ? '1px solid grey' : '1px solid red',\n                outline: isBest ? '4px solid yellow' : '',\n                zIndex: isBest ? 1 : 0,\n                fontFamily: 'monospace',\n                userSelect: 'none',\n                MozUserSelect: 'none',\n                WebkitUserSelect: 'none',\n                msUserSelect: 'none',\n                color: 'white',\n                fontSize: this.props.fontSize,\n                opacity: this.props.opacity,\n                backgroundColor,\n            }}\n            onClick={this.props.onClick}\n        >\n            {this.props.text === null ? (this.props.prob * 100).toFixed(this.props.precision) + '%' : this.props.text}\n        </div>;\n    }\n}\n\nlet wasm = init(process.env.PUBLIC_URL + \"/sploosh_wasm_bg.wasm\");\n\n// Super ugly, please forgive me. :(\nvar globalMap = null;\n\nasync function dbCachedFetch(url, callback) {\n    function cacheMiss() {\n        const req = new XMLHttpRequest();\n        req.open('GET', process.env.PUBLIC_URL + url, true);\n        req.responseType = 'arraybuffer';\n        req.onload = (evt) => {\n            dbWrite(url, req.response);\n            callback(req.response);\n        };\n        req.send();\n        return null;\n    }\n    const result = await dbRead(url).catch(cacheMiss);\n    if (result === undefined) {\n        cacheMiss();\n        return;\n    }\n    // This is sort of an ugly protocol, but if we hit the catch path above\n    // we signal that the callback was already called by returning null.\n    if (result === null)\n        return;\n    callback(result);\n}\n\nasync function makeBoardIndicesTable() {\n    function cacheMiss() {\n        const result = actuallyMakeBoardIndicesTable();\n        dbWrite('boardIndicesTable', result);\n        return result;\n    }\n    const result = await dbRead('boardIndicesTable').catch(cacheMiss);\n    if (result === undefined)\n        return cacheMiss();\n    return result;\n}\n\nfunction actuallyMakeBoardIndicesTable() {\n    // This convention here has to match that in the Rust component and table building C++ exactly!\n    const descs = [];\n    for (let y = 0; y < 8; y++)\n        for (let x = 0; x < 8; x++)\n            for (const direction of [false, true])\n                descs.push({x, y, direction});\n    const allBoards = [];\n    const boardIndices = {};\n    function placeSquid(board, desc, length) {\n        for (let i = 0; i < length; i++) {\n            let {x, y} = desc;\n            if (desc.direction)\n                x += i;\n            else\n                y += i;\n            const index = x + 8 * y;\n            if (x >= 8 || y >= 8)\n                return;\n            board[index] = length;\n        }\n    }\n    const board = new Array(64).fill(0);\n\n    for (const squid2 of descs) {\n        for (const squid3 of descs) {\n            for (const squid4 of descs) {\n                board.fill(0);\n                placeSquid(board, squid2, 2);\n                placeSquid(board, squid3, 3);\n                placeSquid(board, squid4, 4);\n                let count = 0;\n                for (const entry of board)\n                    count += entry\n                if (count !== 2*2 + 3*3 + 4*4)\n                    continue;\n                allBoards.push(Array.from(board));\n            }\n        }\n    }\n    let index = 0;\n    for (const board of allBoards) {\n        boardIndices[board.map((i) => i === 0 ? '.' : i).join('')] = index;\n        index++;\n    }\n    return boardIndices;\n}\n\nfunction generateRandomChar() {\n    const base58 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n    const array = new Uint8Array(1);\n    while (true) {\n        crypto.getRandomValues(array);\n        const index = array[0] & 63;\n        if (index < base58.length)\n            return base58[index];\n    }\n}\n\nfunction generateRandomToken(n) {\n    let result = '';\n    for (let i = 0; i < n; i++)\n        result += generateRandomChar();\n    return result;\n}\n\n// Ugh, maybe later I'll give it a proper domain, and move over to https.\nconst SPYWARE_HOST = 'http://skphonehome.peter.website:1234';\n\nvar globalSpyware = null;\nvar globalSpywareCounter = -1;\n\n// To anyone reading this:\n// I chose the name \"spyware\" to be silly — this is a completely optional opt-in feature to send usage data for analysis.\n// You have to actually explicitly enable the spyware with a checkbox in the GUI, and there's an explanation.\nasync function sendSpywareEvent(eventData) {\n    if (globalSpyware === null || globalMap === null)\n        return;\n    if (!globalSpyware.state.loggedIn)\n        return;\n    if (!globalMap.state.spywareMode)\n        return;\n    eventData.timestamp = (new Date()). getTime() / 1000;\n    globalSpywareCounter++;\n    //console.log('Sending spyware event:', globalSpywareCounter, eventData);\n    const body = JSON.stringify({\n        username: globalSpyware.state.username,\n        token: globalSpyware.state.token,\n        session: globalSpyware.session,\n        events: {\n            [globalSpywareCounter]: eventData,\n        },\n    });\n    const response = await fetch(SPYWARE_HOST + '/write', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body,\n    });\n    globalSpyware.setState({charsSent: globalSpyware.state.charsSent + body.length});\n    if (!response.ok)\n        globalSpyware.setState({errors: true});\n}\n\nclass SpywareModeConfiguration extends React.Component {\n    constructor() {\n        super();\n        globalSpyware = this;\n        this.session = generateRandomToken(16);\n        let token = localStorage.getItem('SKToken');\n        if (token === null) {\n            token = generateRandomToken(8);\n            localStorage.setItem('SKToken', token);\n        }\n        let defaultUsername = localStorage.getItem('SKUsername');\n        this.state = {\n            username: defaultUsername === null ? '' : defaultUsername,\n            token,\n            loggedIn: false,\n            errors: false,\n            charsSent: false,\n        };\n    }\n\n    async onLogin() {\n        const username = this.state.username;\n        if (username === '') {\n            alert('Username must be non-empty');\n            return;\n        }\n        const response = await fetch(SPYWARE_HOST + '/login', {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n                'username': username,\n                'token': this.state.token,\n            }),\n        });\n        const result = await response.json();\n        console.log('Login:', result);\n        if (result.success) {\n            // Stash the username when we successfully log in, as a convenience for the user.\n            localStorage.setItem('SKUsername', username);\n            this.setState({loggedIn: true}, () => {\n                sendSpywareEvent({\n                    kind: 'login',\n                    version: VERSION_STRING,\n                    bigTable: globalMap === null ? null : globalMap.bigTable,\n                });\n            });\n        } else {\n            alert('Bad token! This username might already be taken. If you need to recover your login token contact Peter Schmidt-Nielsen.');\n        }\n    }\n\n    async onLogout() {\n        this.setState({loggedIn: false});\n    }\n\n    render() {\n        return <div style={{\n            fontSize: '120%',\n            margin: '10px',\n            padding: '10px',\n            border: '2px solid white',\n            borderRadius: '8px',\n            width: '450px',\n            display: 'inline-block',\n            backgroundColor: this.state.loggedIn ? '#696' : '#777',\n        }}>\n            <span style={{fontSize: '120%'}}>Spyware Mode:</span>\n            <br/>\n            {\n                this.state.loggedIn ?\n                    <>\n                        Logged in as: <span style={{fontFamily: 'monospace', fontSize: '150%'}}>{this.state.username}</span>\n                        <button style={{marginLeft: '20px'}} onClick={() => this.onLogout()}>Logout</button>\n                        <br/>\n                        Events sent: {globalSpywareCounter + 1} &nbsp;&nbsp;&nbsp; Chars sent: {this.state.charsSent}\n                    </> : <>\n                        Username: <input data-stop-shortcuts style={{width: '100px', fontFamily: 'monospace'}} value={this.state.username} onChange={event => this.setState({username: event.target.value})}/>\n                        <button style={{marginLeft: '20px'}} onClick={() => this.onLogin()}>Login</button>\n                    </>\n            }\n            <br/>\n            <div style={{marginTop: '20px'}}>\n                <Collapsible trigger={\n                    <div className=\"clickable\" style={{width: '200px', margin: '0px'}}>\n                        Access Token\n                    </div>\n                }>\n                    Token: <input data-stop-shortcuts style={{width: '120px', marginRight: '20px'}} value={this.state.token} onChange={event => this.setState({token: event.target.value})}/>\n                    <button onClick={() => { localStorage.setItem('SKToken', this.state.token); }}>Update Saved Token</button>\n                    <p>\n                        The above token is generated just for you.\n                        Anyone who has the above token can submit data that will appear on the stats page for your username (so I recommend not showing it on stream).\n                        If you lose access to it you'll have to pick a new username, or ask <a href=\"mailto:schmidtnielsenpeter@gmail.com\">Peter Schmidt-Nielsen</a> to help you recover your access token.\n                        The token is automatically saved between sessions, but might be lost if you clear all your browser history.\n                        I recommend copying this token down somewhere.\n                    </p>\n                </Collapsible>\n            </div>\n            {this.state.errors && <span style={{fontSize: '120%', color: 'red'}}>Spyware reporting error!</span>}\n        </div>;\n    }\n}\n\nfunction sampleSquid(length) {\n    const x = Math.round(Math.random() * 8);\n    const y = Math.round(Math.random() * 8);\n    const direction = Math.random() < 0.5;\n    const cells = [[x, y]];\n    for (let i = 0; i < length - 1; i++) {\n        const cell = cells[cells.length - 1];\n        const newXY = direction ? [cell[0] + 1, cell[1]] : [cell[0], cell[1] + 1];\n        cells.push(newXY);\n    }\n    return cells;\n}\n\nfunction generateLayout() {\n    const layout = {};\n    const hitLocations = {};\n    for (const n of [2, 3, 4]) {\n        while (true) {\n            const candidate = sampleSquid(n);\n            let isAdmissible = true;\n            for (const cell of candidate)\n                if (cell[0] > 7 || cell[1] > 7 || hitLocations[cell] === true)\n                    isAdmissible = false;\n            if (isAdmissible) {\n                layout['squid' + n] = candidate;\n                for (const cell of candidate)\n                    hitLocations[cell] = true;\n                break;\n            }\n        }\n    }\n    return layout;\n}\n\nclass LayoutDrawingBoard extends React.Component {\n    constructor() {\n        super();\n        this.state = { grid: this.makeEmptyGrid(), selectedCell: null };\n    }\n\n    makeEmptyGrid() {\n        const grid = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                grid[[x, y]] = '.';\n        return grid;\n    }\n\n    clearBoard() {\n        this.setState({ grid: this.makeEmptyGrid(), selectedCell: null });\n    }\n\n    onClick(x, y) {\n        if (this.state.selectedCell === null) {\n            this.setState({ selectedCell: [x, y] });\n            return;\n        }\n        const grid = {...this.state.grid};\n        let changeMade = false;\n        for (const length of [2, 3, 4]) {\n            for (const [dx, dy] of [[+1, 0], [0, +1], [-1, 0], [0, -1]]) {\n                if (this.state.selectedCell[0] === x + dx * (length - 1) && this.state.selectedCell[1] === y + dy * (length - 1)) {\n                    // If this squid appears anywhere else, obliterate it.\n                    for (let y = 0; y < 8; y++)\n                        for (let x = 0; x < 8; x++)\n                            if (grid[[x, y]] === '' + length)\n                                grid[[x, y]] = '.';\n                    // Fill in the squid here.\n                    for (let i = 0; i < length; i++)\n                        grid[[x + i * dx, y + i * dy]] = '' + length;\n                    changeMade = true;\n                }\n            }\n        }\n        // If any squid has the wrong count, then totally eliminate it.\n        const countsBySquid = {2: 0, 3: 0, 4: 0, '.': 0};\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                countsBySquid[grid[[x, y]]]++;\n        for (const length of [2, 3, 4])\n            if (countsBySquid[length] !== length)\n                for (let y = 0; y < 8; y++)\n                    for (let x = 0; x < 8; x++)\n                        if (grid[[x, y]] === '' + length)\n                            grid[[x, y]] = '.';\n        if (changeMade)\n            this.setState({ grid });\n        this.setState({ selectedCell: null });\n    }\n\n    getLayoutString() {\n        // Quadratic time, but who cares?\n        let layoutString = '';\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                layoutString += this.state.grid[[x, y]];\n        return layoutString;\n    }\n\n    setStateFromLayoutString(layoutString) {\n        const grid = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                grid[[x, y]] = layoutString[x + 8 * y];\n        this.setState({grid});\n    }\n\n    render() {\n        const layoutString = this.getLayoutString();\n        let boardIndex = this.props.parent.boardIndices[layoutString];\n        if (boardIndex === undefined) {\n            boardIndex = \"waiting...\";\n        }\n        const isSelectedCell = (x, y) => this.state.selectedCell !== null && x === this.state.selectedCell[0] && y === this.state.selectedCell[1];\n\n        return <div style={{\n            margin: '20px',\n            display: 'inline-block',\n            color: 'white',\n        }}>\n            <div style={{\n                backgroundImage: 'url(\"' + process.env.PUBLIC_URL + '/board_background_square.png\")',\n                backgroundSize: '100% 100%',\n                padding: '18px',\n            }}>\n                {naturalsUpTo(8).map(\n                    (y) => <div key={y} style={{\n                        display: 'flex',\n                    }}>\n                        {naturalsUpTo(8).map(\n                            (x) => <Tile\n                                key={x + ',' + y}\n                                x={x} y={y}\n                                onClick={() => this.onClick(x, y)}\n                                text={this.state.grid[[x, y]]}\n                                valid={true}\n                                best={this.state.selectedCell}\n                                fontSize={'200%'}\n                                opacity={isSelectedCell(x, y) || this.state.grid[[x, y]] !== '.' ? 0.6 : 0.2}\n                                backgroundColor={this.state.grid[[x, y]] === '.' ? undefined : 'green'}\n                            />\n                        )}\n                    </div>\n                )}\n            </div><br/>\n            Squid Layout: {boardIndex}\n        </div>;\n    }\n}\n\nvar globalBoardTimer = null;\n\nsetInterval(\n    () => {\n        if (globalBoardTimer !== null)\n            globalBoardTimer.forceUpdate();\n    },\n    69,\n);\n\nfunction renderYesNo(bool) {\n    return bool ?\n        <span style={{color: 'green', textShadow: '0px 0px 2px white'}}>YES</span> :\n        <span style={{color: 'red', textShadow: '0px 0px 2px white'}}>NO</span>;\n}\n\nclass BoardTimer extends React.Component {\n    constructor() {\n        super();\n        globalBoardTimer = this;\n        this.state = {\n            previouslyAccumulatedSeconds: 0.0,\n            //previouslyAccumulatedRupeeSeconds: 0.0,\n            timerStartMS: 0.0,\n            timerRunning: false,\n            includesLoadingTheRoom: true,\n            //rupeesCollected: false,\n            includedRewardsGotten: 0,\n            invalidated: false,\n        };\n    }\n\n    toggleRunning() {\n        const now = performance.now();\n        const elapsed = 1e-3 * (now - this.state.timerStartMS);\n        sendSpywareEvent({kind: 'timer_toggleRunning', elapsed, oldState: this.state});\n        if (this.state.timerRunning)\n            this.setState({previouslyAccumulatedSeconds: this.state.previouslyAccumulatedSeconds + elapsed});\n        this.setState({timerRunning: !this.state.timerRunning, timerStartMS: now});\n    }\n\n    adjustRewards(delta) {\n        sendSpywareEvent({kind: 'timer_adjustRewards', delta, oldState: this.state});\n        this.setState({includedRewardsGotten: Math.max(0, Math.min(2, this.state.includedRewardsGotten + delta))});\n    }\n\n    toggleLoadingTheRoom() {\n        sendSpywareEvent({kind: 'timer_toggleLoadingTheRoom', oldState: this.state});\n        this.setState({includesLoadingTheRoom: !this.state.includesLoadingTheRoom});\n    }\n\n    toggleInvalidated() {\n        sendSpywareEvent({kind: 'timer_toggleInvalidated', oldState: this.state});\n        this.setState({invalidated: !this.state.invalidated});\n    }\n\n    /*\n    toggleRupeesCollected() {\n        // TODO: Appropriately perform accumulation, then change the rate.\n        this.setState({rupeesCollected: !this.state.rupeesCollected});\n    }\n    */\n\n    resetTimer() {\n        sendSpywareEvent({kind: 'timer_resetTimer', oldState: this.state});\n        this.setState({\n            previouslyAccumulatedSeconds: 0.0,\n            timerStartMS: performance.now(),\n            timerRunning: false,\n        });\n    }\n\n    getSecondsElapsed() {\n        let total = this.state.previouslyAccumulatedSeconds;\n        if (this.state.timerRunning) {\n            const now = performance.now();\n            total += 1e-3 * (now - this.state.timerStartMS);\n        }\n        return total;\n    }\n\n    guessStepsElapsedFromTime(timeDeltaSeconds) {\n        // I did some linear regressions from real HD Italian runs. I'll put some data up at some point.\n        let prediction = Number(this.props.timedTickIntercept) + Number(this.props.timedTickRate) * timeDeltaSeconds;\n        if (this.state.includesLoadingTheRoom)\n            prediction += -940 + Number(this.props.roomEnteredOffset);\n        prediction += this.state.includedRewardsGotten * 760;\n        return Math.round(prediction);\n    }\n\n    render() {\n        const elapsed = this.getSecondsElapsed();\n        if (this.state.invalidated)\n            return <>\n                <span style={{ fontSize: '150%', color: 'white', fontFamily: 'monospace' }}>TIMER</span>\n                <span style={{ fontSize: '150%', color: 'white', fontFamily: 'monospace' }}>INVALIDATED</span>\n            </>;\n        return <>\n            <span>&nbsp;Seconds elapsed: </span>\n            <span>&nbsp;{elapsed.toFixed(2)}&nbsp;</span>\n            <span>&nbsp;Steps:&nbsp;</span>\n            <span>&nbsp;{this.guessStepsElapsedFromTime(elapsed)}&nbsp;</span>\n            <span>&nbsp;Entered room:</span>\n            <span>&nbsp;{renderYesNo(this.state.includesLoadingTheRoom)}&nbsp;</span>\n            <span>&nbsp;Rewards gotten:&nbsp;</span>\n            <span>&nbsp;{this.state.includedRewardsGotten}&nbsp;</span>\n        </>;\n            {/* &nbsp;- Rupees collected: {renderYesNo(this.state.rupeesCollected)} */};\n    }\n}\n\nfunction computeL1Distance(p1, p2) {\n    return Math.abs(p1[0] - p2[0]) + Math.abs(p1[1] - p2[1]);\n}\n\nconst defaultConfigurationParams = {\n    firstBoardStepsThousands: 500,\n    firstBoardStepsThousandsStdDev: 500,\n    nextBoardStepsThousands: 7,\n    nextBoardStepsThousandsStdDev: 3,\n    timedBoardStepsThousandsStdDev: 0.2,\n    timedTickIntercept: 156,\n    timedTickRate: 252,\n    roomEnteredOffset: 0,\n};\n\nclass MainMap extends React.Component {\n    videoRef = React.createRef();\n    canvasRef = React.createRef();\n    //referenceCanvasRef = React.createRef();\n    outputCanvasRef = React.createRef();\n    hiddenAreaRef = React.createRef();\n    layoutDrawingBoardRefs = [React.createRef(), React.createRef(), React.createRef()];\n    timerRef = React.createRef();\n\n    constructor() {\n        super();\n        this.state = this.makeEmptyState();\n        globalMap = this;\n        this.previouslyReadStates = [null, null, null];\n    }\n\n    componentDidMount() {\n        this.doComputation(this.state.grid, this.state.squidsGotten);\n    }\n\n    makeEmptyGrid() {\n        const grid = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                grid[[x, y]] = null;\n        return grid;\n    }\n\n    makeEmptyState() {\n        const probs = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                probs[[x, y]] = 0.0;\n        // Select a particular layout, for practice mode.\n        const squidLayout = generateLayout();\n        const state = {\n            mode: 'calculator',\n            squidLayout,\n            grid: this.makeEmptyGrid(),\n            squidsGotten: 'unknown',\n            undoBuffer: [],\n            probs,\n            best: [3, 3],\n            cursorBelief: [3, 3],\n            valid: true,\n            observationProb: 1.0,\n            lastComputationTime: -1,\n\n            turboBlurboMode: false,\n            turboBlurboTiming: false,\n            showKeyShortcuts: false,\n            spywareMode: false,\n\n            timerStepEstimate: null,\n\n            potentialMatches: [],\n        };\n        // Load relevant configuration from localStorage.\n        let savedSettings = localStorage.getItem('SKSettings');\n        if (savedSettings === null) {\n            savedSettings = defaultConfigurationParams;\n        } else {\n            // if saved configuration from previous version, use defaults for \n            // any new parameters\n            savedSettings = JSON.parse(savedSettings);\n            for (const name of Object.keys(defaultConfigurationParams)) {\n                if (!(name in savedSettings)){\n                    savedSettings[name] = defaultConfigurationParams[name];\n                }\n            }\n        }\n        const configParams = savedSettings;\n        return {...state, ...configParams};\n    }\n\n    getConfigParams() {\n        const settings = {};\n        for (const name of Object.keys(defaultConfigurationParams))\n            settings[name] = Number(this.state[name]);\n        return settings;\n    }\n\n    saveConfigParams() {\n        const configParams = this.getConfigParams();\n        console.log('Saving config params:', configParams);\n        localStorage.setItem('SKSettings', JSON.stringify(configParams));\n    }\n\n    factoryResetConfigParams() {\n        this.setState(defaultConfigurationParams);\n    }\n\n    async initializeTurboBlurboMode(bigTable) {\n        if (this.state.turboBlurboMode !== false)\n            return;\n        this.bigTable = bigTable;\n        this.setState({turboBlurboMode: 'initializing'});\n        this.boardIndices = await makeBoardIndicesTable();\n        this.boardIndexToLayoutString = new Array(Object.keys(this.boardIndices).length);\n        for (const key of Object.keys(this.boardIndices))\n            this.boardIndexToLayoutString[this.boardIndices[key]] = key;\n\n        const tableName = bigTable ? '/board_table_25M.bin' : '/board_table_5M.bin';\n        dbCachedFetch(tableName, (buf) => {\n            this.boardTable = new Uint32Array(buf);\n            // Warning: Do I need to await wasm here first?\n            console.log('Board table length:', this.boardTable.length);\n            // Make sure every value is in range.\n            for (const v of this.boardTable)\n                if (v > 604583)\n                    alert('BUG BUG BUG: Bad value in board table: ' + v);\n            set_board_table(this.boardTable);\n            this.setState({turboBlurboMode: true, squidsGotten: '0', mode: 'calculator'});\n        });\n    }\n\n    *findMatchingLocations(observedBoards, startIndex, scanRange) {\n        if (observedBoards.length === 0) {\n            yield [];\n            return;\n        }\n        // Try to find the first match.\n        const soughtBoard = observedBoards[0];\n        const boardTable = this.boardTable;\n        const indexMax = Math.min(boardTable.length, startIndex + scanRange);\n        for (let i = startIndex; i < indexMax; i++)\n            if (boardTable[i] === soughtBoard)\n                for (const subResult of this.findMatchingLocations(observedBoards.slice(1), i, 50000))\n                    yield [i, ...subResult];\n    }\n\n    recomputePotentialMatches() {\n        const [observedBoards, _1, _2] = this.makeGameHistoryArguments();\n        const matches = [];\n        for (const match of this.findMatchingLocations(observedBoards, 0, 1000000000))\n            matches.push(match);\n        sendSpywareEvent({kind: 'recomputePotentialMatches', matches});\n        if (matches[0].length == 0) {\n            matches.length = 0;\n            matches.push([null, null]);\n        }\n        this.setState({potentialMatches: matches});\n    }\n\n    makeGameHistoryArguments() {\n        // Figure out how many history boards we have.\n        const rawObservedBoards = this.layoutDrawingBoardRefs\n            .map((ref) => this.boardIndices[ref.current.getLayoutString()]);\n        const observedBoards = [];\n        for (const ob of rawObservedBoards) {\n            if (ob === undefined)\n                break;\n            observedBoards.push(ob);\n        }\n\n        // The optimal thing to do here is to save the sequence of step delta estimates, but to make\n        // the tool less fragile we only use our timer-based estimates for the very final mean.\n\n        const priorStepsFromPreviousMeans = [];\n        const priorStepsFromPreviousStdDevs = [];\n        let first = true;\n        for (const index of [...observedBoards, null]) {\n            if (index === undefined)\n                break;\n            if (first) {\n                priorStepsFromPreviousMeans.push(1000.0 * Number(this.state.firstBoardStepsThousands));\n                priorStepsFromPreviousStdDevs.push(1000.0 * Number(this.state.firstBoardStepsThousandsStdDev));\n            } else {\n                // If we're the last delta, and also not the first, then possibly use our time delta.\n                if (index === null && this.state.timerStepEstimate !== null && this.state.turboBlurboTiming) {\n                    // Because the timerStepEstimate can be negative I have to avoid underflow.\n                    priorStepsFromPreviousMeans.push(Math.max(0, this.state.timerStepEstimate));\n                    priorStepsFromPreviousStdDevs.push(1000.0 * Number(this.state.timedBoardStepsThousandsStdDev));\n                } else {\n                    priorStepsFromPreviousMeans.push(1000.0 * Number(this.state.nextBoardStepsThousands));\n                    priorStepsFromPreviousStdDevs.push(1000.0 * Number(this.state.nextBoardStepsThousandsStdDev));\n                }\n            }\n            first = false;\n        }\n        return [\n            Uint32Array.from(observedBoards),\n            Uint32Array.from(priorStepsFromPreviousMeans),\n            Float64Array.from(priorStepsFromPreviousStdDevs),\n        ];\n    }\n\n    getGridStatistics(grid, squidsGotten) {\n        const hits = [];\n        const misses = [];\n        for (let y = 0; y < 8; y++) {\n            for (let x = 0; x < 8; x++) {\n                const gridValue = grid[[x, y]];\n                if (gridValue === 'HIT')\n                    hits.push(8 * y + x);\n                if (gridValue === 'MISS')\n                    misses.push(8 * y + x);\n            }\n        }\n        let numericSquidsGotten = -1;\n        for (const n of ['0', '1', '2', '3'])\n            if (squidsGotten === n || squidsGotten === Number(n))\n                numericSquidsGotten = Number(n);\n        return {hits, misses, numericSquidsGotten};\n    }\n\n    async doComputation(grid, squidsGotten) {\n        console.log('Doing computation:', squidsGotten, grid);\n        const t0 = performance.now();\n        const {hits, misses, numericSquidsGotten} = this.getGridStatistics(grid, squidsGotten);\n\n        await wasm;\n        let probabilities;\n        let gameHistoryArguments = null;\n        if (this.state.turboBlurboMode) {\n            gameHistoryArguments = this.makeGameHistoryArguments();\n            console.log('gameHistoryArguments:', gameHistoryArguments);\n\n            probabilities = calculate_probabilities_from_game_history(\n                Uint8Array.from(hits),\n                Uint8Array.from(misses),\n                numericSquidsGotten,\n                ...gameHistoryArguments,\n            );\n        } else {\n            probabilities = calculate_probabilities_with_board_constraints(\n                Uint8Array.from(hits),\n                Uint8Array.from(misses),\n                numericSquidsGotten,\n                // No constraints for now.\n                Uint32Array.from([]),\n                Float64Array.from([]),\n            );\n        }\n\n        let valid = true;\n        if (probabilities !== undefined) {\n            let maxY = 0;\n            let maxX = 0;\n            let highestProb = -1;\n            let probs = [];\n\n            // Here we implement our L1 distance bonus heuristic.\n            // The idea is that we want to highlight a square that isn't too far from where\n            // the player last adjusted the board. (i.e. where we believe their cursor is.)\n            for (let y = 0; y < 8; y++) {\n                for (let x = 0; x < 8; x++) {\n                    probs[[x, y]] = probabilities[8 * y + x];\n                    const l1Distance = computeL1Distance(this.state.cursorBelief, [x, y]);\n                    const distancePenaltyMultiplier = 1 - 0.03 * l1Distance;\n                    const distanceAdjustedProb = probabilities[8 * y + x] * distancePenaltyMultiplier;\n                    if (grid[[x, y]] === null && distanceAdjustedProb > highestProb) {\n                        highestProb = distanceAdjustedProb;\n                        maxX = x;\n                        maxY = y;\n                    }\n                }\n            }\n            const observationProb = probabilities[64];\n            this.setState({ probs, best: highestProb >= 0 ? [maxX, maxY] : null, valid, observationProb });\n        } else {\n            valid = false;\n            this.setState({ valid });\n        }\n        const t1 = performance.now();\n        this.setState({lastComputationTime: t1 - t0});\n        // Send a really big payload.\n        sendSpywareEvent({\n            kind: 'doComputation',\n            grid, hits, misses, numericSquidsGotten,\n            oldValid: this.state.valid,\n            didWeConcludeTheSituationWasValid: valid,\n            probabilities: Array.from(probabilities),\n            turboBlurboMode: this.state.turboBlurboMode,\n            turboBlurboTiming: this.state.turboBlurboTiming,\n            gameHistoryArguments: (gameHistoryArguments === null) ? [] : gameHistoryArguments.map(a => Array.from(a)),\n            timerStepEstimate: this.state.timerStepEstimate,\n            computationTime: (t1 - t0) / 1000,\n            configParams: this.getConfigParams(),\n        });\n    }\n\n    copyToUndoBuffer() {\n        this.setState({undoBuffer: [\n            ...this.state.undoBuffer,\n            {grid: this.state.grid, squidsGotten: this.state.squidsGotten, cursorBelief: this.state.cursorBelief},\n        ]});\n    }\n\n    onClick(x, y, setAsHit) {\n        sendSpywareEvent({kind: 'onClick', x, y, setAsHit});\n        const grid = { ...this.state.grid };\n        let gridValue = grid[[x, y]];\n        let squidsGotten = this.state.squidsGotten;\n        this.copyToUndoBuffer();\n\n        if (this.state.mode === 'calculator') {\n            switch (gridValue) {\n                case null:\n                    gridValue = setAsHit ? 'HIT' : 'MISS';\n                    break;\n                case 'MISS':\n                    gridValue = 'HIT';\n                    break;\n                case 'HIT':\n                    gridValue = null;\n                    break;\n            }\n            grid[[x, y]] = gridValue;\n        } else {\n            // Determine from the random layout.\n            if (gridValue !== null)\n                return;\n            const arrayContains = (arr) => {\n                for (const cell of arr)\n                    if (cell[0] === x && cell[1] === y)\n                        return true;\n                return false;\n            }\n            if (arrayContains([...this.state.squidLayout.squid2, ...this.state.squidLayout.squid3, ...this.state.squidLayout.squid4])) {\n                gridValue = 'HIT';\n            } else {\n                gridValue = 'MISS';\n            }\n            grid[[x, y]] = gridValue;\n            // Compute the killed squid count.\n            squidsGotten = 0;\n            for (const n of ['2', '3', '4']) {\n                const squid = this.state.squidLayout['squid' + n];\n                let killed = true;\n                for (const cell of squid)\n                    if (grid[cell] !== 'HIT')\n                        killed = false;\n                squidsGotten += killed;\n            }\n            this.setState({ squidsGotten });\n        }\n        this.setState({grid, cursorBelief: [x, y]});\n        this.doComputation(grid, squidsGotten);\n    }\n\n    clearField() {\n        sendSpywareEvent({kind: 'clearField'});\n        const templateState = this.makeEmptyState();\n        const newState = {};\n        for (const name of ['squidLayout', 'grid', 'squidsGotten', 'undoBuffer', 'cursorBelief'])\n            newState[name] = templateState[name];\n        // The squidsGotten value of 'unknown' is banned in turbo blurbo mode.\n        if (this.state.turboBlurboMode)\n            newState.squidsGotten = '0';\n        this.setState(newState);\n        this.doComputation(newState.grid, newState.squidsGotten);\n    }\n\n    undoLastMarking() {\n        const undoBuffer = [...this.state.undoBuffer];\n        if (undoBuffer.length === 0)\n            return;\n        const undoEntry = undoBuffer.pop();\n        sendSpywareEvent({kind: 'undoLastMarking', undoEntry});\n        this.setState({grid: undoEntry.grid, squidsGotten: undoEntry.squidsGotten, cursorBelief: undoEntry.cursorBelief, undoBuffer});\n        this.doComputation(undoEntry.grid, undoEntry.squidsGotten);\n    }\n\n    reportMiss() {\n        if (this.state.best !== null && this.state.grid[this.state.best] === null) {\n            sendSpywareEvent({kind: 'reportMiss', best: this.state.best, oldGrid: this.state.grid});\n            this.onClick(...this.state.best);\n        }\n    }\n\n    reportHit() {\n        if (this.state.best !== null && this.state.grid[this.state.best] === null) {\n            sendSpywareEvent({kind: 'reportHit', best: this.state.best, oldGrid: this.state.grid});\n            this.onClick(...this.state.best, true);\n            const {hits, misses, numericSquidsGotten} = this.getGridStatistics(this.state.grid, this.state.squidsGotten);\n            if (hits.length === 9) {\n                this.incrementKills();\n            }\n        }\n    }\n\n    splitTimer() {\n        const boardTimer = this.timerRef.current;\n        if (boardTimer === null)\n            return;\n        const elapsed = boardTimer.getSecondsElapsed();\n        const timerStepEstimate = boardTimer.state.invalidated ? null : boardTimer.guessStepsElapsedFromTime(elapsed);\n        this.setState({timerStepEstimate});\n        console.log('Timer step estimate:', timerStepEstimate);\n        sendSpywareEvent({kind: 'splitTimer', invalidated: boardTimer.state.invalidated, timerStepEstimate: timerStepEstimate, elapsed});\n        boardTimer.setState({\n            previouslyAccumulatedSeconds: 0.0,\n            timerStartMS: performance.now(),\n            // After the first split we're no longer loading the room.\n            includesLoadingTheRoom: false,\n            includedRewardsGotten: 0,\n            timerRunning: true,\n            invalidated: false,\n        });\n        this.doComputation(this.state.grid, this.state.squidsGotten);\n    }\n\n    async incrementKills() {\n        this.copyToUndoBuffer();\n        let numericValue = this.state.squidsGotten === 'unknown' ? 0 : Number(this.state.squidsGotten);\n        let grid = this.state.grid;\n        numericValue++;\n        if (numericValue === 4) {\n            // TODO: Think very carefully about this timer splitting, and if and when it should happen.\n            const gameHistoryArguments = this.makeGameHistoryArguments();\n            this.splitTimer();\n            const success = await this.copyToHistory(gameHistoryArguments);\n            if (success) {\n                numericValue = 0;\n                grid = this.makeEmptyGrid();\n                // FIXME: Make us able to undo across completions.\n                this.setState({undoBuffer: [], cursorBelief: [3, 3]});\n            } else {\n                numericValue = 3;\n            }\n        }\n        sendSpywareEvent({kind: 'incrementKills', oldGrid: this.state.grid, newGrid: grid, newNumericValue: numericValue});\n        this.setState({grid, squidsGotten: '' + numericValue});\n        this.doComputation(grid, '' + numericValue);\n    }\n\n    async copyToHistory(gameHistoryArguments) {\n        const {hits} = this.getGridStatistics(this.state.grid, this.state.squidsGotten);\n        if (gameHistoryArguments === undefined)\n            gameHistoryArguments = this.makeGameHistoryArguments();\n        await wasm;\n        const finalBoard = disambiguate_final_board(\n            Uint8Array.from(hits),\n            ...gameHistoryArguments,\n        );\n        if (finalBoard === undefined) {\n            // TODO: Show a proper error message in this case!\n            //alert('Ambiguous!');\n            sendSpywareEvent({\n                kind: 'ambiguousCopyToHistory',\n                grid: this.state.grid,\n                squidsGotten: this.state.squidsGotten,\n                gameHistoryArguments: gameHistoryArguments.map(a => Array.from(a)),\n            });\n            return false;\n        }\n        console.log('Final board:', finalBoard);\n        sendSpywareEvent({kind: 'copyToHistory', squidLayout: finalBoard});\n        const layoutString = this.boardIndexToLayoutString[finalBoard];\n        const observedBoards = gameHistoryArguments[0];\n        let fillIndex = observedBoards.length;\n        // If we're already at capacity then we have to shift the boards over.\n        if (fillIndex === this.layoutDrawingBoardRefs.length) {\n            this.shiftHistory();\n            fillIndex--;\n        }\n        this.layoutDrawingBoardRefs[fillIndex].current.setStateFromLayoutString(layoutString);\n        return true;\n    }\n\n    shiftHistory() {\n        sendSpywareEvent({kind: 'shiftHistory'});\n        const drawingBoards = this.layoutDrawingBoardRefs.map((ref) => ref.current);\n        for (let i = 0; i < drawingBoards.length -1; i++) {\n            drawingBoards[i].setState(drawingBoards[i + 1].state);\n        }\n        drawingBoards[drawingBoards.length - 1].clearBoard();\n    }\n\n    renderActualMap(overlayMode) {\n        return <div style={{justifySelf: 'center'}}>\n            {naturalsUpTo(8).map(\n                (y) => <div key={y} style={{\n                    display: 'flex',\n                }}>\n                    {naturalsUpTo(8).map(\n                        (x) => <Tile\n                            key={x + ',' + y}\n                            x={x} y={y}\n                            onClick={() => this.onClick(x, y)}\n                            text={this.state.grid[[x, y]]}\n                            prob={this.state.probs[[x, y]]}\n                            valid={this.state.valid}\n                            best={this.state.best}\n                            precision={overlayMode ? 0 : 2}\n                            opacity={overlayMode ? 0.5 + 0.3 * this.state.probs[[x, y]] : undefined}\n                        />\n                    )}\n                </div>\n            )}\n        </div>;\n    }\n\n    renderOverlayMap() {\n        if (!this.state.doVideoProcessing)\n            return;\n        return <div style={{\n            position: 'absolute',\n            top: '210px',\n            left: '127px',\n            transform: 'scale(1.01, 1.05)',\n            zIndex: 20,\n            display: 'inline-block',\n            /* opacity: 0.4, */\n        }}>\n            {this.renderActualMap(true)}\n        </div>;\n    }\n\n    render() {\n        let usedShots = 0;\n        let openingOptimizer = true;\n        for (let y = 0; y < 8; y++) {\n            for (let x = 0; x < 8; x++) {\n                if (this.state.grid[[x, y]] !== null) {\n                    usedShots++;\n                    if (this.state.grid[[x, y]] === 'HIT')\n                        openingOptimizer = false;\n                }\n            }\n        }\n        return <div style={{\n            margin: '20px',\n            color: 'white',\n        }}>\n            <div className=\"container\">\n                <div style={{justifySelf: \"end\", alignSelf: \"start\"}}>\n                    <div className=\"tableContainer\" style={{gridTemplateColumns: \"repeat(2, 1fr)\"}}>\n                        <span><strong>&nbsp;Item&nbsp;</strong></span>\n                        <span><strong>&nbsp;Value&nbsp;</strong></span>\n                        <span>&nbsp;Shots used:&nbsp;</span>\n                        <span>&nbsp;{usedShots}&nbsp;</span>\n                        {this.state.turboBlurboMode && this.state.turboBlurboTiming && <>\n                            <BoardTimer ref={this.timerRef} roomEnteredOffset={this.state.roomEnteredOffset} timedTickIntercept={this.state.timedTickIntercept} timedTickRate={this.state.timedTickRate}/>\n                            <span>&nbsp;Last steps:&nbsp;</span>\n                            <span>&nbsp;{this.state.timerStepEstimate === null ? '-' : this.state.timerStepEstimate}&nbsp;</span>\n                        </>}\n                        {this.state.turboBlurboMode && this.state.turboBlurboTiming && this.state.showKeyShortcuts && <>\n                            <span><strong>&nbsp;Control&nbsp;</strong></span><span><strong>&nbsp;Shortcut&nbsp;</strong></span>\n                            <span>&nbsp;Toggle Timer&nbsp;</span><span>&nbsp;Space&nbsp;</span>\n                            <span>&nbsp;Add Reward&nbsp;</span><span>&nbsp;,&nbsp;</span>\n                            <span>&nbsp;Remove Reward&nbsp;</span><span>&nbsp;&lt;&nbsp;</span>\n                            <span>&nbsp;Toggle Room Entered&nbsp;</span><span>&nbsp;m&nbsp;</span>\n                            <span>&nbsp;Invalidate Timer&nbsp;</span><span>&nbsp;;&nbsp;</span>\n                            <span>&nbsp;Reset Timer&nbsp;</span><span>&nbsp;:&nbsp;</span>\n                            <span>&nbsp;Split Timer&nbsp;</span><span>&nbsp;s&nbsp;</span>\n                        </>}\n                    </div>\n                    {this.state.turboBlurboMode && this.state.turboBlurboTiming && <>\n                        <button style={{ fontSize: '120%', margin: '10px' }} onClick={() => { this.setState({showKeyShortcuts: !this.state.showKeyShortcuts}) }}>Toggle Show Shortcuts</button><br/>\n                        <button style={{ fontSize: '120%', margin: '10px' }} onClick={() => { this.setState({spywareMode: !this.state.spywareMode}) }}>{\n                            this.state.spywareMode ? <>Disable Spyware Mode</> : <>Enable Spyware Mode</>\n                        }</button>\n                    </>}\n                </div>\n                {this.state.doVideoProcessing || this.renderActualMap(false)}\n                <span style={{display: \"inline-block\"}}></span>\n            </div>\n            {this.state.valid || this.state.turboBlurboMode || <div style={{ fontSize: '150%', color: 'white' }}>Invalid configuration! This is not possible.</div>}\n            <br />\n            <div style={{ fontSize: '150%' }}>\n                <span style={{ color: 'white' }}>Number of squids killed:</span>\n                <select\n                    style={{ marginLeft: '20px', fontSize: '100%' }}\n                    value={this.state.squidsGotten}\n                    onChange={(event) => {\n                        this.setState({ squidsGotten: event.target.value });\n                        this.doComputation(this.state.grid, event.target.value);\n                    }}\n                >\n                    {/* In turbo blurbo mode don't allow unknown, because it's just an accident waiting to happen for a runner. */}\n                    {\n                        this.state.turboBlurboMode ||\n                        <option value=\"unknown\">Unknown</option>\n                    }\n                    <option value=\"0\">0</option>\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                </select>\n                <br />\n                {/*\n                <span style={{color: 'white', fontSize: '80%'}}>\n                    Probability of this pattern yielding these results: {(100 * this.state.observationProb).toFixed(2) + '%'}\n                </span>\n                */}\n            </div>\n            <br/>\n            {\n                this.state.turboBlurboMode &&\n                <>\n                    <button style={{ fontSize: '150%', margin: '10px' }} onClick={() => { this.reportMiss(); }}>Miss (z)</button>\n                    <button style={{ fontSize: '150%', margin: '10px' }} onClick={() => { this.reportHit(); }}>Hit (x)</button>\n                    <button style={{ fontSize: '150%', margin: '10px' }} onClick={() => { this.copyToHistory(); }}>Copy to History (h)</button>\n                    <button style={{ fontSize: '150%', margin: '10px' }} onClick={() => { this.shiftHistory(); }}>Shift History</button>\n                </>\n            }\n            <button style={{ fontSize: '150%', margin: '10px' }} onClick={() => { this.incrementKills(); }}>Increment Kills (c)</button>\n            <button style={{ fontSize: '150%', margin: '10px' }} onClick={() => { this.clearField(); }}>Reset</button>\n            {\n                this.state.turboBlurboMode ||\n                <select\n                    style={{ marginLeft: '20px', fontSize: '150%' }}\n                    value={this.state.mode}\n                    onChange={(event) => this.setState({ mode: event.target.value })}\n                >\n                    <option value=\"calculator\">Calculator Mode</option>\n                    <option value=\"practice\">Practice Mode</option>\n                </select>\n            }\n            {\n                this.state.turboBlurboMode &&\n                <div style={{display: 'inline-block', margin: '10px', border: '1px solid white', borderRadius: '5px', fontSize: '130%', padding: '5px'}}>\n                    <span style={{margin: '5px'}}>Timer mode:</span>\n                    <input\n                        type=\"checkbox\"\n                        checked={this.state.turboBlurboTiming}\n                        onChange={(event) => this.setState({ turboBlurboTiming: !this.state.turboBlurboTiming })}\n                        style={{\n                            margin: '10px',\n                            transform: 'scale(2)',\n                        }}\n                    />\n                </div>\n            }\n            <br />\n            {openingOptimizer && this.state.mode === 'calculator' && (!this.state.turboBlurboMode) && <>\n                <div style={{ color: 'white', fontSize: '120%', marginTop: '20px' }}>\n                    Opening optimizer: Probability that this<br />pattern would get at least one hit: {\n                        this.state.valid ? ((100 * Math.max(0, 1 - this.state.observationProb)).toFixed(2) + '%') : \"Invalid\"\n                    }\n                </div>\n            </>}\n            <br/>\n            {this.state.turboBlurboMode === 'initializing' && <div style={{ fontSize: '150%', color: 'white' }}>Downloading table...<br/></div>}\n            {this.state.turboBlurboMode === true && <>\n                <div>\n                    {this.layoutDrawingBoardRefs.map((ref, i) =>\n                        <LayoutDrawingBoard parent={this} ref={ref} key={i}/>\n                    )}\n                </div>\n                <hr/>\n                <div style={{display:\"grid\", gridTemplateColumns: \"1fr auto 1fr\"}}>\n                    <div style={{display:\"grid\", gridTemplateRows: \"1fr 1fr 1fr\", gridTemplateColumns: \"repeat(8, 1fr)\", justifyItems: \"center\", alignItems: \"true\", gridColumn: \"2\"}}>\n                        <div style={{gridRow: \"1\", gridColumn: \"1 / span 8\"}}>Gaussian RNG step count beliefs (all counts in <i>thousands</i> of steps, except \"Room entered offset\"):</div>\n                        <div style={{gridRow: \"2\", gridColumn: \"1\"}}>First board mean:     </div><input style={{width: '60px', fontSize: '120%', gridRow: \"2\", gridColumn: \"2\"}} value={this.state.firstBoardStepsThousands}       onChange={event => this.setState({firstBoardStepsThousands: event.target.value})}/>\n                        <div style={{gridRow: \"2\", gridColumn: \"3\"}}>First board stddev:   </div><input style={{width: '60px', fontSize: '120%', gridRow: \"2\", gridColumn: \"4\"}} value={this.state.firstBoardStepsThousandsStdDev} onChange={event => this.setState({firstBoardStepsThousandsStdDev: event.target.value})}/> \n                        <div style={{gridRow: \"2\", gridColumn: \"5\"}}>Next board mean:      </div><input style={{width: '60px', fontSize: '120%', gridRow: \"2\", gridColumn: \"6\"}} value={this.state.nextBoardStepsThousands}        onChange={event => this.setState({nextBoardStepsThousands: event.target.value})}/>\n                        <div style={{gridRow: \"2\", gridColumn: \"7\"}}>Next board stddev:    </div><input style={{width: '60px', fontSize: '120%', gridRow: \"2\", gridColumn: \"8\"}} value={this.state.nextBoardStepsThousandsStdDev}  onChange={event => this.setState({nextBoardStepsThousandsStdDev: event.target.value})}/>\n                        <div style={{gridRow: \"3\", gridColumn: \"1\"}}>Timed board stddev:   </div><input style={{width: '60px', fontSize: '120%', gridRow: \"3\", gridColumn: \"2\"}} value={this.state.timedBoardStepsThousandsStdDev} onChange={event => this.setState({timedBoardStepsThousandsStdDev: event.target.value})}/>\n                        <div style={{gridRow: \"3\", gridColumn: \"3\"}}>Timed Tick Intercept: </div><input style={{width: '60px', fontSize: '120%', gridRow: \"3\", gridColumn: \"4\"}} value={this.state.timedTickIntercept}             onChange={event => this.setState({timedTickIntercept: event.target.value})}/>\n                        <div style={{gridRow: \"3\", gridColumn: \"5\"}}>Timed Tick Rate:      </div><input style={{width: '60px', fontSize: '120%', gridRow: \"3\", gridColumn: \"6\"}} value={this.state.timedTickRate}                  onChange={event => this.setState({timedTickRate: event.target.value})}/>\n                        <div style={{gridRow: \"3\", gridColumn: \"7\"}}>Room entered offset:  </div><input style={{width: '60px', fontSize: '120%', gridRow: \"3\", gridColumn: \"8\"}} value={this.state.roomEnteredOffset}              onChange={event => this.setState({roomEnteredOffset: event.target.value})}/>\n                    </div>\n                </div>\n\n                <button style={{ fontSize: '150%', margin: '10px' }} onClick={() => { this.saveConfigParams(); }}>Save Settings</button> &nbsp;\n                <button style={{ fontSize: '150%', margin: '10px' }} onClick={() => { this.factoryResetConfigParams(); }}>Reset to Defaults</button>\n                <br/>\n\n                <div style={{margin: '20px', color: 'white', fontSize: '130%', border: '2px solid white', borderRadius: '8px', width: '400px', minHeight: '20px', display: 'inline-block'}}>\n                    {this.state.potentialMatches.map((match, i) => {\n                        if (match[0] === null) {\n                            return <div key={0}>No Matches Found!</div>\n                        }\n                        else {\n                            const diffs = match.slice(1);\n                            return <div key={i}>\n                                Potential match: {match[0]}{diffs.map((x, i) => <> +{x - match[i]}</>)}\n                            </div>;\n                        }\n                    })}\n                </div><br/>\n                <button style={{ fontSize: '150%', margin: '10px' }} onClick={() => { this.recomputePotentialMatches(); }}>Find Match Indices</button>\n                <div style={{ fontSize: '150%', color: 'white' }}>Turbo blurbo mode initialized.<br/></div>\n            </>}\n            <button disabled={this.state.turboBlurboMode !== false} style={{ fontSize: '150%', margin: '10px' }} onClick={() => {\n                this.initializeTurboBlurboMode(false);\n            }}>Initialize Turbo Blurbo Mode</button><br/>\n            <button disabled={this.state.turboBlurboMode !== false} style={{ fontSize: '150%', margin: '10px' }} onClick={() => {\n                this.initializeTurboBlurboMode(true);\n            }}>Initialize Turbo Blurbo Mode (big table)</button><br/>\n\n            {this.state.spywareMode && <><SpywareModeConfiguration /><br/></>}\n\n            <span style={{color: 'white'}}>Last recompute time: {this.state.lastComputationTime.toFixed(2)}ms</span>\n            <div style={{display: 'none'}} ref={this.hiddenAreaRef}></div>\n        </div>;\n    }\n}\n\nfunction globalShortcutsHandler(evt) {\n    // Check if the target is an input field that should take precedence over shortcuts.\n    if (evt.target && 'getAttribute' in evt.target && evt.target.getAttribute('data-stop-shortcuts'))\n        return;\n\n    // Add z or y for German keyboard support.\n    var event_key = evt.key.toLowerCase();\n    if (event_key === 'z' && evt.ctrlKey)\n        globalMap.undoLastMarking();\n    else if ((event_key === 'z' || event_key === 'y')  && globalMap !== null)\n        globalMap.reportMiss();\n    if ((event_key === 'x') && globalMap !== null)\n        globalMap.reportHit();\n    if (event_key === 'c' && globalMap !== null)\n        globalMap.incrementKills();\n    if (event_key === 's' && globalMap !== null)\n        globalMap.splitTimer();\n    if (event_key === 'h' && globalMap !== null)\n        globalMap.copyToHistory();\n\n    if (event_key === ' ' && globalBoardTimer !== null) {\n        globalBoardTimer.toggleRunning();\n        evt.preventDefault();\n    }\n    if (event_key === ',' && globalBoardTimer !== null)\n        globalBoardTimer.adjustRewards(+1);\n    if (event_key === '<' && globalBoardTimer !== null)\n        globalBoardTimer.adjustRewards(-1);\n    if (event_key === 'm' && globalBoardTimer !== null)\n        globalBoardTimer.toggleLoadingTheRoom();\n    if (event_key === ';' && globalBoardTimer !== null)\n        globalBoardTimer.toggleInvalidated();\n    if (event_key === ':' && globalBoardTimer !== null)\n        globalBoardTimer.resetTimer();\n}\n\ndocument.addEventListener('keydown', globalShortcutsHandler);\n\nclass App extends React.Component {\n    componentDidMount() {\n        document.body.style.backgroundColor = '#666';\n    }\n\n    render() {\n        return <div style={{\n            textAlign: 'center',\n        }}>\n            <div style={{ display: 'inline-block', width: '600px' }}>\n                <h1 style={{ color: 'white' }}>Sploosh Kaboom Probability Calculator</h1>\n                <p style={{ color: 'white' }}>\n                    This is a tool for computing the likely locations of squids in the sploosh kaboom minigame of The Legend of Zelda: The Wind Waker (both SD and HD versions).\n                    Unfortunately it's currently pretty complicated to use correctly.\n                    A collection of tutorials will be compiled at some point, hopefully soon.\n                    For now, see the <a href=\"https://github.com/petersn/web-sploosh-kaboom\">GitHub repository</a>.\n                </p>\n            </div>\n            <MainMap />\n            <span style={{ color: 'white' }}>Made by Peter Schmidt-Nielsen, CryZe, and csunday95 ({VERSION_STRING})</span><br/>\n            <span style={{ color: 'white' }}></span>\n        </div>;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}