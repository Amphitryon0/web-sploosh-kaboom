{"version":3,"sources":["wasm/sploosh_wasm.js","App.js","serviceWorker.js","index.js"],"names":["wasm","cachegetUint8Memory0","WASM_VECTOR_LEN","passArray8ToWasm0","arg","malloc","ptr","length","buffer","memory","Uint8Array","set","cachegetUint32Memory0","passArray32ToWasm0","Uint32Array","cachegetFloat64Memory0","getFloat64Memory0","Float64Array","passArrayF64ToWasm0","cachegetInt32Memory0","getInt32Memory0","Int32Array","getArrayF64FromWasm0","len","subarray","calculate_probabilities_without_sequence","hits","misses","squids_gotten","ptr0","__wbindgen_malloc","len0","ptr1","len1","v2","r0","r1","slice","__wbindgen_free","calculate_probabilities_from_game_history","observed_boards","prior_steps_from_previous_means","prior_steps_from_previous_stddevs","ptr2","len2","ptr3","len3","ptr4","len4","v5","disambiguate_board","undefined","set_board_table","board_table","load","module","imports","a","Response","WebAssembly","instantiateStreaming","headers","get","console","warn","arrayBuffer","bytes","instantiate","instance","Instance","init","input","Request","URL","fetch","exports","__wbindgen_wasm_module","interpolate","require","globalDB","indexedDBreq","window","indexedDB","open","dbWrite","key","value","transaction","onerror","event","alert","objectStore","add","dbRead","Promise","resolve","reject","request","onsuccess","target","result","errorCode","onupgradeneeded","createObjectStore","colormap","naturalsUpTo","n","Array","keys","Tile","isBest","this","props","best","x","y","backgroundColor","text","prob","className","style","border","valid","outline","zIndex","opacity","onClick","toFixed","precision","React","Component","process","globalMap","dbCachedFetch","url","callback","cacheMiss","req","XMLHttpRequest","responseType","onload","evt","response","send","catch","makeBoardIndicesTable","actuallyMakeBoardIndicesTable","descs","direction","push","allBoards","boardIndices","placeSquid","board","desc","i","fill","squid2","squid3","squid4","count","from","index","map","join","generateRandomChar","base58","array","crypto","getRandomValues","generateRandomToken","SPYWARE_HOST","globalSpyware","globalSpywareCounter","sendSpywareEvent","eventData","state","loggedIn","sequenceAware","usingTimer","spywareMode","timestamp","Date","getTime","body","JSON","stringify","username","token","session","events","method","setState","charsSent","ok","errors","SpywareModeConfiguration","localStorage","getItem","setItem","defaultUsername","json","log","success","kind","version","tableSize","margin","padding","borderRadius","width","fontFamily","marginLeft","onLogout","data-stop-shortcuts","onChange","onLogin","marginRight","href","color","sampleSquid","Math","round","random","cells","cell","newXY","LayoutDrawingBoard","grid","makeEmptyGrid","selectedCell","changeMade","dx","dy","countsBySquid","2","3","4","layoutString","getLayoutString","boardIndex","parent","isSelectedCell","globalBoardTimer","setInterval","forceUpdate","BoardTimer","previouslyAccumulatedSeconds","timerStartMS","timerRunning","includesLoadingTheRoom","includedRewardsGotten","invalidated","now","performance","elapsed","oldState","delta","max","min","total","timeDeltaSeconds","prediction","Number","timedTickIntercept","timedTickRate","roomEnteredOffset","getSecondsElapsed","guessStepsElapsedFromTime","defaultConfigurationParams","firstBoardStepsThousands","firstBoardStepsThousandsStdDev","nextBoardStepsThousands","nextBoardStepsThousandsStdDev","timedBoardStepsThousandsStdDev","showAdvancedSettings","MainMap","layoutDrawingBoardRefs","createRef","timerRef","makeEmptyState","doComputation","squidsGotten","probs","mode","squidLayout","layout","hitLocations","candidate","isAdmissible","generateLayout","undoBuffer","cursorBelief","observationProb","lastComputationTime","showKeyShortcuts","timerStepEstimate","potentialMatches","savedSettings","parse","Object","name","configParams","settings","getConfigParams","boardIndexToLayoutString","buf","boardTable","v","clearField","observedBoards","startIndex","scanRange","soughtBoard","indexMax","findMatchingLocations","subResult","makeGameHistoryArguments","matches","match","rawObservedBoards","ref","current","ob","priorStepsFromPreviousMeans","priorStepsFromPreviousStdDevs","first","gridValue","numericSquidsGotten","t0","getGridStatistics","gameHistoryArguments","probabilities","maxY","maxX","highestProb","p1","p2","l1Distance","abs","distancePenaltyMultiplier","distanceAdjustedProb","t1","oldValid","didWeConcludeTheSituationWasValid","computationTime","setAsHit","copyToUndoBuffer","arr","arrayContains","squid","killed","templateState","newState","undoEntry","pop","oldGrid","incrementKills","boardTimer","numericValue","splitTimer","copyToHistory","newGrid","newNumericValue","finalBoard","fillIndex","shiftHistory","setStateFromLayoutString","drawingBoards","clearBoard","likelyBoard","usedShots","openingOptimizer","placeSelf","id","renderActualMap","marginTop","reportMiss","reportHit","killMostLikely","htmlFor","type","checked","disabled","saveConfigParams","factoryResetConfigParams","minHeight","display","diffs","recomputePotentialMatches","defaultChecked","loadSequenceTable","document","addEventListener","getAttribute","ctrlKey","toLowerCase","undoLastMarking","code","toggleRunning","preventDefault","shiftKey","adjustRewards","toggleLoadingTheRoom","resetTimer","toggleInvalidated","App","maxWidth","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3a7bbe50.chunk.js","sourcesContent":["\nlet wasm;\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\n\nfunction passArray32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4);\n    getUint32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetFloat64Memory0 = null;\nfunction getFloat64Memory0() {\n    if (cachegetFloat64Memory0 === null || cachegetFloat64Memory0.buffer !== wasm.memory.buffer) {\n        cachegetFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachegetFloat64Memory0;\n}\n\nfunction passArrayF64ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 8);\n    getFloat64Memory0().set(arg, ptr / 8);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction getArrayF64FromWasm0(ptr, len) {\n    return getFloat64Memory0().subarray(ptr / 8, ptr / 8 + len);\n}\n/**\n* @param {Uint8Array} hits\n* @param {Uint8Array} misses\n* @param {number} squids_gotten\n* @returns {Float64Array | undefined}\n*/\nexport function calculate_probabilities_without_sequence(hits, misses, squids_gotten) {\n    var ptr0 = passArray8ToWasm0(hits, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(misses, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    wasm.calculate_probabilities_without_sequence(8, ptr0, len0, ptr1, len1, squids_gotten);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    let v2;\n    if (r0 !== 0) {\n        v2 = getArrayF64FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 8);\n    }\n    return v2;\n}\n\n/**\n* @param {Uint8Array} hits\n* @param {Uint8Array} misses\n* @param {number} squids_gotten\n* @param {Uint32Array} observed_boards\n* @param {Uint32Array} prior_steps_from_previous_means\n* @param {Float64Array} prior_steps_from_previous_stddevs\n* @returns {Float64Array | undefined}\n*/\nexport function calculate_probabilities_from_game_history(hits, misses, squids_gotten, observed_boards, prior_steps_from_previous_means, prior_steps_from_previous_stddevs) {\n    var ptr0 = passArray8ToWasm0(hits, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(misses, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passArray32ToWasm0(observed_boards, wasm.__wbindgen_malloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passArray32ToWasm0(prior_steps_from_previous_means, wasm.__wbindgen_malloc);\n    var len3 = WASM_VECTOR_LEN;\n    var ptr4 = passArrayF64ToWasm0(prior_steps_from_previous_stddevs, wasm.__wbindgen_malloc);\n    var len4 = WASM_VECTOR_LEN;\n    wasm.calculate_probabilities_from_game_history(8, ptr0, len0, ptr1, len1, squids_gotten, ptr2, len2, ptr3, len3, ptr4, len4);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    let v5;\n    if (r0 !== 0) {\n        v5 = getArrayF64FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 8);\n    }\n    return v5;\n}\n\n/**\n* @param {Uint8Array} hits\n* @param {Uint8Array} misses\n* @param {number} squids_gotten\n* @param {Uint32Array} observed_boards\n* @param {Uint32Array} prior_steps_from_previous_means\n* @param {Float64Array} prior_steps_from_previous_stddevs\n* @returns {number | undefined}\n*/\nexport function disambiguate_board(hits, misses, squids_gotten, observed_boards, prior_steps_from_previous_means, prior_steps_from_previous_stddevs) {\n    var ptr0 = passArray8ToWasm0(hits, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(misses, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passArray32ToWasm0(observed_boards, wasm.__wbindgen_malloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passArray32ToWasm0(prior_steps_from_previous_means, wasm.__wbindgen_malloc);\n    var len3 = WASM_VECTOR_LEN;\n    var ptr4 = passArrayF64ToWasm0(prior_steps_from_previous_stddevs, wasm.__wbindgen_malloc);\n    var len4 = WASM_VECTOR_LEN;\n    wasm.disambiguate_board(8, ptr0, len0, ptr1, len1, squids_gotten, ptr2, len2, ptr3, len3, ptr4, len4);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    return r0 === 0 ? undefined : r1 >>> 0;\n}\n\n/**\n* @param {Uint32Array} board_table\n*/\nexport function set_board_table(board_table) {\n    var ptr0 = passArray32ToWasm0(board_table, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.set_board_table(ptr0, len0);\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') !== 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nasync function init(input) {\n    //if (typeof input === 'undefined') {\n    //    input = import.meta.url.replace(/\\.js$/, '_bg.wasm');\n    //}\n    const imports = {};\n\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    const { instance, module } = await load(await input, imports);\n\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n\n    return wasm;\n}\n\nexport default init;\n\n","import React from 'react';\nimport './App.css';\nimport init, {\n    set_board_table,\n    calculate_probabilities_without_sequence,\n    calculate_probabilities_from_game_history,\n    disambiguate_board,\n} from './wasm/sploosh_wasm.js';\nconst interpolate = require('color-interpolate');\n\nconst VERSION_STRING = 'v0.1.1';\n\nvar globalDB = null;\nconst indexedDBreq = window.indexedDB.open('splooshkaboom', 1);\nindexedDBreq.onerror = function(event) {\n    alert('Failed to access IndexedDB.');\n};\n// Known issue: There's basically a race condition here in that I don't\n// wait for this onsuccess to potentially start calling dbRead.\nindexedDBreq.onsuccess = function(event) {\n    globalDB = event.target.result;\n    globalDB.onerror = function(event) {\n        alert('IndexedDB error: ' + event.target.errorCode);\n    };\n};\nindexedDBreq.onupgradeneeded = function(event) {\n    const db = event.target.result;\n    db.createObjectStore('sk');\n}\n\n// TODO: Am I using IndexedDB even remotely correctly!? This looks so weird...\n// Do I not have to somehow end or commit the transactions!?\n\nfunction dbWrite(key, value) {\n    if (globalDB === null)\n        return;\n\n    const transaction = globalDB.transaction(['sk'], 'readwrite');\n\n    transaction.onerror = function(event) {\n        alert('Transaction error!');\n    }\n    transaction.objectStore('sk').add(value, key);\n}\n\nfunction dbRead(key) {\n    return new Promise((resolve, reject) => {\n        const transaction = globalDB.transaction(['sk']);\n\n        transaction.onerror = function(event) {\n            alert('Transaction error!');\n        }\n        const objectStore = transaction.objectStore('sk');\n        const request = objectStore.get(key);\n        request.onsuccess = function(event) {\n            resolve(event.target.result);\n        };\n        request.onerror = function(event) {\n            reject();\n        };\n    });\n}\n\n// .        . . . .\n// 0123456789abcdef\nconst colormap = interpolate(['#004', '#070', '#090', '#0b0', '#0d0', '#0f0', '#6f6']);\nconst naturalsUpTo = (n) => [...Array(n).keys()];\n\nclass Tile extends React.Component {\n    render() {\n        const isBest = this.props.best !== null && this.props.best[0] === this.props.x && this.props.best[1] === this.props.y;\n\n        let backgroundColor = this.props.backgroundColor;\n        if (backgroundColor === undefined) {\n            backgroundColor = this.props.text === null ? colormap(this.props.prob) : (\n                this.props.text === 'HIT' ? '#a2a' : '#44a'\n            );\n        }\n\n        return <div className=\"boardTile\"\n            key={this.props.x + ',' + this.props.y}\n            style={{\n                border: this.props.valid ? '1px solid grey' : '1px solid red',\n                outline: isBest ? '2px solid yellow' : '',\n                zIndex: isBest ? 1 : 0,\n                opacity: this.props.opacity,\n                backgroundColor,\n            }}\n            onClick={this.props.onClick}\n        >\n            {this.props.text === null ? (this.props.prob * 100).toFixed(this.props.precision) + '%' : this.props.text}\n        </div>;\n    }\n}\n\nlet wasm = init(process.env.PUBLIC_URL + \"/sploosh_wasm_bg.wasm\");\n\n// Super ugly, please forgive me. :(\nvar globalMap = null;\n\nasync function dbCachedFetch(url, callback) {\n    function cacheMiss() {\n        const req = new XMLHttpRequest();\n        req.open('GET', process.env.PUBLIC_URL + url, true);\n        req.responseType = 'arraybuffer';\n        req.onload = (evt) => {\n            dbWrite(url, req.response);\n            callback(req.response);\n        };\n        req.send();\n        return null;\n    }\n    const result = await dbRead(url).catch(cacheMiss);\n    if (result === undefined) {\n        cacheMiss();\n        return;\n    }\n    // This is sort of an ugly protocol, but if we hit the catch path above\n    // we signal that the callback was already called by returning null.\n    if (result === null)\n        return;\n    callback(result);\n}\n\nasync function makeBoardIndicesTable() {\n    function cacheMiss() {\n        const result = actuallyMakeBoardIndicesTable();\n        dbWrite('boardIndicesTable', result);\n        return result;\n    }\n    const result = await dbRead('boardIndicesTable').catch(cacheMiss);\n    if (result === undefined)\n        return cacheMiss();\n    return result;\n}\n\nfunction actuallyMakeBoardIndicesTable() {\n    // This convention here has to match that in the Rust component and table building C++ exactly!\n    const descs = [];\n    for (let y = 0; y < 8; y++)\n        for (let x = 0; x < 8; x++)\n            for (const direction of [false, true])\n                descs.push({x, y, direction});\n    const allBoards = [];\n    const boardIndices = {};\n    function placeSquid(board, desc, length) {\n        for (let i = 0; i < length; i++) {\n            let {x, y} = desc;\n            if (desc.direction)\n                x += i;\n            else\n                y += i;\n            const index = x + 8 * y;\n            if (x >= 8 || y >= 8)\n                return;\n            board[index] = length;\n        }\n    }\n    const board = new Array(64).fill(0);\n\n    for (const squid2 of descs) {\n        for (const squid3 of descs) {\n            for (const squid4 of descs) {\n                board.fill(0);\n                placeSquid(board, squid2, 2);\n                placeSquid(board, squid3, 3);\n                placeSquid(board, squid4, 4);\n                let count = 0;\n                for (const entry of board)\n                    count += entry\n                if (count !== 2*2 + 3*3 + 4*4)\n                    continue;\n                allBoards.push(Array.from(board));\n            }\n        }\n    }\n    let index = 0;\n    for (const board of allBoards) {\n        boardIndices[board.map((i) => i === 0 ? '.' : i).join('')] = index;\n        index++;\n    }\n    return boardIndices;\n}\n\nfunction generateRandomChar() {\n    const base58 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n    const array = new Uint8Array(1);\n    while (true) {\n        crypto.getRandomValues(array);\n        const index = array[0] & 63;\n        if (index < base58.length)\n            return base58[index];\n    }\n}\n\nfunction generateRandomToken(n) {\n    let result = '';\n    for (let i = 0; i < n; i++)\n        result += generateRandomChar();\n    return result;\n}\n\n// Ugh, maybe later I'll give it a proper domain, and move over to https.\nconst SPYWARE_HOST = 'http://skphonehome.peter.website:1234';\n\nvar globalSpyware = null;\nvar globalSpywareCounter = -1;\n\n// To anyone reading this:\n// I chose the name \"spyware\" to be silly — this is a completely optional opt-in feature to send usage data for analysis.\n// You have to actually explicitly enable the spyware with a checkbox in the GUI, and there's an explanation.\nasync function sendSpywareEvent(eventData) {\n    if (globalSpyware === null || globalMap === null)\n        return;\n    if (!globalSpyware.state.loggedIn)\n        return;\n    if (!globalMap.state.sequenceAware || !globalMap.state.usingTimer)\n        return;\n    if (!globalMap.state.spywareMode)\n        return;\n    eventData.timestamp = (new Date()).getTime() / 1000;\n    globalSpywareCounter++;\n    const body = JSON.stringify({\n        username: globalSpyware.state.username,\n        token: globalSpyware.state.token,\n        session: globalSpyware.session,\n        events: {\n            [globalSpywareCounter]: eventData,\n        },\n    });\n    const response = await fetch(SPYWARE_HOST + '/write', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body,\n    });\n    globalSpyware.setState({charsSent: globalSpyware.state.charsSent + body.length});\n    if (!response.ok)\n        globalSpyware.setState({errors: true});\n}\n\nclass SpywareModeConfiguration extends React.Component {\n    constructor() {\n        super();\n        globalSpyware = this;\n        this.session = generateRandomToken(16);\n        let token = localStorage.getItem('SKToken');\n        if (token === null) {\n            token = generateRandomToken(8);\n            localStorage.setItem('SKToken', token);\n        }\n        let defaultUsername = localStorage.getItem('SKUsername');\n        this.state = {\n            username: defaultUsername === null ? '' : defaultUsername,\n            token,\n            loggedIn: false,\n            errors: false,\n            charsSent: false,\n        };\n    }\n\n    async onLogin() {\n        const username = this.state.username;\n        if (username === '') {\n            alert('Username must be non-empty');\n            return;\n        }\n        const response = await fetch(SPYWARE_HOST + '/login', {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n                'username': username,\n                'token': this.state.token,\n            }),\n        });\n        const result = await response.json();\n        console.log('Login:', result);\n        if (result.success) {\n            // Stash the username when we successfully log in, as a convenience for the user.\n            localStorage.setItem('SKUsername', username);\n            this.setState({loggedIn: true}, () => {\n                sendSpywareEvent({\n                    kind: 'login',\n                    version: VERSION_STRING,\n                    tableSize: globalMap === null ? null : globalMap.tableSize,\n                });\n            });\n        } else {\n            alert('Bad token! This username might already be taken. If you need to recover your login token contact Peter Schmidt-Nielsen.');\n        }\n    }\n\n    async onLogout() {\n        this.setState({loggedIn: false});\n    }\n\n    render() {\n        return <div style={{\n            margin: '10px auto',\n            padding: '10px',\n            border: '2px solid white',\n            borderRadius: '8px',\n            width: '450px',\n            backgroundColor: this.state.loggedIn ? '#696' : '#777',\n        }}>\n            <div>Spyware Mode:</div>\n            {\n                this.state.loggedIn ?\n                    <>\n                        <div>\n                            Logged in as: <span style={{fontFamily: 'monospace'}}>{this.state.username}</span>\n                            <button style={{marginLeft: '20px'}} onClick={() => this.onLogout()}>Logout</button>\n                        </div>\n                        <div>\n                            Events sent: {globalSpywareCounter + 1}\n                            Chars sent: {this.state.charsSent}\n                        </div>\n                    </> : <>\n                        Username: <input data-stop-shortcuts style={{width: '100px', fontFamily: 'monospace'}} value={this.state.username} onChange={event => this.setState({username: event.target.value})}/>\n                        <button style={{marginLeft: '20px'}} onClick={() => this.onLogin()}>Login</button>\n                    </>\n            }\n            <details>\n                <summary>Access Token</summary>\n                Token: <input data-stop-shortcuts style={{width: '120px', marginRight: '20px'}} value={this.state.token} onChange={event => this.setState({token: event.target.value})}/>\n                <button onClick={() => { localStorage.setItem('SKToken', this.state.token); }}>Update Saved Token</button>\n                <p>\n                    The above token is generated just for you.\n                    Anyone who has the above token can submit data that will appear on the stats page for your username (so I recommend not showing it on stream).\n                    If you lose access to it you'll have to pick a new username, or ask <a href=\"mailto:schmidtnielsenpeter@gmail.com\">Peter Schmidt-Nielsen</a> to help you recover your access token.\n                    The token is automatically saved between sessions, but might be lost if you clear all your browser history.\n                    I recommend copying this token down somewhere.\n                </p>\n            </details>\n            {this.state.errors && <span style={{ color: 'red' }}>\n                Spyware reporting error!\n            </span>}\n        </div>;\n    }\n}\n\nfunction sampleSquid(length) {\n    const x = Math.round(Math.random() * 8);\n    const y = Math.round(Math.random() * 8);\n    const direction = Math.random() < 0.5;\n    const cells = [[x, y]];\n    for (let i = 0; i < length - 1; i++) {\n        const cell = cells[cells.length - 1];\n        const newXY = direction ? [cell[0] + 1, cell[1]] : [cell[0], cell[1] + 1];\n        cells.push(newXY);\n    }\n    return cells;\n}\n\nfunction generateLayout() {\n    const layout = {};\n    const hitLocations = {};\n    for (const n of [2, 3, 4]) {\n        while (true) {\n            const candidate = sampleSquid(n);\n            let isAdmissible = true;\n            for (const cell of candidate)\n                if (cell[0] > 7 || cell[1] > 7 || hitLocations[cell] === true)\n                    isAdmissible = false;\n            if (isAdmissible) {\n                layout['squid' + n] = candidate;\n                for (const cell of candidate)\n                    hitLocations[cell] = true;\n                break;\n            }\n        }\n    }\n    return layout;\n}\n\nclass LayoutDrawingBoard extends React.Component {\n    constructor() {\n        super();\n        this.state = { grid: this.makeEmptyGrid(), selectedCell: null };\n    }\n\n    makeEmptyGrid() {\n        const grid = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                grid[[x, y]] = '.';\n        return grid;\n    }\n\n    clearBoard() {\n        this.setState({ grid: this.makeEmptyGrid(), selectedCell: null });\n    }\n\n    onClick(x, y) {\n        if (this.state.selectedCell === null) {\n            this.setState({ selectedCell: [x, y] });\n            return;\n        }\n        const grid = {...this.state.grid};\n        let changeMade = false;\n        for (const length of [2, 3, 4]) {\n            for (const [dx, dy] of [[+1, 0], [0, +1], [-1, 0], [0, -1]]) {\n                if (this.state.selectedCell[0] === x + dx * (length - 1) && this.state.selectedCell[1] === y + dy * (length - 1)) {\n                    // If this squid appears anywhere else, obliterate it.\n                    for (let y = 0; y < 8; y++)\n                        for (let x = 0; x < 8; x++)\n                            if (grid[[x, y]] === '' + length)\n                                grid[[x, y]] = '.';\n                    // Fill in the squid here.\n                    for (let i = 0; i < length; i++)\n                        grid[[x + i * dx, y + i * dy]] = '' + length;\n                    changeMade = true;\n                }\n            }\n        }\n        // If any squid has the wrong count, then totally eliminate it.\n        const countsBySquid = {2: 0, 3: 0, 4: 0, '.': 0};\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                countsBySquid[grid[[x, y]]]++;\n        for (const length of [2, 3, 4])\n            if (countsBySquid[length] !== length)\n                for (let y = 0; y < 8; y++)\n                    for (let x = 0; x < 8; x++)\n                        if (grid[[x, y]] === '' + length)\n                            grid[[x, y]] = '.';\n        if (changeMade)\n            this.setState({ grid });\n        this.setState({ selectedCell: null });\n    }\n\n    getLayoutString() {\n        // Quadratic time, but who cares?\n        let layoutString = '';\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                layoutString += this.state.grid[[x, y]];\n        return layoutString;\n    }\n\n    setStateFromLayoutString(layoutString) {\n        const grid = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                grid[[x, y]] = layoutString[x + 8 * y];\n        this.setState({grid});\n    }\n\n    render() {\n        const layoutString = this.getLayoutString();\n        let boardIndex = this.props.parent.boardIndices[layoutString];\n        if (boardIndex === undefined) {\n            boardIndex = \"waiting...\";\n        }\n        const isSelectedCell = (x, y) => this.state.selectedCell !== null && x === this.state.selectedCell[0] && y === this.state.selectedCell[1];\n\n        return <div className=\"board historyBoard\">\n            {naturalsUpTo(8).map(\n                (y) =>\n                    naturalsUpTo(8).map(\n                        (x) => <Tile\n                            key={x + ',' + y}\n                            x={x} y={y}\n                            onClick={() => this.onClick(x, y)}\n                            text={this.state.grid[[x, y]]}\n                            valid={true}\n                            best={this.state.selectedCell}\n                            opacity={isSelectedCell(x, y) || this.state.grid[[x, y]] !== '.' ? 0.6 : 0.2}\n                            backgroundColor={this.state.grid[[x, y]] === '.' ? undefined : 'green'}\n                        />\n                    )\n            )}\n        </div>;\n    }\n}\n\nvar globalBoardTimer = null;\n\nsetInterval(\n    () => {\n        if (globalBoardTimer !== null)\n            globalBoardTimer.forceUpdate();\n    },\n    69,\n);\n\nfunction renderYesNo(bool) {\n    return bool ?\n        <span className=\"boolText\" style={{ color: 'green' }}>Yes</span> :\n        <span className=\"boolText\" style={{ color: 'red' }}>No</span>;\n}\n\nclass BoardTimer extends React.Component {\n    constructor() {\n        super();\n        globalBoardTimer = this;\n        this.state = {\n            previouslyAccumulatedSeconds: 0.0,\n            timerStartMS: 0.0,\n            timerRunning: false,\n            includesLoadingTheRoom: true,\n            includedRewardsGotten: 0,\n            invalidated: false,\n        };\n    }\n\n    toggleRunning() {\n        const now = performance.now();\n        const elapsed = 1e-3 * (now - this.state.timerStartMS);\n        sendSpywareEvent({kind: 'timer_toggleRunning', elapsed, oldState: this.state});\n        if (this.state.timerRunning)\n            this.setState({previouslyAccumulatedSeconds: this.state.previouslyAccumulatedSeconds + elapsed});\n        this.setState({timerRunning: !this.state.timerRunning, timerStartMS: now});\n    }\n\n    adjustRewards(delta) {\n        sendSpywareEvent({kind: 'timer_adjustRewards', delta, oldState: this.state});\n        this.setState({includedRewardsGotten: Math.max(0, Math.min(2, this.state.includedRewardsGotten + delta))});\n    }\n\n    toggleLoadingTheRoom() {\n        sendSpywareEvent({kind: 'timer_toggleLoadingTheRoom', oldState: this.state});\n        this.setState({includesLoadingTheRoom: !this.state.includesLoadingTheRoom});\n    }\n\n    toggleInvalidated() {\n        sendSpywareEvent({kind: 'timer_toggleInvalidated', oldState: this.state});\n        this.setState({invalidated: !this.state.invalidated});\n    }\n\n    resetTimer() {\n        sendSpywareEvent({kind: 'timer_resetTimer', oldState: this.state});\n        this.setState({\n            previouslyAccumulatedSeconds: 0.0,\n            timerStartMS: performance.now(),\n            timerRunning: false,\n        });\n    }\n\n    getSecondsElapsed() {\n        let total = this.state.previouslyAccumulatedSeconds;\n        if (this.state.timerRunning) {\n            const now = performance.now();\n            total += 1e-3 * (now - this.state.timerStartMS);\n        }\n        return total;\n    }\n\n    guessStepsElapsedFromTime(timeDeltaSeconds) {\n        // I did some linear regressions from real HD Italian runs. I'll put some data up at some point.\n        let prediction = Number(this.props.timedTickIntercept) + Number(this.props.timedTickRate) * timeDeltaSeconds;\n        if (this.state.includesLoadingTheRoom)\n            prediction += -940 + Number(this.props.roomEnteredOffset);\n        prediction += this.state.includedRewardsGotten * 760;\n        return Math.round(prediction);\n    }\n\n    render() {\n        const elapsed = this.getSecondsElapsed();\n        if (this.state.invalidated)\n            return <tr>\n                <td><b>Timer</b></td>\n                <td><b>Invalidated</b></td>\n            </tr>;\n        return <>\n            <tr>\n                <td>Seconds elapsed:</td>\n                <td>{elapsed.toFixed(2)}</td>\n            </tr>\n            <tr>\n                <td>Steps:</td>\n                <td>{this.guessStepsElapsedFromTime(elapsed)}</td>\n            </tr>\n            <tr>\n                <td>Entered room:</td>\n                <td>{renderYesNo(this.state.includesLoadingTheRoom)}</td>\n            </tr>\n            <tr>\n                <td>Rewards gotten:</td>\n                <td>{this.state.includedRewardsGotten}</td>\n            </tr>\n        </>;\n    }\n}\n\nfunction computeL1Distance(p1, p2) {\n    return Math.abs(p1[0] - p2[0]) + Math.abs(p1[1] - p2[1]);\n}\n\nconst defaultConfigurationParams = {\n    firstBoardStepsThousands: 7000,\n    firstBoardStepsThousandsStdDev: 100,\n    nextBoardStepsThousands: 7,\n    nextBoardStepsThousandsStdDev: 3,\n    timedBoardStepsThousandsStdDev: 0.2,\n    timedTickIntercept: 300,\n    timedTickRate: 252,\n    roomEnteredOffset: -500,\n    usingTimer: true,\n    spywareMode: false,\n    showAdvancedSettings: false,\n};\n\nclass MainMap extends React.Component {\n    layoutDrawingBoardRefs = [React.createRef(), React.createRef(), React.createRef()];\n    timerRef = React.createRef();\n\n    constructor() {\n        super();\n        this.state = this.makeEmptyState();\n        this.tableSize = \"25M\";\n        globalMap = this;\n    }\n\n    componentDidMount() {\n        this.doComputation(this.state.grid, this.state.squidsGotten);\n    }\n\n    makeEmptyGrid() {\n        const grid = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                grid[[x, y]] = null;\n        return grid;\n    }\n\n    makeEmptyState() {\n        const probs = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                probs[[x, y]] = 0.0;\n        // Select a particular layout, for practice mode.\n        const squidLayout = generateLayout();\n        const state = {\n            mode: 'calculator',\n            squidLayout,\n            grid: this.makeEmptyGrid(),\n            squidsGotten: 'unknown',\n            undoBuffer: [],\n            probs,\n            best: [3, 4],\n            cursorBelief: [0, 7],\n            valid: true,\n            observationProb: 1.0,\n            lastComputationTime: -1,\n\n            sequenceAware: false,\n            usingTimer: false,\n            showKeyShortcuts: false,\n            spywareMode: false,\n\n            timerStepEstimate: null,\n\n            potentialMatches: [],\n        };\n        // Load relevant configuration from localStorage.\n        let savedSettings = localStorage.getItem('SKSettings');\n        if (savedSettings === null) {\n            savedSettings = defaultConfigurationParams;\n        } else {\n            // if saved configuration from previous version, use defaults for \n            // any new parameters\n            savedSettings = JSON.parse(savedSettings);\n            for (const name of Object.keys(defaultConfigurationParams)) {\n                if (!(name in savedSettings)){\n                    savedSettings[name] = defaultConfigurationParams[name];\n                }\n            }\n        }\n        const configParams = savedSettings;\n        return {...state, ...configParams};\n    }\n\n    getConfigParams() {\n        const settings = {};\n        for (const name of Object.keys(defaultConfigurationParams))\n            settings[name] = this.state[name];\n        return settings;\n    }\n\n    saveConfigParams() {\n        const configParams = this.getConfigParams();\n        console.log('Saving config params:', configParams);\n        localStorage.setItem('SKSettings', JSON.stringify(configParams));\n    }\n\n    factoryResetConfigParams() {\n        this.setState(defaultConfigurationParams);\n    }\n\n    async loadSequenceTable() {\n        if (this.state.sequenceAware !== false)\n            return;\n        this.setState({sequenceAware: 'initializing'});\n        this.boardIndices = await makeBoardIndicesTable();\n        this.boardIndexToLayoutString = new Array(Object.keys(this.boardIndices).length);\n        for (const key of Object.keys(this.boardIndices))\n            this.boardIndexToLayoutString[this.boardIndices[key]] = key;\n\n        const tableName =  '/board_table_' + this.tableSize + '.bin';\n        dbCachedFetch(tableName, (buf) => {\n            this.boardTable = new Uint32Array(buf);\n            // Warning: Do I need to await wasm here first?\n            console.log('Board table length:', this.boardTable.length);\n            // Make sure every value is in range.\n            for (const v of this.boardTable)\n                if (v > 604583)\n                    alert('BUG BUG BUG: Bad value in board table: ' + v);\n            set_board_table(this.boardTable);\n            this.setState({\n                sequenceAware: true,\n                mode: 'calculator'\n            }, () => {\n                this.clearField();\n            });\n        });\n    }\n\n    *findMatchingLocations(observedBoards, startIndex, scanRange) {\n        if (observedBoards.length === 0) {\n            yield [];\n            return;\n        }\n        // Try to find the first match.\n        const soughtBoard = observedBoards[0];\n        const boardTable = this.boardTable;\n        const indexMax = Math.min(boardTable.length, startIndex + scanRange);\n        for (let i = startIndex; i < indexMax; i++)\n            if (boardTable[i] === soughtBoard)\n                for (const subResult of this.findMatchingLocations(observedBoards.slice(1), i, 50000))\n                    yield [i, ...subResult];\n    }\n\n    recomputePotentialMatches() {\n        const observedBoards = this.makeGameHistoryArguments()[0];\n        const matches = [];\n        for (const match of this.findMatchingLocations(observedBoards, 0, 1000000000))\n            matches.push(match);\n        sendSpywareEvent({kind: 'recomputePotentialMatches', matches});\n        if (matches[0].length === 0) {\n            matches.length = 0;\n            matches.push([null, null]);\n        }\n        this.setState({potentialMatches: matches});\n    }\n\n    makeGameHistoryArguments() {\n        // Figure out how many history boards we have.\n        const rawObservedBoards = this.layoutDrawingBoardRefs\n            .map((ref) => this.boardIndices?.[ref.current?.getLayoutString()]);\n        const observedBoards = [];\n        for (const ob of rawObservedBoards) {\n            if (ob === undefined)\n                break;\n            observedBoards.push(ob);\n        }\n\n        // The optimal thing to do here is to save the sequence of step delta estimates, but to make\n        // the tool less fragile we only use our timer-based estimates for the very final mean.\n\n        const priorStepsFromPreviousMeans = [];\n        const priorStepsFromPreviousStdDevs = [];\n        let first = true;\n        for (const index of [...observedBoards, null]) {\n            if (index === undefined)\n                break;\n            if (first) {\n                priorStepsFromPreviousMeans.push(1000.0 * Number(this.state.firstBoardStepsThousands));\n                priorStepsFromPreviousStdDevs.push(1000.0 * Number(this.state.firstBoardStepsThousandsStdDev));\n            } else {\n                // If we're the last delta, and also not the first, then possibly use our time delta.\n                if (index === null && this.state.timerStepEstimate !== null && this.state.usingTimer) {\n                    // Because the timerStepEstimate can be negative I have to avoid underflow.\n                    priorStepsFromPreviousMeans.push(Math.max(0, this.state.timerStepEstimate));\n                    priorStepsFromPreviousStdDevs.push(1000.0 * Number(this.state.timedBoardStepsThousandsStdDev));\n                } else {\n                    priorStepsFromPreviousMeans.push(1000.0 * Number(this.state.nextBoardStepsThousands));\n                    priorStepsFromPreviousStdDevs.push(1000.0 * Number(this.state.nextBoardStepsThousandsStdDev));\n                }\n            }\n            first = false;\n        }\n        return [\n            Uint32Array.from(observedBoards),\n            Uint32Array.from(priorStepsFromPreviousMeans),\n            Float64Array.from(priorStepsFromPreviousStdDevs),\n        ];\n    }\n\n    getGridStatistics(grid, squidsGotten) {\n        const hits = [];\n        const misses = [];\n        for (let y = 0; y < 8; y++) {\n            for (let x = 0; x < 8; x++) {\n                const gridValue = grid[[x, y]];\n                if (gridValue === 'HIT')\n                    hits.push(8 * y + x);\n                if (gridValue === 'MISS')\n                    misses.push(8 * y + x);\n            }\n        }\n        let numericSquidsGotten = -1;\n        for (const n of ['0', '1', '2', '3'])\n            if (squidsGotten === n || squidsGotten === Number(n))\n                numericSquidsGotten = Number(n);\n        return {hits, misses, numericSquidsGotten};\n    }\n\n    async doComputation(grid, squidsGotten) {\n        console.log('Doing computation:', squidsGotten, grid);\n        const t0 = performance.now();\n        const {hits, misses, numericSquidsGotten} = this.getGridStatistics(grid, squidsGotten);\n\n        await wasm;\n        let probabilities;\n        let gameHistoryArguments = null;\n        if (this.state.sequenceAware) {\n            gameHistoryArguments = this.makeGameHistoryArguments();\n            console.log('gameHistoryArguments:', gameHistoryArguments);\n\n            probabilities = calculate_probabilities_from_game_history(\n                Uint8Array.from(hits),\n                Uint8Array.from(misses),\n                numericSquidsGotten,\n                ...gameHistoryArguments,\n            );\n        } else {\n            probabilities = calculate_probabilities_without_sequence(\n                Uint8Array.from(hits),\n                Uint8Array.from(misses),\n                numericSquidsGotten,\n            );\n        }\n\n        let valid = true;\n        if (probabilities !== undefined) {\n            let maxY = 0;\n            let maxX = 0;\n            let highestProb = -1;\n            let probs = [];\n\n            // Here we implement our L1 distance bonus heuristic.\n            // The idea is that we want to highlight a square that isn't too far from where\n            // the player last adjusted the board. (i.e. where we believe their cursor is.)\n            for (let y = 0; y < 8; y++) {\n                for (let x = 0; x < 8; x++) {\n                    probs[[x, y]] = probabilities[8 * y + x];\n                    const l1Distance = computeL1Distance(this.state.cursorBelief, [x, y]);\n                    const distancePenaltyMultiplier = 1 - 0.03 * l1Distance;\n                    const distanceAdjustedProb = probabilities[8 * y + x] * distancePenaltyMultiplier;\n                    if (grid[[x, y]] === null && distanceAdjustedProb > highestProb) {\n                        highestProb = distanceAdjustedProb;\n                        maxX = x;\n                        maxY = y;\n                    }\n                }\n            }\n            const observationProb = probabilities[64];\n            this.setState({ probs, best: highestProb >= 0 ? [maxX, maxY] : null, valid, observationProb });\n        } else {\n            valid = false;\n            this.setState({ valid });\n        }\n        const t1 = performance.now();\n        this.setState({lastComputationTime: t1 - t0});\n        // Send a really big payload.\n        sendSpywareEvent({\n            kind: 'doComputation',\n            grid, hits, misses, numericSquidsGotten,\n            oldValid: this.state.valid,\n            didWeConcludeTheSituationWasValid: valid,\n            probabilities: Array.from(probabilities ?? []),\n            sequenceAware: this.state.sequenceAware,\n            usingTimer: this.state.usingTimer,\n            gameHistoryArguments: gameHistoryArguments?.map(a => Array.from(a)) ?? [],\n            timerStepEstimate: this.state.timerStepEstimate,\n            computationTime: (t1 - t0) / 1000,\n            configParams: this.getConfigParams(),\n        });\n    }\n\n    copyToUndoBuffer() {\n        this.setState({undoBuffer: [\n            ...this.state.undoBuffer,\n            {grid: this.state.grid, squidsGotten: this.state.squidsGotten, cursorBelief: this.state.cursorBelief},\n        ]});\n    }\n\n    onClick(x, y, setAsHit) {\n        sendSpywareEvent({kind: 'onClick', x, y, setAsHit});\n        const grid = { ...this.state.grid };\n        let gridValue = grid[[x, y]];\n        let squidsGotten = this.state.squidsGotten;\n        this.copyToUndoBuffer();\n\n        if (this.state.mode === 'calculator') {\n            switch (gridValue) {\n                case 'MISS':\n                    gridValue = 'HIT';\n                    break;\n                case 'HIT':\n                    gridValue = null;\n                    break;\n                default:\n                    gridValue = setAsHit ? 'HIT' : 'MISS';\n                    break;\n            }\n            grid[[x, y]] = gridValue;\n        } else {\n            // Determine from the random layout.\n            if (gridValue !== null)\n                return;\n            const arrayContains = (arr) => {\n                for (const cell of arr)\n                    if (cell[0] === x && cell[1] === y)\n                        return true;\n                return false;\n            }\n            if (arrayContains([...this.state.squidLayout.squid2, ...this.state.squidLayout.squid3, ...this.state.squidLayout.squid4])) {\n                gridValue = 'HIT';\n            } else {\n                gridValue = 'MISS';\n            }\n            grid[[x, y]] = gridValue;\n            // Compute the killed squid count.\n            squidsGotten = 0;\n            for (const n of ['2', '3', '4']) {\n                const squid = this.state.squidLayout['squid' + n];\n                let killed = true;\n                for (const cell of squid)\n                    if (grid[cell] !== 'HIT')\n                        killed = false;\n                squidsGotten += killed;\n            }\n            this.setState({ squidsGotten });\n        }\n        this.setState({grid, cursorBelief: [x, y]});\n        this.doComputation(grid, squidsGotten);\n    }\n\n    clearField() {\n        sendSpywareEvent({kind: 'clearField'});\n        const templateState = this.makeEmptyState();\n        const newState = {};\n        for (const name of ['squidLayout', 'grid', 'squidsGotten', 'undoBuffer', 'cursorBelief'])\n            newState[name] = templateState[name];\n        // The squidsGotten value of 'unknown' is banned in sequence-aware mode.\n        if (this.state.sequenceAware)\n            newState.squidsGotten = '0';\n        this.setState(newState);\n        this.doComputation(newState.grid, newState.squidsGotten);\n    }\n\n    undoLastMarking() {\n        const undoBuffer = [...this.state.undoBuffer];\n        if (undoBuffer.length === 0)\n            return;\n        const undoEntry = undoBuffer.pop();\n        sendSpywareEvent({kind: 'undoLastMarking', undoEntry});\n        this.setState({grid: undoEntry.grid, squidsGotten: undoEntry.squidsGotten, cursorBelief: undoEntry.cursorBelief, undoBuffer});\n        this.doComputation(undoEntry.grid, undoEntry.squidsGotten);\n    }\n\n    reportMiss() {\n        if (this.state.best !== null && this.state.grid[this.state.best] === null) {\n            sendSpywareEvent({kind: 'reportMiss', best: this.state.best, oldGrid: this.state.grid});\n            this.onClick(...this.state.best);\n        }\n    }\n\n    reportHit() {\n        if (this.state.best !== null && this.state.grid[this.state.best] === null) {\n            sendSpywareEvent({kind: 'reportHit', best: this.state.best, oldGrid: this.state.grid});\n            this.onClick(...this.state.best, true);\n            const {hits} = this.getGridStatistics(this.state.grid, this.state.squidsGotten);\n            if (hits.length === 9) {\n                this.incrementKills();\n            }\n        }\n    }\n\n    splitTimer() {\n        const boardTimer = this.timerRef.current;\n        if (boardTimer === null)\n            return;\n        const elapsed = boardTimer.getSecondsElapsed();\n        const timerStepEstimate = boardTimer.state.invalidated ? null : boardTimer.guessStepsElapsedFromTime(elapsed);\n        this.setState({timerStepEstimate});\n        console.log('Timer step estimate:', timerStepEstimate);\n        sendSpywareEvent({kind: 'splitTimer', invalidated: boardTimer.state.invalidated, timerStepEstimate: timerStepEstimate, elapsed});\n        boardTimer.setState({\n            previouslyAccumulatedSeconds: 0.0,\n            timerStartMS: performance.now(),\n            // After the first split we're no longer loading the room.\n            includesLoadingTheRoom: false,\n            includedRewardsGotten: 0,\n            timerRunning: true,\n            invalidated: false,\n        });\n        this.doComputation(this.state.grid, this.state.squidsGotten);\n    }\n\n    async incrementKills() {\n        this.copyToUndoBuffer();\n        let numericValue = this.state.squidsGotten === 'unknown' ? 0 : Number(this.state.squidsGotten);\n        let grid = this.state.grid;\n        numericValue++;\n        if (numericValue === 4) {\n            // TODO: Think very carefully about this timer splitting, and if and when it should happen.\n            const gameHistoryArguments = this.makeGameHistoryArguments();\n            this.splitTimer();\n            const success = await this.copyToHistory(gameHistoryArguments);\n            if (success) {\n                numericValue = 0;\n                grid = this.makeEmptyGrid();\n                // FIXME: Make us able to undo across completions.\n                this.setState({undoBuffer: [], cursorBelief: [0, 7]});\n            } else {\n                numericValue = 3;\n            }\n        }\n        sendSpywareEvent({kind: 'incrementKills', oldGrid: this.state.grid, newGrid: grid, newNumericValue: numericValue});\n        this.setState({grid, squidsGotten: '' + numericValue});\n        this.doComputation(grid, '' + numericValue);\n    }\n\n    async copyToHistory(gameHistoryArguments) {\n        const {hits, misses, numericSquidsGotten} = this.getGridStatistics(this.state.grid, this.state.squidsGotten);\n        if (gameHistoryArguments === undefined)\n            gameHistoryArguments = this.makeGameHistoryArguments();\n        await wasm;\n        const finalBoard = disambiguate_board(\n            Uint8Array.from(hits),\n            Uint8Array.from(misses),\n            numericSquidsGotten,\n            ...gameHistoryArguments,\n        );\n        if (finalBoard === undefined) {\n            // TODO: Show a proper error message in this case!\n            sendSpywareEvent({\n                kind: 'ambiguousCopyToHistory',\n                grid: this.state.grid,\n                squidsGotten: this.state.squidsGotten,\n                gameHistoryArguments: gameHistoryArguments.map(a => Array.from(a)),\n            });\n            return false;\n        }\n        console.log('Final board:', finalBoard);\n        sendSpywareEvent({kind: 'copyToHistory', squidLayout: finalBoard});\n        const layoutString = this.boardIndexToLayoutString[finalBoard];\n        const observedBoards = gameHistoryArguments[0];\n        let fillIndex = observedBoards.length;\n        // If we're already at capacity then we have to shift the boards over.\n        if (fillIndex === this.layoutDrawingBoardRefs.length) {\n            this.shiftHistory();\n            fillIndex--;\n        }\n        this.layoutDrawingBoardRefs[fillIndex].current.setStateFromLayoutString(layoutString);\n        return true;\n    }\n\n    shiftHistory() {\n        sendSpywareEvent({kind: 'shiftHistory'});\n        const drawingBoards = this.layoutDrawingBoardRefs.map((ref) => ref.current);\n        for (let i = 0; i < drawingBoards.length -1; i++) {\n            drawingBoards[i].setState(drawingBoards[i + 1].state);\n        }\n        drawingBoards[drawingBoards.length - 1].clearBoard();\n    }\n\n    setStateFromLayoutString(layoutString) {\n        const grid = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                grid[[x, y]] = layoutString[x + 8 * y] !== '.' ? 'HIT'\n                               : this.state.grid[[x, y]];\n        this.setState({ grid, squidsGotten: 3 }, () => {\n            this.doComputation(grid, 3);\n        });\n    }\n\n    async killMostLikely(gameHistoryArguments) {\n        const {hits, misses, numericSquidsGotten} = this.getGridStatistics(this.state.grid, this.state.squidsGotten);\n        if (gameHistoryArguments === undefined)\n            gameHistoryArguments = this.makeGameHistoryArguments();\n        await wasm;\n        const likelyBoard = disambiguate_board(\n            Uint8Array.from(hits),\n            Uint8Array.from(misses),\n            numericSquidsGotten,\n            ...gameHistoryArguments,\n        );\n        if (likelyBoard !== undefined) {\n            this.copyToUndoBuffer();\n            const layoutString = this.boardIndexToLayoutString[likelyBoard];\n            this.setStateFromLayoutString(layoutString);\n        }\n    }\n\n    renderActualMap() {\n        return <div className=\"board\">\n            {naturalsUpTo(8).map(\n                (y) =>\n                    naturalsUpTo(8).map(\n                        (x) => <Tile\n                            key={x + ',' + y}\n                            x={x} y={y}\n                            onClick={() => this.onClick(x, y)}\n                            text={this.state.grid[[x, y]]}\n                            prob={this.state.probs[[x, y]]}\n                            valid={this.state.valid}\n                            best={this.state.best}\n                            precision={2}\n                        />\n                    )\n            )}\n        </div>;\n    }\n\n    render() {\n        let usedShots = 0;\n        let openingOptimizer = true;\n        for (let y = 0; y < 8; y++) {\n            for (let x = 0; x < 8; x++) {\n                if (this.state.grid[[x, y]] !== null) {\n                    usedShots++;\n                    if (this.state.grid[[x, y]] === 'HIT')\n                        openingOptimizer = false;\n                }\n            }\n        }\n        return <>\n            <div className=\"container\">\n                <div style={{ placeSelf: \"start end\" }}>\n                    <div id=\"infoArea\">\n                        <table>\n                            <thead><tr><th>Item</th><th>Value</th></tr></thead>\n                            <tbody>\n                                <tr><td>Shots used:</td><td>{usedShots}</td></tr>\n                                {this.state.sequenceAware === true && this.state.usingTimer && <>\n                                    <BoardTimer ref={this.timerRef} roomEnteredOffset={this.state.roomEnteredOffset} timedTickIntercept={this.state.timedTickIntercept} timedTickRate={this.state.timedTickRate}/>\n                                    <tr>\n                                        <td>Last steps:</td>\n                                        <td>{this.state.timerStepEstimate === null ? '-' : this.state.timerStepEstimate}</td>\n                                    </tr>\n                                </>}\n                            </tbody>\n                        </table>\n                        {this.state.sequenceAware === true && this.state.usingTimer && this.state.showKeyShortcuts && <table>\n                            <thead><tr><th>Control</th><th>Shortcut</th></tr></thead>\n                            <tbody>\n                                <tr><td>Toggle Timer</td><td>Space</td></tr>\n                                <tr><td>Add Reward</td><td>,</td></tr>\n                                <tr><td>Remove Reward</td><td>Shift+,</td></tr>\n                                <tr><td>Toggle Room Entered</td><td>m</td></tr>\n                                <tr><td>Invalidate Timer</td><td>;</td></tr>\n                                <tr><td>Reset Timer</td><td>Shift+;</td></tr>\n                                <tr><td>Split Timer</td><td>w</td></tr>\n                            </tbody>\n                        </table>}\n                    </div>\n                    {this.state.sequenceAware === true &&\n                        this.state.usingTimer &&\n                        <div className=\"controls\">\n                            <button onClick={() => {\n                                this.setState({\n                                    showKeyShortcuts: !this.state.showKeyShortcuts\n                            })}}>\n                                Toggle Show Shortcuts\n                            </button>\n                        </div>}\n                </div>\n                {this.renderActualMap()}\n            </div>\n            {!this.state.valid && !this.state.sequenceAware &&\n                <div>Invalid configuration! This is not possible.</div>}\n            <div className=\"controls\" style={{ marginTop: '5px' }}>\n                Number of squids killed:\n                <select\n                    value={this.state.squidsGotten}\n                    onChange={(event) => {\n                        this.setState({ squidsGotten: event.target.value });\n                        this.doComputation(this.state.grid, event.target.value);\n                    }}\n                >\n                    {/* In sequence-aware mode, don't allow unknown because it's just an accident waiting to happen for a runner. */}\n                    {\n                        !this.state.sequenceAware &&\n                        <option value=\"unknown\">Unknown</option>\n                    }\n                    <option value=\"0\">0</option>\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                </select>\n            </div>\n            <div className=\"controls\">\n                <button onClick={() => { this.reportMiss(); }}>\n                    Miss (z)\n                </button>\n                <button onClick={() => { this.reportHit(); }}>\n                    Hit (x)\n                </button>\n                <button onClick={() => { this.incrementKills(); }}>\n                    Increment Kills (v)\n                </button>\n                {\n                    this.state.sequenceAware === true &&\n                    <>\n                        <button onClick={() => { this.killMostLikely(); }}>\n                            Quick Kill (k)\n                        </button>\n                        <button onClick={() => { this.shiftHistory(); }}>\n                            Shift History\n                        </button>\n                    </>\n                }\n                <button onClick={() => { this.clearField(); }}>\n                    Reset\n                </button>\n                {\n                    !this.state.sequenceAware &&\n                    <select\n                        value={this.state.mode}\n                        onChange={(event) => this.setState({\n                            mode: event.target.value\n                        })}\n                    >\n                        <option value=\"calculator\">Calculator Mode</option>\n                        <option value=\"practice\">Practice Mode</option>\n                    </select>\n                }\n            </div>\n            {openingOptimizer && this.state.mode === 'calculator' && !this.state.sequenceAware && <p>\n                Opening optimizer: Probability that this<br />pattern would get at least one hit: {\n                    this.state.valid ? ((100 * Math.max(0, 1 - this.state.observationProb)).toFixed(2) + '%') : \"Invalid\"\n                }\n            </p>}\n            {this.state.sequenceAware === 'initializing' &&\n                <p>Downloading table...</p>}\n            {this.state.sequenceAware === true && <>\n                <div>\n                    {this.layoutDrawingBoardRefs.map((ref, i) =>\n                        <LayoutDrawingBoard parent={this} ref={ref} key={i}/>\n                    )}\n                </div>\n                <hr/>\n                <fieldset id=\"settings\">\n                    <legend>\n                        Gaussian RNG step count beliefs (all counts in <i>\n                        thousands</i> of steps, except {\n                            this.state.usingTimer && this.state.showAdvancedSettings &&\n                            <>\"Timed board intercept\", \"Timed board rate\", and</>\n                        } \"Room entered offset\")\n                    </legend>\n                    <div>\n                        <label htmlFor=\"firstBoardMean\">First board mean:</label>\n                        <input id=\"firstBoardMean\"\n                            value={this.state.firstBoardStepsThousands}\n                            onChange={event => this.setState({\n                                firstBoardStepsThousands: event.target.value\n                        })}/>\n                        <label htmlFor=\"firstBoardStddev\">First board stddev:</label>\n                        <input id=\"firstBoardStddev\"\n                            value={this.state.firstBoardStepsThousandsStdDev}\n                            onChange={event => this.setState({\n                                firstBoardStepsThousandsStdDev: event.target.value\n                        })}/>\n                        {(!this.state.usingTimer || this.state.showAdvancedSettings) && <>\n                            <label htmlFor=\"nextBoardMean\">Next board mean:</label>\n                            <input id=\"nextBoardMean\"\n                                value={this.state.nextBoardStepsThousands}\n                                onChange={event => this.setState({\n                                    nextBoardStepsThousands: event.target.value\n                            })}/>\n                            <label htmlFor=\"nextBoardStddev\">Next board stddev:</label>\n                            <input id=\"nextBoardStddev\"\n                                value={this.state.nextBoardStepsThousandsStdDev}\n                                onChange={event => this.setState({\n                                    nextBoardStepsThousandsStdDev: event.target.value\n                            })}/>\n                        </>}\n                        {this.state.usingTimer && <>\n                            <label htmlFor=\"timedBoardStddev\">Timed board stddev:</label>\n                            <input id=\"timedBoardStddev\"\n                                value={this.state.timedBoardStepsThousandsStdDev}\n                                onChange={event => this.setState({\n                                    timedBoardStepsThousandsStdDev: event.target.value\n                            })}/>\n                            {this.state.showAdvancedSettings && <>\n                                <label htmlFor=\"timedBoardIntercept\">Timed board intercept:</label>\n                                <input id=\"timedBoardIntercept\"\n                                    value={this.state.timedTickIntercept}\n                                    onChange={event => this.setState({\n                                        timedTickIntercept: event.target.value\n                                })}/>\n                                <label htmlFor=\"timedBoardRate\">Timed board rate:</label>\n                                <input id=\"timedBoardRate\"\n                                    value={this.state.timedTickRate}\n                                    onChange={event => this.setState({\n                                        timedTickRate: event.target.value\n                                })}/>\n                            </>}\n                            <label htmlFor=\"roomEnteredOffset\">Room entered offset:</label>\n                            <input id=\"roomEnteredOffset\"\n                                value={this.state.roomEnteredOffset}\n                                onChange={event => this.setState({\n                                    roomEnteredOffset: event.target.value\n                            })}/>\n                        </>}\n                    </div>\n                </fieldset>\n\n                <div className=\"controls\">\n                    <label>\n                        <input type=\"checkbox\"\n                            checked={this.state.usingTimer}\n                            onChange={(event) => this.setState({\n                                usingTimer: !this.state.usingTimer\n                        })} />\n                        Use timer\n                    </label>\n                    <label>\n                        <input type=\"checkbox\"\n                            disabled={!this.state.usingTimer}\n                            checked={this.state.spywareMode}\n                            onChange={(event) => this.setState({\n                                spywareMode: !this.state.spywareMode\n                        })} />\n                        Enable spyware mode\n                    </label>\n                    <label>\n                        <input type=\"checkbox\"\n                            disabled={!this.state.usingTimer}\n                            checked={this.state.showAdvancedSettings}\n                            onChange={(event) => this.setState({\n                                showAdvancedSettings: !this.state.showAdvancedSettings\n                        })} />\n                        Show advanced settings\n                    </label>\n                </div>\n\n                <div className=\"controls\">\n                    <button onClick={() => { this.saveConfigParams(); }}>\n                        Save Settings\n                    </button>\n                    <button onClick={() => { this.factoryResetConfigParams(); }}>\n                        Reset to Defaults\n                    </button>\n                </div>\n\n                <div style={{\n                    margin: '5px',\n                    border: '2px solid white',\n                    borderRadius: '8px',\n                    width: '400px',\n                    minHeight: '20px',\n                    display: 'inline-block'\n                }}>\n                    {this.state.potentialMatches.map((match, i) => {\n                        if (match[0] === null) {\n                            return <div key={0}>No Matches Found!</div>\n                        }\n                        else {\n                            const diffs = match.slice(1);\n                            return <div key={i}>\n                                Potential match: {match[0]}{diffs.map((x, i) => <> +{x - match[i]}</>)}\n                            </div>;\n                        }\n                    })}\n                </div>\n                <div className=\"controls\">\n                    <button onClick={() => {\n                        this.recomputePotentialMatches();\n                    }}>Find Match Indices</button>\n                </div>\n            </>}\n            {!this.state.sequenceAware && <fieldset id=\"sequenceConfig\"\n                onChange={(event) => { this.tableSize = event.target.value; }}\n            >\n                <legend>Sequence-Aware Mode</legend>\n                <div>\n                    <label>\n                        <input type=\"radio\" name=\"tableSize\" value=\"500k\" />\n                        Small table (500 thousand values, 2 MB)\n                    </label>\n                </div>\n                <div>\n                    <label>\n                        <input type=\"radio\" name=\"tableSize\" value=\"5M\" />\n                        Medium table (5 million values, 20 MB)\n                    </label>\n                </div>\n                <div>\n                    <label>\n                        <input type=\"radio\" name=\"tableSize\" value=\"25M\" defaultChecked />\n                        Large table (25 million values, 100 MB)\n                    </label>\n                </div>\n                <button onClick={() => { this.loadSequenceTable(); }}>\n                    Initialize\n                </button>\n            </fieldset>}\n\n            {this.state.sequenceAware === true && this.state.usingTimer &&\n                this.state.spywareMode && <SpywareModeConfiguration />}\n\n            <p>\n                Last recompute time:&nbsp;\n                {this.state.lastComputationTime.toFixed(2)}ms\n            </p>\n        </>;\n    }\n}\n\nfunction globalShortcutsHandler(evt) {\n    // Check if the target is an input field that should take precedence over shortcuts.\n    if (evt.target && 'getAttribute' in evt.target && evt.target.getAttribute('data-stop-shortcuts'))\n        return;\n\n    if (evt.ctrlKey) {\n        if (globalMap !== null && evt.key.toLowerCase() === 'z') {\n            globalMap.undoLastMarking();\n        }\n    }\n    else {\n        if (globalMap !== null) {\n            // Support z or y for German keyboards.\n            if (evt.code === 'KeyZ')\n                globalMap.reportMiss();\n            if (evt.code === 'KeyX')\n                globalMap.reportHit();\n            if (evt.code === 'KeyV')\n                globalMap.incrementKills();\n            if (evt.code === 'KeyW')\n                globalMap.splitTimer();\n            if (evt.code === 'KeyK')\n                globalMap.killMostLikely();\n        }\n        if (globalBoardTimer !== null) {\n            if (evt.code === 'Space') {\n                globalBoardTimer.toggleRunning();\n                evt.preventDefault();\n            }\n            if (evt.code === 'Comma')\n                if (!evt.shiftKey)\n                    globalBoardTimer.adjustRewards(+1);\n                else\n                    globalBoardTimer.adjustRewards(-1);\n            if (evt.code === 'KeyM')\n                globalBoardTimer.toggleLoadingTheRoom();\n            if (evt.code === 'Semicolon')\n                if (!evt.shiftKey)\n                    globalBoardTimer.toggleInvalidated();\n                else\n                    globalBoardTimer.resetTimer();\n        }\n    }\n}\n\ndocument.addEventListener('keydown', globalShortcutsHandler);\n\nclass App extends React.Component {\n    render() {\n        return <>\n            <h1>Sploosh Kaboom Probability Calculator</h1>\n            <p style={{ marginLeft: 'auto', marginRight: 'auto', maxWidth: '600px' }}>\n                This is a tool for computing the likely locations of squids in the sploosh kaboom minigame of The Legend of Zelda: The Wind Waker (both SD and HD versions).\n                Unfortunately it's currently pretty complicated to use correctly.\n                A collection of tutorials will be compiled at some point, hopefully soon.\n                For now, see the <a href=\"https://github.com/Amphitryon0/web-sploosh-kaboom\">GitHub repository</a>.\n            </p>\n            <MainMap />\n            <p>\n                Made by Peter Schmidt-Nielsen, CryZe, csunday95, and Amphitryon\n                ({VERSION_STRING})\n            </p>\n        </>;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}